2022-07-04 22:31:06,684 DEBUG (HibernatePersistenceProvider.java:38) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2022-07-04 22:31:07,720 DEBUG (HibernatePersistenceProvider.java:88) - Located and parsed 1 persistence units; checking each
2022-07-04 22:31:07,732 DEBUG (HibernatePersistenceProvider.java:96) - Checking persistence-unit [name=dbinfo, explicit-provider=null] against incoming persistence unit name [dbinfo]
2022-07-04 22:31:07,736 DEBUG (ProviderChecker.java:95) - No PersistenceProvider explicitly requested, assuming Hibernate
2022-07-04 22:31:07,787 DEBUG (LogHelper.java:102) - PersistenceUnitInfo [
	name: dbinfo
	persistence provider classname: null
	classloader: null
	excludeUnlistedClasses: false
	JTA datasource: null
	Non JTA datasource: null
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/%ec%8b%a0%eb%8f%99%ed%98%81/playdata/20220509_lab/03.web/concertProject/concert/target/classes
	Shared Cache Mode: null
	Validation Mode: null
	Jar files URLs []
	Managed classes names [
		concert.model.entity.Concert
		concert.model.entity.ConcertSinger
		concert.model.entity.Orders
		concert.model.entity.Singer]
	Mapping files names []
	Properties [
		javax.persistence.jdbc.driver: com.mysql.cj.jdbc.Driver
		javax.persistence.jdbc.password: playdata
		hibernate.dialect: org.hibernate.dialect.MySQL8Dialect
		javax.persistence.jdbc.url: jdbc:mysql://localhost/playdata?characterEncoding=UTF-8
		hibernate.show_sql: true
		hibernate.hbm2ddl.auto: none
		hibernate.format_sql: true
		javax.persistence.jdbc.user: root]
2022-07-04 22:31:07,827 DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2022-07-04 22:31:07,847 DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2022-07-04 22:31:07,881 DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2022-07-04 22:31:08,472  INFO (Version.java:46) - HHH000412: Hibernate Core {5.4.2.Final}
2022-07-04 22:31:08,489 DEBUG (Environment.java:199) - HHH000206: hibernate.properties not found
2022-07-04 22:31:09,579 DEBUG (ServiceBinding.java:68) - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
2022-07-04 22:31:09,801 DEBUG (RegionFactoryInitiator.java:118) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2022-07-04 22:31:09,812 DEBUG (RegionFactoryInitiator.java:49) - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2022-07-04 22:31:09,979  INFO (JavaReflectionManager.java:49) - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2022-07-04 22:31:13,927 DEBUG (BasicTypeRegistry.java:156) - Adding type registration boolean -> org.hibernate.type.BooleanType@19b93fa8
2022-07-04 22:31:13,929 DEBUG (BasicTypeRegistry.java:156) - Adding type registration boolean -> org.hibernate.type.BooleanType@19b93fa8
2022-07-04 22:31:13,938 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@19b93fa8
2022-07-04 22:31:13,942 DEBUG (BasicTypeRegistry.java:156) - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@8ad6665
2022-07-04 22:31:13,946 DEBUG (BasicTypeRegistry.java:156) - Adding type registration true_false -> org.hibernate.type.TrueFalseType@bcef303
2022-07-04 22:31:13,962 DEBUG (BasicTypeRegistry.java:156) - Adding type registration yes_no -> org.hibernate.type.YesNoType@4f9a2c08
2022-07-04 22:31:13,981 DEBUG (BasicTypeRegistry.java:156) - Adding type registration byte -> org.hibernate.type.ByteType@386f0da3
2022-07-04 22:31:13,984 DEBUG (BasicTypeRegistry.java:156) - Adding type registration byte -> org.hibernate.type.ByteType@386f0da3
2022-07-04 22:31:13,987 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@386f0da3
2022-07-04 22:31:13,996 DEBUG (BasicTypeRegistry.java:156) - Adding type registration character -> org.hibernate.type.CharacterType@344f4dea
2022-07-04 22:31:13,998 DEBUG (BasicTypeRegistry.java:156) - Adding type registration char -> org.hibernate.type.CharacterType@344f4dea
2022-07-04 22:31:13,999 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@344f4dea
2022-07-04 22:31:14,010 DEBUG (BasicTypeRegistry.java:156) - Adding type registration short -> org.hibernate.type.ShortType@6c0d9d86
2022-07-04 22:31:14,012 DEBUG (BasicTypeRegistry.java:156) - Adding type registration short -> org.hibernate.type.ShortType@6c0d9d86
2022-07-04 22:31:14,013 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@6c0d9d86
2022-07-04 22:31:14,018 DEBUG (BasicTypeRegistry.java:156) - Adding type registration integer -> org.hibernate.type.IntegerType@16ce702d
2022-07-04 22:31:14,020 DEBUG (BasicTypeRegistry.java:156) - Adding type registration int -> org.hibernate.type.IntegerType@16ce702d
2022-07-04 22:31:14,023 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@16ce702d
2022-07-04 22:31:14,030 DEBUG (BasicTypeRegistry.java:156) - Adding type registration long -> org.hibernate.type.LongType@2ea6e30c
2022-07-04 22:31:14,031 DEBUG (BasicTypeRegistry.java:156) - Adding type registration long -> org.hibernate.type.LongType@2ea6e30c
2022-07-04 22:31:14,032 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Long -> org.hibernate.type.LongType@2ea6e30c
2022-07-04 22:31:14,038 DEBUG (BasicTypeRegistry.java:156) - Adding type registration float -> org.hibernate.type.FloatType@531f4093
2022-07-04 22:31:14,040 DEBUG (BasicTypeRegistry.java:156) - Adding type registration float -> org.hibernate.type.FloatType@531f4093
2022-07-04 22:31:14,040 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@531f4093
2022-07-04 22:31:14,060 DEBUG (BasicTypeRegistry.java:156) - Adding type registration double -> org.hibernate.type.DoubleType@16fdec90
2022-07-04 22:31:14,062 DEBUG (BasicTypeRegistry.java:156) - Adding type registration double -> org.hibernate.type.DoubleType@16fdec90
2022-07-04 22:31:14,063 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@16fdec90
2022-07-04 22:31:14,090 DEBUG (BasicTypeRegistry.java:156) - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@6a55299e
2022-07-04 22:31:14,091 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@6a55299e
2022-07-04 22:31:14,108 DEBUG (BasicTypeRegistry.java:156) - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@5a18cd76
2022-07-04 22:31:14,113 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@5a18cd76
2022-07-04 22:31:14,126 DEBUG (BasicTypeRegistry.java:156) - Adding type registration string -> org.hibernate.type.StringType@77825085
2022-07-04 22:31:14,127 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.String -> org.hibernate.type.StringType@77825085
2022-07-04 22:31:14,132 DEBUG (BasicTypeRegistry.java:156) - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@5b1ebf56
2022-07-04 22:31:14,138 DEBUG (BasicTypeRegistry.java:156) - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@3549bca9
2022-07-04 22:31:14,156 DEBUG (BasicTypeRegistry.java:156) - Adding type registration url -> org.hibernate.type.UrlType@46dffdc3
2022-07-04 22:31:14,158 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.net.URL -> org.hibernate.type.UrlType@46dffdc3
2022-07-04 22:31:14,168 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Duration -> org.hibernate.type.DurationType@4748a0f9
2022-07-04 22:31:14,169 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@4748a0f9
2022-07-04 22:31:14,260 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Instant -> org.hibernate.type.InstantType@46944ca9
2022-07-04 22:31:14,264 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@46944ca9
2022-07-04 22:31:14,281 DEBUG (BasicTypeRegistry.java:156) - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@2a448449
2022-07-04 22:31:14,283 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@2a448449
2022-07-04 22:31:14,297 DEBUG (BasicTypeRegistry.java:156) - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@517566b
2022-07-04 22:31:14,299 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@517566b
2022-07-04 22:31:14,315 DEBUG (BasicTypeRegistry.java:156) - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@55322aab
2022-07-04 22:31:14,317 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@55322aab
2022-07-04 22:31:14,334 DEBUG (BasicTypeRegistry.java:156) - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@126945f9
2022-07-04 22:31:14,336 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@126945f9
2022-07-04 22:31:14,344 DEBUG (BasicTypeRegistry.java:156) - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@4879dfad
2022-07-04 22:31:14,346 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@4879dfad
2022-07-04 22:31:14,357 DEBUG (BasicTypeRegistry.java:156) - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@737a135b
2022-07-04 22:31:14,359 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@737a135b
2022-07-04 22:31:14,374 DEBUG (BasicTypeRegistry.java:156) - Adding type registration date -> org.hibernate.type.DateType@6127a7e
2022-07-04 22:31:14,379 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Date -> org.hibernate.type.DateType@6127a7e
2022-07-04 22:31:14,388 DEBUG (BasicTypeRegistry.java:156) - Adding type registration time -> org.hibernate.type.TimeType@7a1a3478
2022-07-04 22:31:14,390 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@7a1a3478
2022-07-04 22:31:14,408 DEBUG (BasicTypeRegistry.java:156) - Adding type registration timestamp -> org.hibernate.type.TimestampType@4b6690c0
2022-07-04 22:31:14,410 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@4b6690c0
2022-07-04 22:31:14,411 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@4b6690c0
2022-07-04 22:31:14,438 DEBUG (BasicTypeRegistry.java:156) - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@eda25e5
2022-07-04 22:31:14,445 DEBUG (BasicTypeRegistry.java:156) - Adding type registration calendar -> org.hibernate.type.CalendarType@35f26e72
2022-07-04 22:31:14,448 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@35f26e72
2022-07-04 22:31:14,452 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@35f26e72
2022-07-04 22:31:14,470 DEBUG (BasicTypeRegistry.java:156) - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@79351f41
2022-07-04 22:31:14,475 DEBUG (BasicTypeRegistry.java:156) - Adding type registration locale -> org.hibernate.type.LocaleType@1e0f9063
2022-07-04 22:31:14,476 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@1e0f9063
2022-07-04 22:31:14,482 DEBUG (BasicTypeRegistry.java:156) - Adding type registration currency -> org.hibernate.type.CurrencyType@3ed242a4
2022-07-04 22:31:14,485 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@3ed242a4
2022-07-04 22:31:14,496 DEBUG (BasicTypeRegistry.java:156) - Adding type registration timezone -> org.hibernate.type.TimeZoneType@13f95696
2022-07-04 22:31:14,499 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@13f95696
2022-07-04 22:31:14,519 DEBUG (BasicTypeRegistry.java:156) - Adding type registration class -> org.hibernate.type.ClassType@ebaa6cb
2022-07-04 22:31:14,520 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@ebaa6cb
2022-07-04 22:31:14,526 DEBUG (BasicTypeRegistry.java:156) - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@66fdec9
2022-07-04 22:31:14,527 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@66fdec9
2022-07-04 22:31:14,531 DEBUG (BasicTypeRegistry.java:156) - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@52851b44
2022-07-04 22:31:14,540 DEBUG (BasicTypeRegistry.java:156) - Adding type registration binary -> org.hibernate.type.BinaryType@5ef6ae06
2022-07-04 22:31:14,543 DEBUG (BasicTypeRegistry.java:156) - Adding type registration byte[] -> org.hibernate.type.BinaryType@5ef6ae06
2022-07-04 22:31:14,544 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [B -> org.hibernate.type.BinaryType@5ef6ae06
2022-07-04 22:31:14,567 DEBUG (BasicTypeRegistry.java:156) - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@604f2bd2
2022-07-04 22:31:14,570 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@604f2bd2
2022-07-04 22:31:14,571 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@604f2bd2
2022-07-04 22:31:14,582 DEBUG (BasicTypeRegistry.java:156) - Adding type registration row_version -> org.hibernate.type.RowVersionType@366ac49b
2022-07-04 22:31:14,591 DEBUG (BasicTypeRegistry.java:156) - Adding type registration image -> org.hibernate.type.ImageType@2cc44ad
2022-07-04 22:31:14,598 DEBUG (BasicTypeRegistry.java:156) - Adding type registration characters -> org.hibernate.type.CharArrayType@33b1c5c5
2022-07-04 22:31:14,600 DEBUG (BasicTypeRegistry.java:156) - Adding type registration char[] -> org.hibernate.type.CharArrayType@33b1c5c5
2022-07-04 22:31:14,601 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [C -> org.hibernate.type.CharArrayType@33b1c5c5
2022-07-04 22:31:14,607 DEBUG (BasicTypeRegistry.java:156) - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@4535b6d5
2022-07-04 22:31:14,610 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@4535b6d5
2022-07-04 22:31:14,616 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@4535b6d5
2022-07-04 22:31:14,623 DEBUG (BasicTypeRegistry.java:156) - Adding type registration text -> org.hibernate.type.TextType@4b41e4dd
2022-07-04 22:31:14,632 DEBUG (BasicTypeRegistry.java:156) - Adding type registration ntext -> org.hibernate.type.NTextType@40844aab
2022-07-04 22:31:14,641 DEBUG (BasicTypeRegistry.java:156) - Adding type registration blob -> org.hibernate.type.BlobType@767e20cf
2022-07-04 22:31:14,643 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@767e20cf
2022-07-04 22:31:14,646 DEBUG (BasicTypeRegistry.java:156) - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@10ded6a9
2022-07-04 22:31:14,657 DEBUG (BasicTypeRegistry.java:156) - Adding type registration clob -> org.hibernate.type.ClobType@189aa67a
2022-07-04 22:31:14,664 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@189aa67a
2022-07-04 22:31:14,678 DEBUG (BasicTypeRegistry.java:156) - Adding type registration nclob -> org.hibernate.type.NClobType@542e560f
2022-07-04 22:31:14,678 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@542e560f
2022-07-04 22:31:14,683 DEBUG (BasicTypeRegistry.java:156) - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@3bcbb589
2022-07-04 22:31:14,689 DEBUG (BasicTypeRegistry.java:156) - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@53d102a2
2022-07-04 22:31:14,702 DEBUG (BasicTypeRegistry.java:156) - Adding type registration serializable -> org.hibernate.type.SerializableType@67c2e933
2022-07-04 22:31:14,721 DEBUG (BasicTypeRegistry.java:156) - Adding type registration object -> org.hibernate.type.ObjectType@5911e990
2022-07-04 22:31:14,723 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@5911e990
2022-07-04 22:31:14,726 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@54c62d71
2022-07-04 22:31:14,728 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@65045a87
2022-07-04 22:31:14,729 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@47f4e407
2022-07-04 22:31:14,730 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@2d1dee39
2022-07-04 22:31:14,731 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@48d5f34e
2022-07-04 22:31:14,732 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@fc258b1
2022-07-04 22:31:14,733 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@6ff65192
2022-07-04 22:31:14,735 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@2dd80673
2022-07-04 22:31:14,848 DEBUG (BootstrapContextImpl.java:272) - Injecting ScanEnvironment [org.hibernate.jpa.boot.internal.StandardJpaScanEnvironmentImpl@26bab2f1] into BootstrapContext; was [null]
2022-07-04 22:31:14,849 DEBUG (BootstrapContextImpl.java:267) - Injecting ScanOptions [org.hibernate.boot.archive.scan.internal.StandardScanOptions@3724af13] into BootstrapContext; was [org.hibernate.boot.archive.scan.internal.StandardScanOptions@68ead359]
2022-07-04 22:31:15,481 DEBUG (BootstrapContextImpl.java:262) - Injecting JPA temp ClassLoader [null] into BootstrapContext; was [null]
2022-07-04 22:31:15,484 DEBUG (ClassLoaderAccessImpl.java:45) - ClassLoaderAccessImpl#injectTempClassLoader(null) [was null]
2022-07-04 22:31:15,566 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2022-07-04 22:31:15,584 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2022-07-04 22:31:15,592 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2022-07-04 22:31:15,597 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2022-07-04 22:31:15,604 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2022-07-04 22:31:15,637 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2022-07-04 22:31:15,658 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2022-07-04 22:31:15,679 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2022-07-04 22:31:15,693 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2022-07-04 22:31:15,724 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2022-07-04 22:31:15,728 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2022-07-04 22:31:15,732 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2022-07-04 22:31:15,746 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2022-07-04 22:31:15,766 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2022-07-04 22:31:15,863  WARN (DriverManagerConnectionProviderImpl.java:72) - HHH10001002: Using Hibernate built-in connection pool (not for production use!)
2022-07-04 22:31:15,968  INFO (DriverManagerConnectionProviderImpl.java:115) - HHH10001005: using driver [com.mysql.cj.jdbc.Driver] at URL [jdbc:mysql://localhost/playdata?characterEncoding=UTF-8]
2022-07-04 22:31:15,976  INFO (DriverManagerConnectionProviderImpl.java:121) - HHH10001001: Connection properties: {password=playdata, user=root}
2022-07-04 22:31:15,980  INFO (DriverManagerConnectionProviderImpl.java:129) - HHH10001003: Autocommit mode: false
2022-07-04 22:31:16,018 DEBUG (DelegatingBasicLogger.java:384) - Initializing Connection pool with 1 Connections
2022-07-04 22:31:16,020  INFO (DriverManagerConnectionProviderImpl.java:239) - HHH000115: Hibernate connection pool size: 20 (min=1)
2022-07-04 22:31:20,270 DEBUG (JdbcEnvironmentInitiator.java:72) - Database ->
       name : MySQL
    version : 8.0.29
      major : 8
      minor : 0
2022-07-04 22:31:20,271 DEBUG (JdbcEnvironmentInitiator.java:83) - Driver ->
       name : MySQL Connector/J
    version : mysql-connector-java-8.0.29 (Revision: dd61577595edad45c398af508cf91ad26fc4144f)
      major : 8
      minor : 0
2022-07-04 22:31:20,273 DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.2
2022-07-04 22:31:20,437  INFO (Dialect.java:158) - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2022-07-04 22:31:20,569 DEBUG (IdentifierHelperBuilder.java:117) - JDBC driver metadata reported database stores quoted identifiers in more than one case
2022-07-04 22:31:20,804 DEBUG (IdentifierHelperBuilder.java:191) - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
2022-07-04 22:31:20,995 DEBUG (Namespace.java:51) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2022-07-04 22:31:21,010 DEBUG (TypeConfiguration.java:152) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@340b7ef6] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@30404dba]
2022-07-04 22:31:21,384 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.Concert
2022-07-04 22:31:21,531 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 22:31:21,660 DEBUG (EntityBinder.java:430) - Import with entity name Concert
2022-07-04 22:31:21,706 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.Concert on table Concert
2022-07-04 22:31:21,965 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concert_id, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,030 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertId with lazy=false
2022-07-04 22:31:22,048 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:concertId]
2022-07-04 22:31:22,073 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertId
2022-07-04 22:31:22,087 DEBUG (PropertyBinder.java:266) - Building property concertId
2022-07-04 22:31:22,165 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(concert_id)]), concertId, identity, , ...)
2022-07-04 22:31:22,168 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concert_name, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,170 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertName with lazy=false
2022-07-04 22:31:22,187 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:concertName]
2022-07-04 22:31:22,188 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertName
2022-07-04 22:31:22,190 DEBUG (PropertyBinder.java:266) - Building property concertName
2022-07-04 22:31:22,199 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 22:31:22,221 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concertSinger, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,254 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=null, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,334 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=element, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,366 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concertSinger_KEY, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,382 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concertSinger_KEY', referencedColumn='null', mappedBy='null'}
2022-07-04 22:31:22,398 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 22:31:22,399 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 22:31:22,406 DEBUG (CollectionBinder.java:449) - Collection role: concert.model.entity.Concert.concertSinger
2022-07-04 22:31:22,426 DEBUG (PropertyBinder.java:266) - Building property concertSinger
2022-07-04 22:31:22,431 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=contents, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,433 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property contents with lazy=false
2022-07-04 22:31:22,435 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:contents]
2022-07-04 22:31:22,436 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for contents
2022-07-04 22:31:22,439 DEBUG (PropertyBinder.java:266) - Building property contents
2022-07-04 22:31:22,441 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=date, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,443 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property date with lazy=false
2022-07-04 22:31:22,444 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:date]
2022-07-04 22:31:22,446 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for date
2022-07-04 22:31:22,447 DEBUG (PropertyBinder.java:266) - Building property date
2022-07-04 22:31:22,450 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=location, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,453 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property location with lazy=false
2022-07-04 22:31:22,454 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:location]
2022-07-04 22:31:22,455 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for location
2022-07-04 22:31:22,456 DEBUG (PropertyBinder.java:266) - Building property location
2022-07-04 22:31:22,458 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=max_seats, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,459 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property maxSeats with lazy=false
2022-07-04 22:31:22,460 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:maxSeats]
2022-07-04 22:31:22,461 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for maxSeats
2022-07-04 22:31:22,461 DEBUG (PropertyBinder.java:266) - Building property maxSeats
2022-07-04 22:31:22,462 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 22:31:22,464 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=order, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,465 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=null, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,466 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=element, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,467 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=order_KEY, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,468 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='order_KEY', referencedColumn='null', mappedBy='null'}
2022-07-04 22:31:22,469 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 22:31:22,477 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 22:31:22,478 DEBUG (CollectionBinder.java:449) - Collection role: concert.model.entity.Concert.order
2022-07-04 22:31:22,483 DEBUG (PropertyBinder.java:266) - Building property order
2022-07-04 22:31:22,516 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.Orders
2022-07-04 22:31:22,518 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 22:31:22,519 DEBUG (EntityBinder.java:430) - Import with entity name Orders
2022-07-04 22:31:22,520 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.Orders on table Orders
2022-07-04 22:31:22,588 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=order_id, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,591 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property orderId with lazy=false
2022-07-04 22:31:22,594 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:orderId]
2022-07-04 22:31:22,596 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for orderId
2022-07-04 22:31:22,597 DEBUG (PropertyBinder.java:266) - Building property orderId
2022-07-04 22:31:22,599 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(order_id)]), orderId, identity, , ...)
2022-07-04 22:31:22,601 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=amount, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,604 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property amount with lazy=false
2022-07-04 22:31:22,606 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:amount]
2022-07-04 22:31:22,606 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for amount
2022-07-04 22:31:22,607 DEBUG (PropertyBinder.java:266) - Building property amount
2022-07-04 22:31:22,608 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concert_id', referencedColumn='', mappedBy=''}
2022-07-04 22:31:22,610 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=concert, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,617 DEBUG (PropertyBinder.java:266) - Building property concert
2022-07-04 22:31:22,621 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=concert_id, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,623 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concert_id with lazy=false
2022-07-04 22:31:22,624 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:concert_id]
2022-07-04 22:31:22,625 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concert_id
2022-07-04 22:31:22,626 DEBUG (PropertyBinder.java:266) - Building property concert_id
2022-07-04 22:31:22,627 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=customer_email, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,628 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property customerEmail with lazy=false
2022-07-04 22:31:22,629 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:customerEmail]
2022-07-04 22:31:22,629 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for customerEmail
2022-07-04 22:31:22,632 DEBUG (PropertyBinder.java:266) - Building property customerEmail
2022-07-04 22:31:22,634 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=customer_name, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,634 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property customerName with lazy=false
2022-07-04 22:31:22,635 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:customerName]
2022-07-04 22:31:22,636 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for customerName
2022-07-04 22:31:22,637 DEBUG (PropertyBinder.java:266) - Building property customerName
2022-07-04 22:31:22,638 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.ConcertSinger
2022-07-04 22:31:22,644 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 22:31:22,646 DEBUG (EntityBinder.java:430) - Import with entity name ConcertSinger
2022-07-04 22:31:22,648 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.ConcertSinger on table concert_singer
2022-07-04 22:31:22,662 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=concert_singer_id, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,664 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertSingerId with lazy=false
2022-07-04 22:31:22,665 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.ConcertSinger:concertSingerId]
2022-07-04 22:31:22,667 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertSingerId
2022-07-04 22:31:22,668 DEBUG (PropertyBinder.java:266) - Building property concertSingerId
2022-07-04 22:31:22,669 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(concert_singer_id)]), concertSingerId, identity, , ...)
2022-07-04 22:31:22,673 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concert_id', referencedColumn='', mappedBy=''}
2022-07-04 22:31:22,675 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=concert, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,676 DEBUG (PropertyBinder.java:266) - Building property concert
2022-07-04 22:31:22,681 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=concert_id, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,683 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertId with lazy=false
2022-07-04 22:31:22,683 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.ConcertSinger:concertId]
2022-07-04 22:31:22,684 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertId
2022-07-04 22:31:22,686 DEBUG (PropertyBinder.java:266) - Building property concertId
2022-07-04 22:31:22,687 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='singer_id', referencedColumn='', mappedBy=''}
2022-07-04 22:31:22,688 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=singer, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,688 DEBUG (PropertyBinder.java:266) - Building property singer
2022-07-04 22:31:22,690 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=singer_id, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,692 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property singerId with lazy=false
2022-07-04 22:31:22,692 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.ConcertSinger:singerId]
2022-07-04 22:31:22,693 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for singerId
2022-07-04 22:31:22,694 DEBUG (PropertyBinder.java:266) - Building property singerId
2022-07-04 22:31:22,698 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.Singer
2022-07-04 22:31:22,699 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 22:31:22,699 DEBUG (EntityBinder.java:430) - Import with entity name Singer
2022-07-04 22:31:22,700 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.Singer on table Singer
2022-07-04 22:31:22,737 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=singer_id, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,739 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property singerId with lazy=false
2022-07-04 22:31:22,747 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Singer:singerId]
2022-07-04 22:31:22,749 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for singerId
2022-07-04 22:31:22,750 DEBUG (PropertyBinder.java:266) - Building property singerId
2022-07-04 22:31:22,755 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(singer_id)]), singerId, identity, , ...)
2022-07-04 22:31:22,757 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='singer'}
2022-07-04 22:31:22,759 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=concertSinger, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,761 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=null, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,763 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=element, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,765 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=concertSinger_KEY, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,767 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concertSinger_KEY', referencedColumn='null', mappedBy='null'}
2022-07-04 22:31:22,769 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='singer'}
2022-07-04 22:31:22,777 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='singer'}
2022-07-04 22:31:22,778 DEBUG (CollectionBinder.java:449) - Collection role: concert.model.entity.Singer.concertSinger
2022-07-04 22:31:22,780 DEBUG (PropertyBinder.java:266) - Building property concertSinger
2022-07-04 22:31:22,784 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=detail, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,786 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property detail with lazy=false
2022-07-04 22:31:22,787 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Singer:detail]
2022-07-04 22:31:22,794 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for detail
2022-07-04 22:31:22,795 DEBUG (PropertyBinder.java:266) - Building property detail
2022-07-04 22:31:22,796 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=singer_name, insertable=true, updatable=true, unique=false}
2022-07-04 22:31:22,797 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property singerName with lazy=false
2022-07-04 22:31:22,798 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Singer:singerName]
2022-07-04 22:31:22,798 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for singerName
2022-07-04 22:31:22,800 DEBUG (PropertyBinder.java:266) - Building property singerName
2022-07-04 22:31:22,810 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertId
2022-07-04 22:31:22,812 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertName
2022-07-04 22:31:22,814 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for contents
2022-07-04 22:31:22,815 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for date
2022-07-04 22:31:22,817 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for location
2022-07-04 22:31:22,818 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for maxSeats
2022-07-04 22:31:22,820 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for orderId
2022-07-04 22:31:22,821 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for amount
2022-07-04 22:31:22,826 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concert_id
2022-07-04 22:31:22,827 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for customerEmail
2022-07-04 22:31:22,827 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for customerName
2022-07-04 22:31:22,828 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertSingerId
2022-07-04 22:31:22,829 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertId
2022-07-04 22:31:22,829 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for singerId
2022-07-04 22:31:22,830 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for singerId
2022-07-04 22:31:22,834 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for detail
2022-07-04 22:31:22,835 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for singerName
2022-07-04 22:31:22,856 DEBUG (PrimaryKey.java:35) - Forcing column [concert_id] to be non-null as it is part of the primary key for table [concert]
2022-07-04 22:31:22,857 DEBUG (PrimaryKey.java:35) - Forcing column [order_id] to be non-null as it is part of the primary key for table [orders]
2022-07-04 22:31:22,857 DEBUG (PrimaryKey.java:35) - Forcing column [concert_singer_id] to be non-null as it is part of the primary key for table [concert_singer]
2022-07-04 22:31:22,858 DEBUG (PrimaryKey.java:35) - Forcing column [singer_id] to be non-null as it is part of the primary key for table [singer]
2022-07-04 22:31:22,859 DEBUG (CollectionSecondPass.java:51) - Second pass for collection: concert.model.entity.Concert.concertSinger
2022-07-04 22:31:22,869 DEBUG (CollectionBinder.java:898) - Binding a OneToMany: concert.model.entity.Concert.concertSinger through a foreign key
2022-07-04 22:31:22,875 DEBUG (CollectionBinder.java:936) - Mapping collection: concert.model.entity.Concert.concertSinger -> concert_singer
2022-07-04 22:31:22,888 DEBUG (TableBinder.java:565) - Retrieving property concert.model.entity.ConcertSinger.concert
2022-07-04 22:31:22,890 DEBUG (CollectionSecondPass.java:68) - Mapped collection key: concert_id, one-to-many: concert.model.entity.ConcertSinger
2022-07-04 22:31:22,890 DEBUG (CollectionSecondPass.java:51) - Second pass for collection: concert.model.entity.Concert.order
2022-07-04 22:31:22,891 DEBUG (CollectionBinder.java:898) - Binding a OneToMany: concert.model.entity.Concert.order through a foreign key
2022-07-04 22:31:22,892 DEBUG (CollectionBinder.java:936) - Mapping collection: concert.model.entity.Concert.order -> Orders
2022-07-04 22:31:22,893 DEBUG (TableBinder.java:565) - Retrieving property concert.model.entity.Orders.concert
2022-07-04 22:31:22,895 DEBUG (CollectionSecondPass.java:68) - Mapped collection key: concert_id, one-to-many: concert.model.entity.Orders
2022-07-04 22:31:22,895 DEBUG (CollectionSecondPass.java:51) - Second pass for collection: concert.model.entity.Singer.concertSinger
2022-07-04 22:31:22,896 DEBUG (CollectionBinder.java:898) - Binding a OneToMany: concert.model.entity.Singer.concertSinger through a foreign key
2022-07-04 22:31:22,897 DEBUG (CollectionBinder.java:936) - Mapping collection: concert.model.entity.Singer.concertSinger -> concert_singer
2022-07-04 22:31:22,897 DEBUG (TableBinder.java:565) - Retrieving property concert.model.entity.ConcertSinger.singer
2022-07-04 22:31:22,898 DEBUG (CollectionSecondPass.java:68) - Mapped collection key: singer_id, one-to-many: concert.model.entity.ConcertSinger
2022-07-04 22:31:22,899 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 22:31:22,909 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Singer
2022-07-04 22:31:22,910 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 22:31:22,917 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 22:31:22,918 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Singer
2022-07-04 22:31:22,919 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 22:31:23,219 DEBUG (SessionFactoryImpl.java:196) - Building session factory
2022-07-04 22:31:23,224 DEBUG (Settings.java:70) - SessionFactory name : null
2022-07-04 22:31:23,224 DEBUG (Settings.java:71) - Automatic flush during beforeCompletion(): enabled
2022-07-04 22:31:23,225 DEBUG (Settings.java:72) - Automatic session close at end of transaction: disabled
2022-07-04 22:31:23,226 DEBUG (Settings.java:74) - Statistics: disabled
2022-07-04 22:31:23,226 DEBUG (Settings.java:76) - Deleted entity synthetic identifier rollback: disabled
2022-07-04 22:31:23,227 DEBUG (Settings.java:77) - Default entity-mode: pojo
2022-07-04 22:31:23,227 DEBUG (Settings.java:78) - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2022-07-04 22:31:23,227 DEBUG (Settings.java:79) - Allow initialization of lazy state outside session : disabled
2022-07-04 22:31:23,228 DEBUG (Settings.java:81) - Using BatchFetchStyle : LEGACY
2022-07-04 22:31:23,229 DEBUG (Settings.java:82) - Default batch fetch size: -1
2022-07-04 22:31:23,229 DEBUG (Settings.java:83) - Maximum outer join fetch depth: 2
2022-07-04 22:31:23,229 DEBUG (Settings.java:84) - Default null ordering: NONE
2022-07-04 22:31:23,230 DEBUG (Settings.java:85) - Order SQL updates by primary key: disabled
2022-07-04 22:31:23,230 DEBUG (Settings.java:86) - Order SQL inserts for batching: disabled
2022-07-04 22:31:23,231 DEBUG (Settings.java:88) - multi-tenancy strategy : NONE
2022-07-04 22:31:23,232 DEBUG (Settings.java:90) - JTA Track by Thread: enabled
2022-07-04 22:31:23,233 DEBUG (Settings.java:92) - Query language substitutions: {}
2022-07-04 22:31:23,233 DEBUG (Settings.java:93) - Named query checking : enabled
2022-07-04 22:31:23,234 DEBUG (Settings.java:95) - Second-level cache: disabled
2022-07-04 22:31:23,234 DEBUG (Settings.java:96) - Second-level query cache: disabled
2022-07-04 22:31:23,234 DEBUG (Settings.java:97) - Second-level query cache factory: null
2022-07-04 22:31:23,235 DEBUG (Settings.java:98) - Second-level cache region prefix: null
2022-07-04 22:31:23,235 DEBUG (Settings.java:99) - Optimize second-level cache for minimal puts: disabled
2022-07-04 22:31:23,236 DEBUG (Settings.java:100) - Structured second-level cache entries: disabled
2022-07-04 22:31:23,236 DEBUG (Settings.java:101) - Second-level cache direct-reference entries: disabled
2022-07-04 22:31:23,237 DEBUG (Settings.java:102) - Automatic eviction of collection cache: disabled
2022-07-04 22:31:23,237 DEBUG (Settings.java:104) - JDBC batch size: 15
2022-07-04 22:31:23,238 DEBUG (Settings.java:105) - JDBC batch updates for versioned data: enabled
2022-07-04 22:31:23,239 DEBUG (Settings.java:106) - Scrollable result sets: enabled
2022-07-04 22:31:23,240 DEBUG (Settings.java:107) - Wrap result sets: disabled
2022-07-04 22:31:23,242 DEBUG (Settings.java:108) - JDBC3 getGeneratedKeys(): enabled
2022-07-04 22:31:23,242 DEBUG (Settings.java:109) - JDBC result set fetch size: null
2022-07-04 22:31:23,243 DEBUG (Settings.java:110) - Connection release mode: AFTER_TRANSACTION
2022-07-04 22:31:23,244 DEBUG (Settings.java:111) - Generate SQL with comments: disabled
2022-07-04 22:31:23,244 DEBUG (Settings.java:113) - JPA compliance - query : 
2022-07-04 22:31:23,245 DEBUG (Settings.java:114) - JPA compliance - closed-handling : 
2022-07-04 22:31:23,245 DEBUG (Settings.java:115) - JPA compliance - lists : 
2022-07-04 22:31:23,246 DEBUG (Settings.java:116) - JPA compliance - transactions : 
2022-07-04 22:31:23,749 DEBUG (SessionFactoryImpl.java:251) - Session factory constructed with filter configurations : {}
2022-07-04 22:31:23,751 DEBUG (SessionFactoryImpl.java:252) - Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, hibernate.format_sql=true, java.specification.version=11, sun.cpu.isalist=amd64, sun.jnu.encoding=MS949, hibernate.dialect=org.hibernate.dialect.MySQL8Dialect, java.class.path=C:\Users\신동혁\playdata\20220509_lab\03.web\concertProject\concert\target\classes;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\annotations-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-ant.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-ha.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-ssi.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-storeconfig.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-tribes.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\ecj-4.20.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\el-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jasper-el.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jasper.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jaspic-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jsp-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\servlet-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-coyote.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-dbcp.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-cs.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-de.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-es.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-fr.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-ja.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-ko.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-pt-BR.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-ru.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-zh-CN.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-jdbc.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-jni.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-util-scan.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-util.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-websocket.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\websocket-api.jar;C:\Users\신동혁\.m2\repository\javax\persistence\javax.persistence-api\2.2\javax.persistence-api-2.2.jar;C:\Users\신동혁\.m2\repository\org\hibernate\hibernate-entitymanager\5.4.2.Final\hibernate-entitymanager-5.4.2.Final.jar;C:\Users\신동혁\.m2\repository\org\jboss\logging\jboss-logging\3.3.2.Final\jboss-logging-3.3.2.Final.jar;C:\Users\신동혁\.m2\repository\org\hibernate\hibernate-core\5.4.2.Final\hibernate-core-5.4.2.Final.jar;C:\Users\신동혁\.m2\repository\org\javassist\javassist\3.24.0-GA\javassist-3.24.0-GA.jar;C:\Users\신동혁\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\신동혁\.m2\repository\org\jboss\jandex\2.0.5.Final\jandex-2.0.5.Final.jar;C:\Users\신동혁\.m2\repository\com\fasterxml\classmate\1.3.4\classmate-1.3.4.jar;C:\Users\신동혁\.m2\repository\javax\activation\javax.activation-api\1.2.0\javax.activation-api-1.2.0.jar;C:\Users\신동혁\.m2\repository\javax\xml\bind\jaxb-api\2.3.1\jaxb-api-2.3.1.jar;C:\Users\신동혁\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.1\jaxb-runtime-2.3.1.jar;C:\Users\신동혁\.m2\repository\org\glassfish\jaxb\txw2\2.3.1\txw2-2.3.1.jar;C:\Users\신동혁\.m2\repository\com\sun\istack\istack-commons-runtime\3.0.7\istack-commons-runtime-3.0.7.jar;C:\Users\신동혁\.m2\repository\org\jvnet\staxex\stax-ex\1.8\stax-ex-1.8.jar;C:\Users\신동혁\.m2\repository\com\sun\xml\fastinfoset\FastInfoset\1.2.15\FastInfoset-1.2.15.jar;C:\Users\신동혁\.m2\repository\org\dom4j\dom4j\2.1.1\dom4j-2.1.1.jar;C:\Users\신동혁\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.1.0.Final\hibernate-commons-annotations-5.1.0.Final.jar;C:\Users\신동혁\.m2\repository\net\bytebuddy\byte-buddy\1.9.10\byte-buddy-1.9.10.jar;C:\Users\신동혁\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.1.1.Final\jboss-transaction-api_1.2_spec-1.1.1.Final.jar;C:\Users\신동혁\.m2\repository\junit\junit\4.13.2\junit-4.13.2.jar;C:\Users\신동혁\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\신동혁\.m2\repository\org\projectlombok\lombok\1.18.24\lombok-1.18.24.jar;C:\Users\신동혁\.m2\repository\com\jslsolucoes\ojdbc6\11.2.0.1.0\ojdbc6-11.2.0.1.0.jar;C:\Users\신동혁\.m2\repository\mysql\mysql-connector-java\8.0.29\mysql-connector-java-8.0.29.jar;C:\Users\신동혁\.m2\repository\com\google\protobuf\protobuf-java\3.19.4\protobuf-java-3.19.4.jar;C:\Users\신동혁\.m2\repository\org\slf4j\slf4j-api\1.7.5\slf4j-api-1.7.5.jar;C:\Users\신동혁\.m2\repository\org\slf4j\slf4j-log4j12\1.7.5\slf4j-log4j12-1.7.5.jar;C:\Users\신동혁\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\신동혁\.m2\repository\org\modelmapper\modelmapper\2.4.0\modelmapper-2.4.0.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Asia/Seoul, javax.persistence.jdbc.url=jdbc:mysql://localhost/playdata?characterEncoding=UTF-8, javax.persistence.jdbc.user=****, os.name=Windows 10, java.vm.specification.version=11, sun.java.launcher=SUN_STANDARD, user.country=KR, sun.boot.library.path=C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11\bin, sun.java.command=cocert.model.dao.Test, jdk.debug=release, sun.cpu.endian=little, user.home=C:\Users\신동혁, user.language=ko, java.specification.vendor=Oracle Corporation, java.version.date=2018-09-25, java.home=C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11, file.separator=\, java.vm.compressedOopsMode=32-bit, line.separator=
, java.specification.name=Java Platform API Specification, java.vm.specification.vendor=Oracle Corporation, hibernate.transaction.coordinator_class=class org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, javax.persistence.jdbc.driver=com.mysql.cj.jdbc.Driver, hibernate.hbm2ddl.auto=none, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=11+28, user.name=Shin, path.separator=;, hibernate.connection.username=****, os.version=10.0, java.runtime.name=OpenJDK Runtime Environment, hibernate.connection.url=jdbc:mysql://localhost/playdata?characterEncoding=UTF-8, file.encoding=UTF-8, hibernate.ejb.persistenceUnitName=dbinfo, java.vm.name=OpenJDK 64-Bit Server VM, hibernate.show_sql=true, java.vendor.version=18.9, hibernate.connection.driver_class=com.mysql.cj.jdbc.Driver, java.vendor.url.bug=http://bugreport.java.com/bugreport/, java.io.tmpdir=C:\Users\신동혁\AppData\Local\Temp\, java.version=11, user.dir=C:\Users\신동혁\playdata\20220509_lab\03.web\concertProject\concert, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.password=****, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@2c58dcb1, java.library.path=C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Users/신동혁/playdata/20220509_lab/99.devEnv/eclipse//plugins/org.eclipse.justj.openjdk.hotspot.jre.full.win32.x86_64_16.0.1.v20210528-1205/jre/bin/server;C:/Users/신동혁/playdata/20220509_lab/99.devEnv/eclipse//plugins/org.eclipse.justj.openjdk.hotspot.jre.full.win32.x86_64_16.0.1.v20210528-1205/jre/bin;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11\bin;C:\oraclexe\app\oracle\product\11.2.0\server\bin;C:\Program Files\MySQL\MySQL Server 8.0\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\Bandizip\;C:\Program Files\Git\cmd;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\신동혁\AppData\Local\Programs\Python\Python39\Scripts\;C:\Users\신동혁\AppData\Local\Programs\Python\Python39\;C:\Users\신동혁\AppData\Local\Microsoft\WindowsApps;C:\Users\신동혁\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\eclipse;;., java.vendor=Oracle Corporation, java.vm.info=mixed mode, java.vm.version=11+28, hibernate.bytecode.use_reflection_optimizer=false, sun.io.unicode.encoding=UnicodeLittle, javax.persistence.jdbc.password=****, java.class.version=55.0}
2022-07-04 22:31:23,845 DEBUG (JaccIntegrator.java:80) - Skipping JACC integration as it was not enabled
2022-07-04 22:31:23,849 DEBUG (SessionFactoryImpl.java:291) - Instantiated session factory
2022-07-04 22:31:23,850 DEBUG (TypeConfiguration.java:157) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@340b7ef6] to SessionFactoryImpl [org.hibernate.internal.SessionFactoryImpl@5fe7f967]
2022-07-04 22:31:24,195 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Concert] is safe
2022-07-04 22:31:24,197 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Concert
2022-07-04 22:31:24,322 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Concert] is safe
2022-07-04 22:31:24,323 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Concert
2022-07-04 22:31:26,223 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Orders] is safe
2022-07-04 22:31:26,224 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Orders
2022-07-04 22:31:26,225 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Orders] is safe
2022-07-04 22:31:26,226 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Orders
2022-07-04 22:31:26,351 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.ConcertSinger] is safe
2022-07-04 22:31:26,353 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.ConcertSinger
2022-07-04 22:31:26,354 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.ConcertSinger] is safe
2022-07-04 22:31:26,358 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.ConcertSinger
2022-07-04 22:31:26,443 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Singer] is safe
2022-07-04 22:31:26,444 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Singer
2022-07-04 22:31:26,445 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Singer] is safe
2022-07-04 22:31:26,446 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Singer
2022-07-04 22:31:26,644 DEBUG (AbstractCollectionPersister.java:688) - Static SQL for collection: concert.model.entity.Singer.concertSinger
2022-07-04 22:31:26,645 DEBUG (AbstractCollectionPersister.java:690) -  Row insert: update concert_singer set singer_id=? where concert_singer_id=?
2022-07-04 22:31:26,646 DEBUG (AbstractCollectionPersister.java:693) -  Row update: update concert_singer set  where concert_singer_id=?
2022-07-04 22:31:26,646 DEBUG (AbstractCollectionPersister.java:696) -  Row delete: update concert_singer set singer_id=null where singer_id=? and concert_singer_id=?
2022-07-04 22:31:26,648 DEBUG (AbstractCollectionPersister.java:699) -  One-shot delete: update concert_singer set singer_id=null where singer_id=?
2022-07-04 22:31:26,650 DEBUG (AbstractCollectionPersister.java:688) - Static SQL for collection: concert.model.entity.Concert.order
2022-07-04 22:31:26,651 DEBUG (AbstractCollectionPersister.java:690) -  Row insert: update Orders set concert_id=? where order_id=?
2022-07-04 22:31:26,655 DEBUG (AbstractCollectionPersister.java:693) -  Row update: update Orders set  where order_id=?
2022-07-04 22:31:26,657 DEBUG (AbstractCollectionPersister.java:696) -  Row delete: update Orders set concert_id=null where concert_id=? and order_id=?
2022-07-04 22:31:26,660 DEBUG (AbstractCollectionPersister.java:699) -  One-shot delete: update Orders set concert_id=null where concert_id=?
2022-07-04 22:31:26,668 DEBUG (AbstractCollectionPersister.java:688) - Static SQL for collection: concert.model.entity.Concert.concertSinger
2022-07-04 22:31:26,670 DEBUG (AbstractCollectionPersister.java:690) -  Row insert: update concert_singer set concert_id=? where concert_singer_id=?
2022-07-04 22:31:26,671 DEBUG (AbstractCollectionPersister.java:693) -  Row update: update concert_singer set  where concert_singer_id=?
2022-07-04 22:31:26,672 DEBUG (AbstractCollectionPersister.java:696) -  Row delete: update concert_singer set concert_id=null where concert_id=? and concert_singer_id=?
2022-07-04 22:31:26,673 DEBUG (AbstractCollectionPersister.java:699) -  One-shot delete: update concert_singer set concert_id=null where concert_id=?
2022-07-04 22:31:26,699 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.Concert
2022-07-04 22:31:26,700 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select concert_id from Concert where concert_id =?
2022-07-04 22:31:26,700 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select concert_.concert_id, concert_.concert_name as concert_2_0_, concert_.contents as contents3_0_, concert_.date as date4_0_, concert_.location as location5_0_, concert_.max_seats as max_seat6_0_ from Concert concert_ where concert_.concert_id=?
2022-07-04 22:31:26,701 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Concert (concert_name, contents, date, location, max_seats, concert_id) values (?, ?, ?, ?, ?, ?)
2022-07-04 22:31:26,702 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Concert set concert_name=?, contents=?, date=?, location=?, max_seats=? where concert_id=?
2022-07-04 22:31:26,703 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Concert where concert_id=?
2022-07-04 22:31:26,703 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into Concert (concert_name, contents, date, location, max_seats) values (?, ?, ?, ?, ?)
2022-07-04 22:31:26,860 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4e642ee1]
2022-07-04 22:31:26,867 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertName
2022-07-04 22:31:26,868 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 22:31:26,900 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@751ae8a4]
2022-07-04 22:31:26,914 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7e307087]
2022-07-04 22:31:26,917 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : contents
2022-07-04 22:31:26,918 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : date
2022-07-04 22:31:26,919 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : location
2022-07-04 22:31:26,921 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : maxSeats
2022-07-04 22:31:26,923 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : order
2022-07-04 22:31:26,928 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@4bcaa195]
2022-07-04 22:31:26,930 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@d08edc5]
2022-07-04 22:31:26,934 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 22:31:27,050 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 22:31:27,080 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Concert)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:0>, path=concert.model.entity.Concert)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Concert.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Concert.concertSinger.<elements>)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.order, querySpaceUid=<gen:3>, path=concert.model.entity.Concert.order)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.Orders, querySpaceUid=<gen:4>, path=concert.model.entity.Concert.order.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Concert)
          - SQL table alias mapping - concert0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_0_0_}

2022-07-04 22:31:27,112 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Concert [NONE]: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 22:31:27,116 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7c2924d7]
2022-07-04 22:31:27,118 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertName
2022-07-04 22:31:27,119 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 22:31:27,122 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6587305a]
2022-07-04 22:31:27,127 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@abbe000]
2022-07-04 22:31:27,128 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : contents
2022-07-04 22:31:27,130 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : date
2022-07-04 22:31:27,130 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : location
2022-07-04 22:31:27,132 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : maxSeats
2022-07-04 22:31:27,133 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : order
2022-07-04 22:31:27,136 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@3f81621c]
2022-07-04 22:31:27,137 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5b9499fe]
2022-07-04 22:31:27,138 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 22:31:27,143 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 22:31:27,145 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Concert)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:0>, path=concert.model.entity.Concert)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Concert.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Concert.concertSinger.<elements>)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.order, querySpaceUid=<gen:3>, path=concert.model.entity.Concert.order)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.Orders, querySpaceUid=<gen:4>, path=concert.model.entity.Concert.order.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Concert)
          - SQL table alias mapping - concert0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_0_0_}

2022-07-04 22:31:27,150 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Concert [READ]: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 22:31:27,266 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.Concert: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 22:31:27,269 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.Concert: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 22:31:27,272 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.Orders
2022-07-04 22:31:27,273 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select order_id from Orders where order_id =?
2022-07-04 22:31:27,273 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select orders_.order_id, orders_.amount as amount2_2_, orders_.concert_id as concert_3_2_, orders_.customer_email as customer4_2_, orders_.customer_name as customer5_2_ from Orders orders_ where orders_.order_id=?
2022-07-04 22:31:27,274 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Orders (amount, concert_id, customer_email, customer_name, order_id) values (?, ?, ?, ?, ?)
2022-07-04 22:31:27,275 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Orders set amount=?, concert_id=?, customer_email=?, customer_name=? where order_id=?
2022-07-04 22:31:27,276 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Orders where order_id=?
2022-07-04 22:31:27,277 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into Orders (amount, concert_id, customer_email, customer_name) values (?, ?, ?, ?)
2022-07-04 22:31:27,277 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@38cedb7d]
2022-07-04 22:31:27,279 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : amount
2022-07-04 22:31:27,279 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 22:31:27,281 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2acdcce8]
2022-07-04 22:31:27,290 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert_id
2022-07-04 22:31:27,293 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerEmail
2022-07-04 22:31:27,294 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerName
2022-07-04 22:31:27,295 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 22:31:27,297 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 22:31:27,300 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Orders)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Orders, querySpaceUid=<gen:0>, path=concert.model.entity.Orders)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.Orders.concert)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {order_id1_2_0_}

2022-07-04 22:31:27,302 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Orders [NONE]: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 22:31:27,304 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@d5bb1c4]
2022-07-04 22:31:27,307 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : amount
2022-07-04 22:31:27,307 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 22:31:27,309 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@465b38e6]
2022-07-04 22:31:27,310 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert_id
2022-07-04 22:31:27,311 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerEmail
2022-07-04 22:31:27,311 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerName
2022-07-04 22:31:27,312 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 22:31:27,314 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 22:31:27,316 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Orders)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Orders, querySpaceUid=<gen:0>, path=concert.model.entity.Orders)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.Orders.concert)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {order_id1_2_0_}

2022-07-04 22:31:27,316 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Orders [READ]: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 22:31:27,318 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.Orders: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 22:31:27,320 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.Orders: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 22:31:27,322 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.ConcertSinger
2022-07-04 22:31:27,327 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select concert_singer_id from concert_singer where concert_singer_id =?
2022-07-04 22:31:27,328 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select concertsin_.concert_singer_id, concertsin_.concert_id as concert_2_1_, concertsin_.singer_id as singer_i3_1_ from concert_singer concertsin_ where concertsin_.concert_singer_id=?
2022-07-04 22:31:27,330 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into concert_singer (concert_id, singer_id, concert_singer_id) values (?, ?, ?)
2022-07-04 22:31:27,330 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update concert_singer set concert_id=?, singer_id=? where concert_singer_id=?
2022-07-04 22:31:27,331 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from concert_singer where concert_singer_id=?
2022-07-04 22:31:27,331 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into concert_singer (concert_id, singer_id) values (?, ?)
2022-07-04 22:31:27,334 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4b960b5b]
2022-07-04 22:31:27,336 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 22:31:27,338 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7bd96822]
2022-07-04 22:31:27,339 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 22:31:27,339 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 22:31:27,340 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@64dae3b7]
2022-07-04 22:31:27,343 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 22:31:27,347 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 22:31:27,348 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 22:31:27,351 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.ConcertSinger)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:0>, path=concert.model.entity.ConcertSinger)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.ConcertSinger.concert)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:2>, path=concert.model.entity.ConcertSinger.singer)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.ConcertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_1_0_}

2022-07-04 22:31:27,352 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.ConcertSinger [NONE]: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 22:31:27,354 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1fedf0a4]
2022-07-04 22:31:27,355 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 22:31:27,368 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2ee48610]
2022-07-04 22:31:27,370 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 22:31:27,371 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 22:31:27,372 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1d901f20]
2022-07-04 22:31:27,372 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 22:31:27,374 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 22:31:27,375 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 22:31:27,376 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.ConcertSinger)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:0>, path=concert.model.entity.ConcertSinger)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.ConcertSinger.concert)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:2>, path=concert.model.entity.ConcertSinger.singer)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.ConcertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_1_0_}

2022-07-04 22:31:27,377 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.ConcertSinger [READ]: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 22:31:27,382 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.ConcertSinger: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 22:31:27,384 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.ConcertSinger: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 22:31:27,386 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.Singer
2022-07-04 22:31:27,386 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select singer_id from Singer where singer_id =?
2022-07-04 22:31:27,387 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select singer_.singer_id, singer_.detail as detail2_3_, singer_.singer_name as singer_n3_3_ from Singer singer_ where singer_.singer_id=?
2022-07-04 22:31:27,387 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Singer (detail, singer_name, singer_id) values (?, ?, ?)
2022-07-04 22:31:27,388 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Singer set detail=?, singer_name=? where singer_id=?
2022-07-04 22:31:27,389 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Singer where singer_id=?
2022-07-04 22:31:27,390 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into Singer (detail, singer_name) values (?, ?)
2022-07-04 22:31:27,390 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6d08b4e6]
2022-07-04 22:31:27,393 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 22:31:27,394 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1acb74ad]
2022-07-04 22:31:27,396 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7bf01cb]
2022-07-04 22:31:27,397 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : detail
2022-07-04 22:31:27,398 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerName
2022-07-04 22:31:27,399 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 22:31:27,400 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 22:31:27,402 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Singer)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:0>, path=concert.model.entity.Singer)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Singer.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Singer.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Singer.concertSinger.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Singer)
          - SQL table alias mapping - singer0_
          - alias suffix - 0_
          - suffixed key columns - {singer_i1_3_0_}

2022-07-04 22:31:27,402 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Singer [NONE]: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 22:31:27,403 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2f382a5e]
2022-07-04 22:31:27,403 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 22:31:27,404 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@539a138b]
2022-07-04 22:31:27,405 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2cd4e16a]
2022-07-04 22:31:27,407 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : detail
2022-07-04 22:31:27,407 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerName
2022-07-04 22:31:27,408 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 22:31:27,409 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 22:31:27,410 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Singer)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:0>, path=concert.model.entity.Singer)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Singer.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Singer.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Singer.concertSinger.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Singer)
          - SQL table alias mapping - singer0_
          - alias suffix - 0_
          - suffixed key columns - {singer_i1_3_0_}

2022-07-04 22:31:27,421 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Singer [READ]: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 22:31:27,428 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.Singer: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 22:31:27,433 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.Singer: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 22:31:27,456 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@7affc159]
2022-07-04 22:31:27,459 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1682c08c]
2022-07-04 22:31:27,470 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 22:31:27,472 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2f14b0f6]
2022-07-04 22:31:27,472 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 22:31:27,474 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 22:31:27,475 DEBUG (MetamodelGraphWalker.java:154) - Property path deemed to be circular : singer
2022-07-04 22:31:27,479 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 22:31:27,480 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 22:31:27,512 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 22:31:27,515 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(collection=concert.model.entity.Singer.concertSinger)
    - Returns
       - CollectionReturnImpl(collection=concert.model.entity.Singer.concertSinger, querySpaceUid=<gen:0>, path=[concert.model.entity.Singer.concertSinger])
          - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:1>, path=[concert.model.entity.Singer.concertSinger].<elements>)
             - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:2>, path=[concert.model.entity.Singer.concertSinger].<elements>.concert)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=concert.model.entity.Singer.concertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {singer_i3_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - concert_1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=concert.model.entity.ConcertSinger)
                - SQL table alias mapping - concertsin0_
                - alias suffix - 1_
                - suffixed key columns - {concert_1_1_1_}

2022-07-04 22:31:27,518 DEBUG (CollectionLoader.java:83) - Static select for collection concert.model.entity.Singer.concertSinger: select concertsin0_.singer_id as singer_i3_1_0_, concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_singer_id as concert_1_1_1_, concertsin0_.concert_id as concert_2_1_1_, concertsin0_.singer_id as singer_i3_1_1_ from concert_singer concertsin0_ where concertsin0_.singer_id=?
2022-07-04 22:31:27,519 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@273a5a8a]
2022-07-04 22:31:27,522 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1823b9c4]
2022-07-04 22:31:27,524 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : amount
2022-07-04 22:31:27,524 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 22:31:27,525 DEBUG (MetamodelGraphWalker.java:154) - Property path deemed to be circular : concert
2022-07-04 22:31:27,526 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert_id
2022-07-04 22:31:27,527 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerEmail
2022-07-04 22:31:27,527 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerName
2022-07-04 22:31:27,527 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 22:31:27,529 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 22:31:27,531 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(collection=concert.model.entity.Concert.order)
    - Returns
       - CollectionReturnImpl(collection=concert.model.entity.Concert.order, querySpaceUid=<gen:0>, path=[concert.model.entity.Concert.order])
          - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.Orders, querySpaceUid=<gen:1>, path=[concert.model.entity.Concert.order].<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=concert.model.entity.Concert.order)
          - SQL table alias mapping - order0_
          - alias suffix - 0_
          - suffixed key columns - {concert_3_2_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - order_id1_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=concert.model.entity.Orders)
                - SQL table alias mapping - order0_
                - alias suffix - 1_
                - suffixed key columns - {order_id1_2_1_}

2022-07-04 22:31:27,532 DEBUG (CollectionLoader.java:83) - Static select for collection concert.model.entity.Concert.order: select order0_.concert_id as concert_3_2_0_, order0_.order_id as order_id1_2_0_, order0_.order_id as order_id1_2_1_, order0_.amount as amount2_2_1_, order0_.concert_id as concert_3_2_1_, order0_.customer_email as customer4_2_1_, order0_.customer_name as customer5_2_1_ from Orders order0_ where order0_.concert_id=?
2022-07-04 22:31:27,533 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@adcfad9]
2022-07-04 22:31:27,534 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@fb49fdf]
2022-07-04 22:31:27,535 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 22:31:27,537 DEBUG (MetamodelGraphWalker.java:154) - Property path deemed to be circular : concert
2022-07-04 22:31:27,537 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 22:31:27,538 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 22:31:27,550 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@10c47c79]
2022-07-04 22:31:27,557 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 22:31:27,558 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 22:31:27,559 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 22:31:27,561 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(collection=concert.model.entity.Concert.concertSinger)
    - Returns
       - CollectionReturnImpl(collection=concert.model.entity.Concert.concertSinger, querySpaceUid=<gen:0>, path=[concert.model.entity.Concert.concertSinger])
          - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:1>, path=[concert.model.entity.Concert.concertSinger].<elements>)
             - EntityAttributeFetchImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:2>, path=[concert.model.entity.Concert.concertSinger].<elements>.singer)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=concert.model.entity.Concert.concertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {concert_2_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - concert_1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=concert.model.entity.ConcertSinger)
                - SQL table alias mapping - concertsin0_
                - alias suffix - 1_
                - suffixed key columns - {concert_1_1_1_}

2022-07-04 22:31:27,563 DEBUG (CollectionLoader.java:83) - Static select for collection concert.model.entity.Concert.concertSinger: select concertsin0_.concert_id as concert_2_1_0_, concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_singer_id as concert_1_1_1_, concertsin0_.concert_id as concert_2_1_1_, concertsin0_.singer_id as singer_i3_1_1_ from concert_singer concertsin0_ where concertsin0_.concert_id=?
2022-07-04 22:31:27,765 DEBUG (SchemaManagementToolCoordinator.java:57) - No actions specified; doing nothing
2022-07-04 22:31:27,767 DEBUG (JtaPlatformInitiator.java:43) - No JtaPlatform was specified, checking resolver
2022-07-04 22:31:27,769 DEBUG (JtaPlatformResolverInitiator.java:33) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2022-07-04 22:31:27,794 DEBUG (StandardJtaPlatformResolver.java:137) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2022-07-04 22:31:27,795  INFO (JtaPlatformInitiator.java:52) - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2022-07-04 22:31:27,801 DEBUG (NamedQueryRepository.java:151) - Checking 0 named HQL queries
2022-07-04 22:31:27,803 DEBUG (NamedQueryRepository.java:167) - Checking 0 named SQL queries
2022-07-04 22:31:27,816 DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@787508ca
2022-07-04 22:31:27,824 DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: 45bc9547-c2e2-49c3-9533-3a62a698449a (<unnamed>)
2022-07-04 22:31:27,825 DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2022-07-04 22:31:29,091 DEBUG (StatisticsInitiator.java:101) - Statistics initialized [enabled=false]
2022-07-04 22:31:29,207 DEBUG (TransactionImpl.java:56) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2022-07-04 22:31:29,208 DEBUG (TransactionImpl.java:84) - begin
2022-07-04 22:31:29,320 DEBUG (SqlStatementLogger.java:94) - 
    select
        concert0_.concert_id as concert_1_0_0_,
        concert0_.concert_name as concert_2_0_0_,
        concert0_.contents as contents3_0_0_,
        concert0_.date as date4_0_0_,
        concert0_.location as location5_0_0_,
        concert0_.max_seats as max_seat6_0_0_ 
    from
        Concert concert0_ 
    where
        concert0_.concert_id=?
2022-07-04 22:31:29,640 DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2022-07-04 22:31:29,652 DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2022-07-04 22:31:29,795 DEBUG (TwoPhaseLoad.java:145) - Resolving associations for [concert.model.entity.Concert#1]
2022-07-04 22:31:29,869 DEBUG (TwoPhaseLoad.java:288) - Done materializing entity [concert.model.entity.Concert#1]
2022-07-04 22:31:29,874 DEBUG (ResourceRegistryStandardImpl.java:87) - HHH000387: ResultSet's statement was not registered
2022-07-04 22:31:29,881 DEBUG (AbstractLoadPlanBasedEntityLoader.java:219) - Done entity load : concert.model.entity.Concert#1
2022-07-04 22:34:11,847 DEBUG (HibernatePersistenceProvider.java:38) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2022-07-04 22:34:13,149 DEBUG (HibernatePersistenceProvider.java:88) - Located and parsed 1 persistence units; checking each
2022-07-04 22:34:13,165 DEBUG (HibernatePersistenceProvider.java:96) - Checking persistence-unit [name=dbinfo, explicit-provider=null] against incoming persistence unit name [dbinfo]
2022-07-04 22:34:13,169 DEBUG (ProviderChecker.java:95) - No PersistenceProvider explicitly requested, assuming Hibernate
2022-07-04 22:34:13,229 DEBUG (LogHelper.java:102) - PersistenceUnitInfo [
	name: dbinfo
	persistence provider classname: null
	classloader: null
	excludeUnlistedClasses: false
	JTA datasource: null
	Non JTA datasource: null
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/%ec%8b%a0%eb%8f%99%ed%98%81/playdata/20220509_lab/03.web/concertProject/concert/target/classes
	Shared Cache Mode: null
	Validation Mode: null
	Jar files URLs []
	Managed classes names [
		concert.model.entity.Concert
		concert.model.entity.ConcertSinger
		concert.model.entity.Orders
		concert.model.entity.Singer]
	Mapping files names []
	Properties [
		javax.persistence.jdbc.driver: com.mysql.cj.jdbc.Driver
		javax.persistence.jdbc.password: playdata
		hibernate.dialect: org.hibernate.dialect.MySQL8Dialect
		javax.persistence.jdbc.url: jdbc:mysql://localhost/playdata?characterEncoding=UTF-8
		hibernate.show_sql: true
		hibernate.hbm2ddl.auto: none
		hibernate.format_sql: true
		javax.persistence.jdbc.user: root]
2022-07-04 22:34:13,270 DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2022-07-04 22:34:13,283 DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2022-07-04 22:34:13,322 DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2022-07-04 22:34:13,984  INFO (Version.java:46) - HHH000412: Hibernate Core {5.4.2.Final}
2022-07-04 22:34:14,005 DEBUG (Environment.java:199) - HHH000206: hibernate.properties not found
2022-07-04 22:34:15,294 DEBUG (ServiceBinding.java:68) - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
2022-07-04 22:34:15,539 DEBUG (RegionFactoryInitiator.java:118) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2022-07-04 22:34:15,547 DEBUG (RegionFactoryInitiator.java:49) - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2022-07-04 22:34:15,715  INFO (JavaReflectionManager.java:49) - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2022-07-04 22:34:17,927 DEBUG (BasicTypeRegistry.java:156) - Adding type registration boolean -> org.hibernate.type.BooleanType@19b93fa8
2022-07-04 22:34:17,928 DEBUG (BasicTypeRegistry.java:156) - Adding type registration boolean -> org.hibernate.type.BooleanType@19b93fa8
2022-07-04 22:34:17,932 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@19b93fa8
2022-07-04 22:34:17,935 DEBUG (BasicTypeRegistry.java:156) - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@8ad6665
2022-07-04 22:34:17,937 DEBUG (BasicTypeRegistry.java:156) - Adding type registration true_false -> org.hibernate.type.TrueFalseType@bcef303
2022-07-04 22:34:17,938 DEBUG (BasicTypeRegistry.java:156) - Adding type registration yes_no -> org.hibernate.type.YesNoType@4f9a2c08
2022-07-04 22:34:17,942 DEBUG (BasicTypeRegistry.java:156) - Adding type registration byte -> org.hibernate.type.ByteType@386f0da3
2022-07-04 22:34:17,942 DEBUG (BasicTypeRegistry.java:156) - Adding type registration byte -> org.hibernate.type.ByteType@386f0da3
2022-07-04 22:34:17,942 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@386f0da3
2022-07-04 22:34:17,945 DEBUG (BasicTypeRegistry.java:156) - Adding type registration character -> org.hibernate.type.CharacterType@344f4dea
2022-07-04 22:34:17,945 DEBUG (BasicTypeRegistry.java:156) - Adding type registration char -> org.hibernate.type.CharacterType@344f4dea
2022-07-04 22:34:17,945 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@344f4dea
2022-07-04 22:34:17,950 DEBUG (BasicTypeRegistry.java:156) - Adding type registration short -> org.hibernate.type.ShortType@6c0d9d86
2022-07-04 22:34:17,950 DEBUG (BasicTypeRegistry.java:156) - Adding type registration short -> org.hibernate.type.ShortType@6c0d9d86
2022-07-04 22:34:17,950 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@6c0d9d86
2022-07-04 22:34:17,954 DEBUG (BasicTypeRegistry.java:156) - Adding type registration integer -> org.hibernate.type.IntegerType@16ce702d
2022-07-04 22:34:17,954 DEBUG (BasicTypeRegistry.java:156) - Adding type registration int -> org.hibernate.type.IntegerType@16ce702d
2022-07-04 22:34:17,955 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@16ce702d
2022-07-04 22:34:17,958 DEBUG (BasicTypeRegistry.java:156) - Adding type registration long -> org.hibernate.type.LongType@2ea6e30c
2022-07-04 22:34:17,959 DEBUG (BasicTypeRegistry.java:156) - Adding type registration long -> org.hibernate.type.LongType@2ea6e30c
2022-07-04 22:34:17,960 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Long -> org.hibernate.type.LongType@2ea6e30c
2022-07-04 22:34:17,963 DEBUG (BasicTypeRegistry.java:156) - Adding type registration float -> org.hibernate.type.FloatType@531f4093
2022-07-04 22:34:17,963 DEBUG (BasicTypeRegistry.java:156) - Adding type registration float -> org.hibernate.type.FloatType@531f4093
2022-07-04 22:34:17,964 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@531f4093
2022-07-04 22:34:17,966 DEBUG (BasicTypeRegistry.java:156) - Adding type registration double -> org.hibernate.type.DoubleType@16fdec90
2022-07-04 22:34:17,966 DEBUG (BasicTypeRegistry.java:156) - Adding type registration double -> org.hibernate.type.DoubleType@16fdec90
2022-07-04 22:34:17,966 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@16fdec90
2022-07-04 22:34:17,970 DEBUG (BasicTypeRegistry.java:156) - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@6a55299e
2022-07-04 22:34:17,971 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@6a55299e
2022-07-04 22:34:17,977 DEBUG (BasicTypeRegistry.java:156) - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@5a18cd76
2022-07-04 22:34:17,978 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@5a18cd76
2022-07-04 22:34:17,981 DEBUG (BasicTypeRegistry.java:156) - Adding type registration string -> org.hibernate.type.StringType@77825085
2022-07-04 22:34:17,982 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.String -> org.hibernate.type.StringType@77825085
2022-07-04 22:34:17,985 DEBUG (BasicTypeRegistry.java:156) - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@5b1ebf56
2022-07-04 22:34:17,988 DEBUG (BasicTypeRegistry.java:156) - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@3549bca9
2022-07-04 22:34:17,999 DEBUG (BasicTypeRegistry.java:156) - Adding type registration url -> org.hibernate.type.UrlType@46dffdc3
2022-07-04 22:34:18,000 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.net.URL -> org.hibernate.type.UrlType@46dffdc3
2022-07-04 22:34:18,005 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Duration -> org.hibernate.type.DurationType@4748a0f9
2022-07-04 22:34:18,006 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@4748a0f9
2022-07-04 22:34:18,040 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Instant -> org.hibernate.type.InstantType@46944ca9
2022-07-04 22:34:18,041 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@46944ca9
2022-07-04 22:34:18,048 DEBUG (BasicTypeRegistry.java:156) - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@2a448449
2022-07-04 22:34:18,048 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@2a448449
2022-07-04 22:34:18,053 DEBUG (BasicTypeRegistry.java:156) - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@517566b
2022-07-04 22:34:18,054 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@517566b
2022-07-04 22:34:18,058 DEBUG (BasicTypeRegistry.java:156) - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@55322aab
2022-07-04 22:34:18,059 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@55322aab
2022-07-04 22:34:18,065 DEBUG (BasicTypeRegistry.java:156) - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@126945f9
2022-07-04 22:34:18,066 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@126945f9
2022-07-04 22:34:18,071 DEBUG (BasicTypeRegistry.java:156) - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@4879dfad
2022-07-04 22:34:18,072 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@4879dfad
2022-07-04 22:34:18,079 DEBUG (BasicTypeRegistry.java:156) - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@737a135b
2022-07-04 22:34:18,080 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@737a135b
2022-07-04 22:34:18,086 DEBUG (BasicTypeRegistry.java:156) - Adding type registration date -> org.hibernate.type.DateType@6127a7e
2022-07-04 22:34:18,087 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Date -> org.hibernate.type.DateType@6127a7e
2022-07-04 22:34:18,092 DEBUG (BasicTypeRegistry.java:156) - Adding type registration time -> org.hibernate.type.TimeType@7a1a3478
2022-07-04 22:34:18,093 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@7a1a3478
2022-07-04 22:34:18,098 DEBUG (BasicTypeRegistry.java:156) - Adding type registration timestamp -> org.hibernate.type.TimestampType@4b6690c0
2022-07-04 22:34:18,099 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@4b6690c0
2022-07-04 22:34:18,099 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@4b6690c0
2022-07-04 22:34:18,106 DEBUG (BasicTypeRegistry.java:156) - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@eda25e5
2022-07-04 22:34:18,110 DEBUG (BasicTypeRegistry.java:156) - Adding type registration calendar -> org.hibernate.type.CalendarType@35f26e72
2022-07-04 22:34:18,111 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@35f26e72
2022-07-04 22:34:18,112 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@35f26e72
2022-07-04 22:34:18,115 DEBUG (BasicTypeRegistry.java:156) - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@79351f41
2022-07-04 22:34:18,120 DEBUG (BasicTypeRegistry.java:156) - Adding type registration locale -> org.hibernate.type.LocaleType@1e0f9063
2022-07-04 22:34:18,121 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@1e0f9063
2022-07-04 22:34:18,125 DEBUG (BasicTypeRegistry.java:156) - Adding type registration currency -> org.hibernate.type.CurrencyType@3ed242a4
2022-07-04 22:34:18,127 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@3ed242a4
2022-07-04 22:34:18,130 DEBUG (BasicTypeRegistry.java:156) - Adding type registration timezone -> org.hibernate.type.TimeZoneType@13f95696
2022-07-04 22:34:18,131 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@13f95696
2022-07-04 22:34:18,135 DEBUG (BasicTypeRegistry.java:156) - Adding type registration class -> org.hibernate.type.ClassType@ebaa6cb
2022-07-04 22:34:18,137 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@ebaa6cb
2022-07-04 22:34:18,141 DEBUG (BasicTypeRegistry.java:156) - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@66fdec9
2022-07-04 22:34:18,142 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@66fdec9
2022-07-04 22:34:18,143 DEBUG (BasicTypeRegistry.java:156) - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@52851b44
2022-07-04 22:34:18,147 DEBUG (BasicTypeRegistry.java:156) - Adding type registration binary -> org.hibernate.type.BinaryType@5ef6ae06
2022-07-04 22:34:18,147 DEBUG (BasicTypeRegistry.java:156) - Adding type registration byte[] -> org.hibernate.type.BinaryType@5ef6ae06
2022-07-04 22:34:18,148 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [B -> org.hibernate.type.BinaryType@5ef6ae06
2022-07-04 22:34:18,153 DEBUG (BasicTypeRegistry.java:156) - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@604f2bd2
2022-07-04 22:34:18,154 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@604f2bd2
2022-07-04 22:34:18,154 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@604f2bd2
2022-07-04 22:34:18,158 DEBUG (BasicTypeRegistry.java:156) - Adding type registration row_version -> org.hibernate.type.RowVersionType@366ac49b
2022-07-04 22:34:18,160 DEBUG (BasicTypeRegistry.java:156) - Adding type registration image -> org.hibernate.type.ImageType@2cc44ad
2022-07-04 22:34:18,164 DEBUG (BasicTypeRegistry.java:156) - Adding type registration characters -> org.hibernate.type.CharArrayType@33b1c5c5
2022-07-04 22:34:18,164 DEBUG (BasicTypeRegistry.java:156) - Adding type registration char[] -> org.hibernate.type.CharArrayType@33b1c5c5
2022-07-04 22:34:18,165 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [C -> org.hibernate.type.CharArrayType@33b1c5c5
2022-07-04 22:34:18,169 DEBUG (BasicTypeRegistry.java:156) - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@4535b6d5
2022-07-04 22:34:18,171 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@4535b6d5
2022-07-04 22:34:18,172 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@4535b6d5
2022-07-04 22:34:18,175 DEBUG (BasicTypeRegistry.java:156) - Adding type registration text -> org.hibernate.type.TextType@4b41e4dd
2022-07-04 22:34:18,176 DEBUG (BasicTypeRegistry.java:156) - Adding type registration ntext -> org.hibernate.type.NTextType@40844aab
2022-07-04 22:34:18,183 DEBUG (BasicTypeRegistry.java:156) - Adding type registration blob -> org.hibernate.type.BlobType@767e20cf
2022-07-04 22:34:18,183 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@767e20cf
2022-07-04 22:34:18,186 DEBUG (BasicTypeRegistry.java:156) - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@10ded6a9
2022-07-04 22:34:18,191 DEBUG (BasicTypeRegistry.java:156) - Adding type registration clob -> org.hibernate.type.ClobType@189aa67a
2022-07-04 22:34:18,192 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@189aa67a
2022-07-04 22:34:18,198 DEBUG (BasicTypeRegistry.java:156) - Adding type registration nclob -> org.hibernate.type.NClobType@542e560f
2022-07-04 22:34:18,199 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@542e560f
2022-07-04 22:34:18,201 DEBUG (BasicTypeRegistry.java:156) - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@3bcbb589
2022-07-04 22:34:18,203 DEBUG (BasicTypeRegistry.java:156) - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@53d102a2
2022-07-04 22:34:18,208 DEBUG (BasicTypeRegistry.java:156) - Adding type registration serializable -> org.hibernate.type.SerializableType@67c2e933
2022-07-04 22:34:18,219 DEBUG (BasicTypeRegistry.java:156) - Adding type registration object -> org.hibernate.type.ObjectType@5911e990
2022-07-04 22:34:18,220 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@5911e990
2022-07-04 22:34:18,222 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@54c62d71
2022-07-04 22:34:18,223 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@65045a87
2022-07-04 22:34:18,224 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@47f4e407
2022-07-04 22:34:18,225 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@2d1dee39
2022-07-04 22:34:18,225 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@48d5f34e
2022-07-04 22:34:18,226 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@fc258b1
2022-07-04 22:34:18,226 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@6ff65192
2022-07-04 22:34:18,228 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@2dd80673
2022-07-04 22:34:18,283 DEBUG (BootstrapContextImpl.java:272) - Injecting ScanEnvironment [org.hibernate.jpa.boot.internal.StandardJpaScanEnvironmentImpl@26bab2f1] into BootstrapContext; was [null]
2022-07-04 22:34:18,285 DEBUG (BootstrapContextImpl.java:267) - Injecting ScanOptions [org.hibernate.boot.archive.scan.internal.StandardScanOptions@3724af13] into BootstrapContext; was [org.hibernate.boot.archive.scan.internal.StandardScanOptions@68ead359]
2022-07-04 22:34:18,593 DEBUG (BootstrapContextImpl.java:262) - Injecting JPA temp ClassLoader [null] into BootstrapContext; was [null]
2022-07-04 22:34:18,594 DEBUG (ClassLoaderAccessImpl.java:45) - ClassLoaderAccessImpl#injectTempClassLoader(null) [was null]
2022-07-04 22:34:18,667 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2022-07-04 22:34:18,669 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2022-07-04 22:34:18,675 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2022-07-04 22:34:18,678 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2022-07-04 22:34:18,682 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2022-07-04 22:34:18,688 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2022-07-04 22:34:18,690 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2022-07-04 22:34:18,696 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2022-07-04 22:34:18,715 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2022-07-04 22:34:18,718 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2022-07-04 22:34:18,720 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2022-07-04 22:34:18,723 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2022-07-04 22:34:18,724 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2022-07-04 22:34:18,728 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2022-07-04 22:34:18,754  WARN (DriverManagerConnectionProviderImpl.java:72) - HHH10001002: Using Hibernate built-in connection pool (not for production use!)
2022-07-04 22:34:18,864  INFO (DriverManagerConnectionProviderImpl.java:115) - HHH10001005: using driver [com.mysql.cj.jdbc.Driver] at URL [jdbc:mysql://localhost/playdata?characterEncoding=UTF-8]
2022-07-04 22:34:18,865  INFO (DriverManagerConnectionProviderImpl.java:121) - HHH10001001: Connection properties: {password=playdata, user=root}
2022-07-04 22:34:18,867  INFO (DriverManagerConnectionProviderImpl.java:129) - HHH10001003: Autocommit mode: false
2022-07-04 22:34:18,892 DEBUG (DelegatingBasicLogger.java:384) - Initializing Connection pool with 1 Connections
2022-07-04 22:34:18,894  INFO (DriverManagerConnectionProviderImpl.java:239) - HHH000115: Hibernate connection pool size: 20 (min=1)
2022-07-04 22:34:21,759 DEBUG (JdbcEnvironmentInitiator.java:72) - Database ->
       name : MySQL
    version : 8.0.29
      major : 8
      minor : 0
2022-07-04 22:34:21,760 DEBUG (JdbcEnvironmentInitiator.java:83) - Driver ->
       name : MySQL Connector/J
    version : mysql-connector-java-8.0.29 (Revision: dd61577595edad45c398af508cf91ad26fc4144f)
      major : 8
      minor : 0
2022-07-04 22:34:21,761 DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.2
2022-07-04 22:34:21,869  INFO (Dialect.java:158) - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2022-07-04 22:34:21,999 DEBUG (IdentifierHelperBuilder.java:117) - JDBC driver metadata reported database stores quoted identifiers in more than one case
2022-07-04 22:34:22,229 DEBUG (IdentifierHelperBuilder.java:191) - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
2022-07-04 22:34:22,388 DEBUG (Namespace.java:51) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2022-07-04 22:34:22,404 DEBUG (TypeConfiguration.java:152) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@340b7ef6] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@30404dba]
2022-07-04 22:34:22,744 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.Concert
2022-07-04 22:34:22,881 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 22:34:22,906 DEBUG (EntityBinder.java:430) - Import with entity name Concert
2022-07-04 22:34:22,930 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.Concert on table Concert
2022-07-04 22:34:23,114 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concert_id, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,134 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertId with lazy=false
2022-07-04 22:34:23,144 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:concertId]
2022-07-04 22:34:23,157 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertId
2022-07-04 22:34:23,169 DEBUG (PropertyBinder.java:266) - Building property concertId
2022-07-04 22:34:23,209 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(concert_id)]), concertId, identity, , ...)
2022-07-04 22:34:23,211 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concert_name, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,214 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertName with lazy=false
2022-07-04 22:34:23,214 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:concertName]
2022-07-04 22:34:23,215 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertName
2022-07-04 22:34:23,216 DEBUG (PropertyBinder.java:266) - Building property concertName
2022-07-04 22:34:23,223 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 22:34:23,230 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concertSinger, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,237 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=null, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,287 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=element, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,289 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concertSinger_KEY, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,293 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concertSinger_KEY', referencedColumn='null', mappedBy='null'}
2022-07-04 22:34:23,298 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 22:34:23,299 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 22:34:23,303 DEBUG (CollectionBinder.java:449) - Collection role: concert.model.entity.Concert.concertSinger
2022-07-04 22:34:23,317 DEBUG (PropertyBinder.java:266) - Building property concertSinger
2022-07-04 22:34:23,320 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=contents, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,320 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property contents with lazy=false
2022-07-04 22:34:23,322 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:contents]
2022-07-04 22:34:23,323 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for contents
2022-07-04 22:34:23,326 DEBUG (PropertyBinder.java:266) - Building property contents
2022-07-04 22:34:23,328 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=date, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,328 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property date with lazy=false
2022-07-04 22:34:23,329 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:date]
2022-07-04 22:34:23,332 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for date
2022-07-04 22:34:23,333 DEBUG (PropertyBinder.java:266) - Building property date
2022-07-04 22:34:23,334 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=location, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,335 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property location with lazy=false
2022-07-04 22:34:23,336 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:location]
2022-07-04 22:34:23,338 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for location
2022-07-04 22:34:23,339 DEBUG (PropertyBinder.java:266) - Building property location
2022-07-04 22:34:23,340 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=max_seats, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,341 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property maxSeats with lazy=false
2022-07-04 22:34:23,341 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:maxSeats]
2022-07-04 22:34:23,342 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for maxSeats
2022-07-04 22:34:23,344 DEBUG (PropertyBinder.java:266) - Building property maxSeats
2022-07-04 22:34:23,344 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 22:34:23,346 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=order, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,348 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=null, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,349 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=element, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,350 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=order_KEY, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,351 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='order_KEY', referencedColumn='null', mappedBy='null'}
2022-07-04 22:34:23,353 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 22:34:23,354 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 22:34:23,354 DEBUG (CollectionBinder.java:449) - Collection role: concert.model.entity.Concert.order
2022-07-04 22:34:23,355 DEBUG (PropertyBinder.java:266) - Building property order
2022-07-04 22:34:23,361 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.Orders
2022-07-04 22:34:23,363 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 22:34:23,365 DEBUG (EntityBinder.java:430) - Import with entity name Orders
2022-07-04 22:34:23,365 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.Orders on table Orders
2022-07-04 22:34:23,427 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=order_id, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,428 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property orderId with lazy=false
2022-07-04 22:34:23,429 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:orderId]
2022-07-04 22:34:23,430 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for orderId
2022-07-04 22:34:23,431 DEBUG (PropertyBinder.java:266) - Building property orderId
2022-07-04 22:34:23,433 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(order_id)]), orderId, identity, , ...)
2022-07-04 22:34:23,434 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=amount, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,435 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property amount with lazy=false
2022-07-04 22:34:23,436 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:amount]
2022-07-04 22:34:23,437 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for amount
2022-07-04 22:34:23,438 DEBUG (PropertyBinder.java:266) - Building property amount
2022-07-04 22:34:23,439 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concert_id', referencedColumn='', mappedBy=''}
2022-07-04 22:34:23,440 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=concert, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,452 DEBUG (PropertyBinder.java:266) - Building property concert
2022-07-04 22:34:23,458 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=concert_id, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,459 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concert_id with lazy=false
2022-07-04 22:34:23,461 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:concert_id]
2022-07-04 22:34:23,462 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concert_id
2022-07-04 22:34:23,463 DEBUG (PropertyBinder.java:266) - Building property concert_id
2022-07-04 22:34:23,464 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=customer_email, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,466 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property customerEmail with lazy=false
2022-07-04 22:34:23,466 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:customerEmail]
2022-07-04 22:34:23,467 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for customerEmail
2022-07-04 22:34:23,468 DEBUG (PropertyBinder.java:266) - Building property customerEmail
2022-07-04 22:34:23,469 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=customer_name, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,470 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property customerName with lazy=false
2022-07-04 22:34:23,470 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:customerName]
2022-07-04 22:34:23,471 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for customerName
2022-07-04 22:34:23,472 DEBUG (PropertyBinder.java:266) - Building property customerName
2022-07-04 22:34:23,473 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.ConcertSinger
2022-07-04 22:34:23,475 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 22:34:23,476 DEBUG (EntityBinder.java:430) - Import with entity name ConcertSinger
2022-07-04 22:34:23,477 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.ConcertSinger on table concert_singer
2022-07-04 22:34:23,485 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=concert_singer_id, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,486 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertSingerId with lazy=false
2022-07-04 22:34:23,487 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.ConcertSinger:concertSingerId]
2022-07-04 22:34:23,488 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertSingerId
2022-07-04 22:34:23,489 DEBUG (PropertyBinder.java:266) - Building property concertSingerId
2022-07-04 22:34:23,490 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(concert_singer_id)]), concertSingerId, identity, , ...)
2022-07-04 22:34:23,491 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concert_id', referencedColumn='', mappedBy=''}
2022-07-04 22:34:23,493 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=concert, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,495 DEBUG (PropertyBinder.java:266) - Building property concert
2022-07-04 22:34:23,496 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=concert_id, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,497 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertId with lazy=false
2022-07-04 22:34:23,497 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.ConcertSinger:concertId]
2022-07-04 22:34:23,498 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertId
2022-07-04 22:34:23,498 DEBUG (PropertyBinder.java:266) - Building property concertId
2022-07-04 22:34:23,499 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='singer_id', referencedColumn='', mappedBy=''}
2022-07-04 22:34:23,500 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=singer, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,501 DEBUG (PropertyBinder.java:266) - Building property singer
2022-07-04 22:34:23,502 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=singer_id, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,504 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property singerId with lazy=false
2022-07-04 22:34:23,505 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.ConcertSinger:singerId]
2022-07-04 22:34:23,509 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for singerId
2022-07-04 22:34:23,510 DEBUG (PropertyBinder.java:266) - Building property singerId
2022-07-04 22:34:23,511 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.Singer
2022-07-04 22:34:23,512 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 22:34:23,512 DEBUG (EntityBinder.java:430) - Import with entity name Singer
2022-07-04 22:34:23,513 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.Singer on table Singer
2022-07-04 22:34:23,521 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=singer_id, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,523 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property singerId with lazy=false
2022-07-04 22:34:23,523 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Singer:singerId]
2022-07-04 22:34:23,524 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for singerId
2022-07-04 22:34:23,525 DEBUG (PropertyBinder.java:266) - Building property singerId
2022-07-04 22:34:23,526 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(singer_id)]), singerId, identity, , ...)
2022-07-04 22:34:23,526 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='singer'}
2022-07-04 22:34:23,527 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=concertSinger, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,528 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=null, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,529 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=element, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,530 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=concertSinger_KEY, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,530 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concertSinger_KEY', referencedColumn='null', mappedBy='null'}
2022-07-04 22:34:23,531 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='singer'}
2022-07-04 22:34:23,532 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='singer'}
2022-07-04 22:34:23,533 DEBUG (CollectionBinder.java:449) - Collection role: concert.model.entity.Singer.concertSinger
2022-07-04 22:34:23,533 DEBUG (PropertyBinder.java:266) - Building property concertSinger
2022-07-04 22:34:23,534 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=detail, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,539 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property detail with lazy=false
2022-07-04 22:34:23,539 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Singer:detail]
2022-07-04 22:34:23,540 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for detail
2022-07-04 22:34:23,541 DEBUG (PropertyBinder.java:266) - Building property detail
2022-07-04 22:34:23,544 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=singer_name, insertable=true, updatable=true, unique=false}
2022-07-04 22:34:23,544 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property singerName with lazy=false
2022-07-04 22:34:23,546 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Singer:singerName]
2022-07-04 22:34:23,547 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for singerName
2022-07-04 22:34:23,548 DEBUG (PropertyBinder.java:266) - Building property singerName
2022-07-04 22:34:23,555 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertId
2022-07-04 22:34:23,556 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertName
2022-07-04 22:34:23,557 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for contents
2022-07-04 22:34:23,558 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for date
2022-07-04 22:34:23,559 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for location
2022-07-04 22:34:23,559 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for maxSeats
2022-07-04 22:34:23,560 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for orderId
2022-07-04 22:34:23,560 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for amount
2022-07-04 22:34:23,561 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concert_id
2022-07-04 22:34:23,561 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for customerEmail
2022-07-04 22:34:23,562 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for customerName
2022-07-04 22:34:23,562 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertSingerId
2022-07-04 22:34:23,563 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertId
2022-07-04 22:34:23,564 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for singerId
2022-07-04 22:34:23,564 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for singerId
2022-07-04 22:34:23,564 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for detail
2022-07-04 22:34:23,566 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for singerName
2022-07-04 22:34:23,588 DEBUG (PrimaryKey.java:35) - Forcing column [concert_id] to be non-null as it is part of the primary key for table [concert]
2022-07-04 22:34:23,589 DEBUG (PrimaryKey.java:35) - Forcing column [order_id] to be non-null as it is part of the primary key for table [orders]
2022-07-04 22:34:23,591 DEBUG (PrimaryKey.java:35) - Forcing column [concert_singer_id] to be non-null as it is part of the primary key for table [concert_singer]
2022-07-04 22:34:23,592 DEBUG (PrimaryKey.java:35) - Forcing column [singer_id] to be non-null as it is part of the primary key for table [singer]
2022-07-04 22:34:23,593 DEBUG (CollectionSecondPass.java:51) - Second pass for collection: concert.model.entity.Concert.concertSinger
2022-07-04 22:34:23,598 DEBUG (CollectionBinder.java:898) - Binding a OneToMany: concert.model.entity.Concert.concertSinger through a foreign key
2022-07-04 22:34:23,602 DEBUG (CollectionBinder.java:936) - Mapping collection: concert.model.entity.Concert.concertSinger -> concert_singer
2022-07-04 22:34:23,620 DEBUG (TableBinder.java:565) - Retrieving property concert.model.entity.ConcertSinger.concert
2022-07-04 22:34:23,624 DEBUG (CollectionSecondPass.java:68) - Mapped collection key: concert_id, one-to-many: concert.model.entity.ConcertSinger
2022-07-04 22:34:23,625 DEBUG (CollectionSecondPass.java:51) - Second pass for collection: concert.model.entity.Concert.order
2022-07-04 22:34:23,626 DEBUG (CollectionBinder.java:898) - Binding a OneToMany: concert.model.entity.Concert.order through a foreign key
2022-07-04 22:34:23,627 DEBUG (CollectionBinder.java:936) - Mapping collection: concert.model.entity.Concert.order -> Orders
2022-07-04 22:34:23,628 DEBUG (TableBinder.java:565) - Retrieving property concert.model.entity.Orders.concert
2022-07-04 22:34:23,629 DEBUG (CollectionSecondPass.java:68) - Mapped collection key: concert_id, one-to-many: concert.model.entity.Orders
2022-07-04 22:34:23,630 DEBUG (CollectionSecondPass.java:51) - Second pass for collection: concert.model.entity.Singer.concertSinger
2022-07-04 22:34:23,631 DEBUG (CollectionBinder.java:898) - Binding a OneToMany: concert.model.entity.Singer.concertSinger through a foreign key
2022-07-04 22:34:23,631 DEBUG (CollectionBinder.java:936) - Mapping collection: concert.model.entity.Singer.concertSinger -> concert_singer
2022-07-04 22:34:23,632 DEBUG (TableBinder.java:565) - Retrieving property concert.model.entity.ConcertSinger.singer
2022-07-04 22:34:23,633 DEBUG (CollectionSecondPass.java:68) - Mapped collection key: singer_id, one-to-many: concert.model.entity.ConcertSinger
2022-07-04 22:34:23,634 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 22:34:23,642 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Singer
2022-07-04 22:34:23,643 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 22:34:23,651 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 22:34:23,652 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Singer
2022-07-04 22:34:23,653 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 22:34:23,795 DEBUG (SessionFactoryImpl.java:196) - Building session factory
2022-07-04 22:34:23,811 DEBUG (Settings.java:70) - SessionFactory name : null
2022-07-04 22:34:23,812 DEBUG (Settings.java:71) - Automatic flush during beforeCompletion(): enabled
2022-07-04 22:34:23,813 DEBUG (Settings.java:72) - Automatic session close at end of transaction: disabled
2022-07-04 22:34:23,813 DEBUG (Settings.java:74) - Statistics: disabled
2022-07-04 22:34:23,814 DEBUG (Settings.java:76) - Deleted entity synthetic identifier rollback: disabled
2022-07-04 22:34:23,814 DEBUG (Settings.java:77) - Default entity-mode: pojo
2022-07-04 22:34:23,814 DEBUG (Settings.java:78) - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2022-07-04 22:34:23,814 DEBUG (Settings.java:79) - Allow initialization of lazy state outside session : disabled
2022-07-04 22:34:23,816 DEBUG (Settings.java:81) - Using BatchFetchStyle : LEGACY
2022-07-04 22:34:23,816 DEBUG (Settings.java:82) - Default batch fetch size: -1
2022-07-04 22:34:23,819 DEBUG (Settings.java:83) - Maximum outer join fetch depth: 2
2022-07-04 22:34:23,819 DEBUG (Settings.java:84) - Default null ordering: NONE
2022-07-04 22:34:23,820 DEBUG (Settings.java:85) - Order SQL updates by primary key: disabled
2022-07-04 22:34:23,822 DEBUG (Settings.java:86) - Order SQL inserts for batching: disabled
2022-07-04 22:34:23,823 DEBUG (Settings.java:88) - multi-tenancy strategy : NONE
2022-07-04 22:34:23,824 DEBUG (Settings.java:90) - JTA Track by Thread: enabled
2022-07-04 22:34:23,825 DEBUG (Settings.java:92) - Query language substitutions: {}
2022-07-04 22:34:23,826 DEBUG (Settings.java:93) - Named query checking : enabled
2022-07-04 22:34:23,826 DEBUG (Settings.java:95) - Second-level cache: disabled
2022-07-04 22:34:23,827 DEBUG (Settings.java:96) - Second-level query cache: disabled
2022-07-04 22:34:23,827 DEBUG (Settings.java:97) - Second-level query cache factory: null
2022-07-04 22:34:23,828 DEBUG (Settings.java:98) - Second-level cache region prefix: null
2022-07-04 22:34:23,828 DEBUG (Settings.java:99) - Optimize second-level cache for minimal puts: disabled
2022-07-04 22:34:23,829 DEBUG (Settings.java:100) - Structured second-level cache entries: disabled
2022-07-04 22:34:23,829 DEBUG (Settings.java:101) - Second-level cache direct-reference entries: disabled
2022-07-04 22:34:23,829 DEBUG (Settings.java:102) - Automatic eviction of collection cache: disabled
2022-07-04 22:34:23,830 DEBUG (Settings.java:104) - JDBC batch size: 15
2022-07-04 22:34:23,831 DEBUG (Settings.java:105) - JDBC batch updates for versioned data: enabled
2022-07-04 22:34:23,831 DEBUG (Settings.java:106) - Scrollable result sets: enabled
2022-07-04 22:34:23,832 DEBUG (Settings.java:107) - Wrap result sets: disabled
2022-07-04 22:34:23,833 DEBUG (Settings.java:108) - JDBC3 getGeneratedKeys(): enabled
2022-07-04 22:34:23,833 DEBUG (Settings.java:109) - JDBC result set fetch size: null
2022-07-04 22:34:23,834 DEBUG (Settings.java:110) - Connection release mode: AFTER_TRANSACTION
2022-07-04 22:34:23,834 DEBUG (Settings.java:111) - Generate SQL with comments: disabled
2022-07-04 22:34:23,834 DEBUG (Settings.java:113) - JPA compliance - query : 
2022-07-04 22:34:23,835 DEBUG (Settings.java:114) - JPA compliance - closed-handling : 
2022-07-04 22:34:23,836 DEBUG (Settings.java:115) - JPA compliance - lists : 
2022-07-04 22:34:23,836 DEBUG (Settings.java:116) - JPA compliance - transactions : 
2022-07-04 22:34:24,213 DEBUG (SessionFactoryImpl.java:251) - Session factory constructed with filter configurations : {}
2022-07-04 22:34:24,214 DEBUG (SessionFactoryImpl.java:252) - Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, hibernate.format_sql=true, java.specification.version=11, sun.cpu.isalist=amd64, sun.jnu.encoding=MS949, hibernate.dialect=org.hibernate.dialect.MySQL8Dialect, java.class.path=C:\Users\신동혁\playdata\20220509_lab\03.web\concertProject\concert\target\classes;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\annotations-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-ant.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-ha.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-ssi.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-storeconfig.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-tribes.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\ecj-4.20.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\el-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jasper-el.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jasper.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jaspic-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jsp-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\servlet-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-coyote.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-dbcp.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-cs.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-de.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-es.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-fr.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-ja.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-ko.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-pt-BR.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-ru.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-zh-CN.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-jdbc.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-jni.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-util-scan.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-util.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-websocket.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\websocket-api.jar;C:\Users\신동혁\.m2\repository\javax\persistence\javax.persistence-api\2.2\javax.persistence-api-2.2.jar;C:\Users\신동혁\.m2\repository\org\hibernate\hibernate-entitymanager\5.4.2.Final\hibernate-entitymanager-5.4.2.Final.jar;C:\Users\신동혁\.m2\repository\org\jboss\logging\jboss-logging\3.3.2.Final\jboss-logging-3.3.2.Final.jar;C:\Users\신동혁\.m2\repository\org\hibernate\hibernate-core\5.4.2.Final\hibernate-core-5.4.2.Final.jar;C:\Users\신동혁\.m2\repository\org\javassist\javassist\3.24.0-GA\javassist-3.24.0-GA.jar;C:\Users\신동혁\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\신동혁\.m2\repository\org\jboss\jandex\2.0.5.Final\jandex-2.0.5.Final.jar;C:\Users\신동혁\.m2\repository\com\fasterxml\classmate\1.3.4\classmate-1.3.4.jar;C:\Users\신동혁\.m2\repository\javax\activation\javax.activation-api\1.2.0\javax.activation-api-1.2.0.jar;C:\Users\신동혁\.m2\repository\javax\xml\bind\jaxb-api\2.3.1\jaxb-api-2.3.1.jar;C:\Users\신동혁\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.1\jaxb-runtime-2.3.1.jar;C:\Users\신동혁\.m2\repository\org\glassfish\jaxb\txw2\2.3.1\txw2-2.3.1.jar;C:\Users\신동혁\.m2\repository\com\sun\istack\istack-commons-runtime\3.0.7\istack-commons-runtime-3.0.7.jar;C:\Users\신동혁\.m2\repository\org\jvnet\staxex\stax-ex\1.8\stax-ex-1.8.jar;C:\Users\신동혁\.m2\repository\com\sun\xml\fastinfoset\FastInfoset\1.2.15\FastInfoset-1.2.15.jar;C:\Users\신동혁\.m2\repository\org\dom4j\dom4j\2.1.1\dom4j-2.1.1.jar;C:\Users\신동혁\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.1.0.Final\hibernate-commons-annotations-5.1.0.Final.jar;C:\Users\신동혁\.m2\repository\net\bytebuddy\byte-buddy\1.9.10\byte-buddy-1.9.10.jar;C:\Users\신동혁\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.1.1.Final\jboss-transaction-api_1.2_spec-1.1.1.Final.jar;C:\Users\신동혁\.m2\repository\junit\junit\4.13.2\junit-4.13.2.jar;C:\Users\신동혁\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\신동혁\.m2\repository\org\projectlombok\lombok\1.18.24\lombok-1.18.24.jar;C:\Users\신동혁\.m2\repository\com\jslsolucoes\ojdbc6\11.2.0.1.0\ojdbc6-11.2.0.1.0.jar;C:\Users\신동혁\.m2\repository\mysql\mysql-connector-java\8.0.29\mysql-connector-java-8.0.29.jar;C:\Users\신동혁\.m2\repository\com\google\protobuf\protobuf-java\3.19.4\protobuf-java-3.19.4.jar;C:\Users\신동혁\.m2\repository\org\slf4j\slf4j-api\1.7.5\slf4j-api-1.7.5.jar;C:\Users\신동혁\.m2\repository\org\slf4j\slf4j-log4j12\1.7.5\slf4j-log4j12-1.7.5.jar;C:\Users\신동혁\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\신동혁\.m2\repository\org\modelmapper\modelmapper\2.4.0\modelmapper-2.4.0.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Asia/Seoul, javax.persistence.jdbc.url=jdbc:mysql://localhost/playdata?characterEncoding=UTF-8, javax.persistence.jdbc.user=****, os.name=Windows 10, java.vm.specification.version=11, sun.java.launcher=SUN_STANDARD, user.country=KR, sun.boot.library.path=C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11\bin, sun.java.command=cocert.model.dao.Test, jdk.debug=release, sun.cpu.endian=little, user.home=C:\Users\신동혁, user.language=ko, java.specification.vendor=Oracle Corporation, java.version.date=2018-09-25, java.home=C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11, file.separator=\, java.vm.compressedOopsMode=32-bit, line.separator=
, java.specification.name=Java Platform API Specification, java.vm.specification.vendor=Oracle Corporation, hibernate.transaction.coordinator_class=class org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, javax.persistence.jdbc.driver=com.mysql.cj.jdbc.Driver, hibernate.hbm2ddl.auto=none, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=11+28, user.name=Shin, path.separator=;, hibernate.connection.username=****, os.version=10.0, java.runtime.name=OpenJDK Runtime Environment, hibernate.connection.url=jdbc:mysql://localhost/playdata?characterEncoding=UTF-8, file.encoding=UTF-8, hibernate.ejb.persistenceUnitName=dbinfo, java.vm.name=OpenJDK 64-Bit Server VM, hibernate.show_sql=true, java.vendor.version=18.9, hibernate.connection.driver_class=com.mysql.cj.jdbc.Driver, java.vendor.url.bug=http://bugreport.java.com/bugreport/, java.io.tmpdir=C:\Users\신동혁\AppData\Local\Temp\, java.version=11, user.dir=C:\Users\신동혁\playdata\20220509_lab\03.web\concertProject\concert, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.password=****, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@2c58dcb1, java.library.path=C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Users/신동혁/playdata/20220509_lab/99.devEnv/eclipse//plugins/org.eclipse.justj.openjdk.hotspot.jre.full.win32.x86_64_16.0.1.v20210528-1205/jre/bin/server;C:/Users/신동혁/playdata/20220509_lab/99.devEnv/eclipse//plugins/org.eclipse.justj.openjdk.hotspot.jre.full.win32.x86_64_16.0.1.v20210528-1205/jre/bin;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11\bin;C:\oraclexe\app\oracle\product\11.2.0\server\bin;C:\Program Files\MySQL\MySQL Server 8.0\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\Bandizip\;C:\Program Files\Git\cmd;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\신동혁\AppData\Local\Programs\Python\Python39\Scripts\;C:\Users\신동혁\AppData\Local\Programs\Python\Python39\;C:\Users\신동혁\AppData\Local\Microsoft\WindowsApps;C:\Users\신동혁\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\eclipse;;., java.vendor=Oracle Corporation, java.vm.info=mixed mode, java.vm.version=11+28, hibernate.bytecode.use_reflection_optimizer=false, sun.io.unicode.encoding=UnicodeLittle, javax.persistence.jdbc.password=****, java.class.version=55.0}
2022-07-04 22:34:24,273 DEBUG (JaccIntegrator.java:80) - Skipping JACC integration as it was not enabled
2022-07-04 22:34:24,277 DEBUG (SessionFactoryImpl.java:291) - Instantiated session factory
2022-07-04 22:34:24,278 DEBUG (TypeConfiguration.java:157) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@340b7ef6] to SessionFactoryImpl [org.hibernate.internal.SessionFactoryImpl@5fe7f967]
2022-07-04 22:34:24,543 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Concert] is safe
2022-07-04 22:34:24,545 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Concert
2022-07-04 22:34:24,628 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Concert] is safe
2022-07-04 22:34:24,630 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Concert
2022-07-04 22:34:26,241 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Orders] is safe
2022-07-04 22:34:26,242 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Orders
2022-07-04 22:34:26,244 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Orders] is safe
2022-07-04 22:34:26,245 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Orders
2022-07-04 22:34:26,395 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.ConcertSinger] is safe
2022-07-04 22:34:26,396 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.ConcertSinger
2022-07-04 22:34:26,412 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.ConcertSinger] is safe
2022-07-04 22:34:26,413 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.ConcertSinger
2022-07-04 22:34:26,515 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Singer] is safe
2022-07-04 22:34:26,516 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Singer
2022-07-04 22:34:26,517 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Singer] is safe
2022-07-04 22:34:26,519 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Singer
2022-07-04 22:34:26,707 DEBUG (AbstractCollectionPersister.java:688) - Static SQL for collection: concert.model.entity.Singer.concertSinger
2022-07-04 22:34:26,708 DEBUG (AbstractCollectionPersister.java:690) -  Row insert: update concert_singer set singer_id=? where concert_singer_id=?
2022-07-04 22:34:26,709 DEBUG (AbstractCollectionPersister.java:693) -  Row update: update concert_singer set  where concert_singer_id=?
2022-07-04 22:34:26,710 DEBUG (AbstractCollectionPersister.java:696) -  Row delete: update concert_singer set singer_id=null where singer_id=? and concert_singer_id=?
2022-07-04 22:34:26,711 DEBUG (AbstractCollectionPersister.java:699) -  One-shot delete: update concert_singer set singer_id=null where singer_id=?
2022-07-04 22:34:26,714 DEBUG (AbstractCollectionPersister.java:688) - Static SQL for collection: concert.model.entity.Concert.order
2022-07-04 22:34:26,714 DEBUG (AbstractCollectionPersister.java:690) -  Row insert: update Orders set concert_id=? where order_id=?
2022-07-04 22:34:26,716 DEBUG (AbstractCollectionPersister.java:693) -  Row update: update Orders set  where order_id=?
2022-07-04 22:34:26,716 DEBUG (AbstractCollectionPersister.java:696) -  Row delete: update Orders set concert_id=null where concert_id=? and order_id=?
2022-07-04 22:34:26,717 DEBUG (AbstractCollectionPersister.java:699) -  One-shot delete: update Orders set concert_id=null where concert_id=?
2022-07-04 22:34:26,718 DEBUG (AbstractCollectionPersister.java:688) - Static SQL for collection: concert.model.entity.Concert.concertSinger
2022-07-04 22:34:26,719 DEBUG (AbstractCollectionPersister.java:690) -  Row insert: update concert_singer set concert_id=? where concert_singer_id=?
2022-07-04 22:34:26,720 DEBUG (AbstractCollectionPersister.java:693) -  Row update: update concert_singer set  where concert_singer_id=?
2022-07-04 22:34:26,722 DEBUG (AbstractCollectionPersister.java:696) -  Row delete: update concert_singer set concert_id=null where concert_id=? and concert_singer_id=?
2022-07-04 22:34:26,723 DEBUG (AbstractCollectionPersister.java:699) -  One-shot delete: update concert_singer set concert_id=null where concert_id=?
2022-07-04 22:34:26,775 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.Concert
2022-07-04 22:34:26,776 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select concert_id from Concert where concert_id =?
2022-07-04 22:34:26,777 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select concert_.concert_id, concert_.concert_name as concert_2_0_, concert_.contents as contents3_0_, concert_.date as date4_0_, concert_.location as location5_0_, concert_.max_seats as max_seat6_0_ from Concert concert_ where concert_.concert_id=?
2022-07-04 22:34:26,777 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Concert (concert_name, contents, date, location, max_seats, concert_id) values (?, ?, ?, ?, ?, ?)
2022-07-04 22:34:26,777 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Concert set concert_name=?, contents=?, date=?, location=?, max_seats=? where concert_id=?
2022-07-04 22:34:26,778 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Concert where concert_id=?
2022-07-04 22:34:26,778 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into Concert (concert_name, contents, date, location, max_seats) values (?, ?, ?, ?, ?)
2022-07-04 22:34:26,923 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4e642ee1]
2022-07-04 22:34:26,929 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertName
2022-07-04 22:34:26,930 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 22:34:26,963 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@751ae8a4]
2022-07-04 22:34:26,980 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7e307087]
2022-07-04 22:34:26,989 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : contents
2022-07-04 22:34:26,992 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : date
2022-07-04 22:34:26,993 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : location
2022-07-04 22:34:26,998 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : maxSeats
2022-07-04 22:34:27,016 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : order
2022-07-04 22:34:27,018 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@4bcaa195]
2022-07-04 22:34:27,019 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@d08edc5]
2022-07-04 22:34:27,020 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 22:34:27,082 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 22:34:27,113 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Concert)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:0>, path=concert.model.entity.Concert)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Concert.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Concert.concertSinger.<elements>)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.order, querySpaceUid=<gen:3>, path=concert.model.entity.Concert.order)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.Orders, querySpaceUid=<gen:4>, path=concert.model.entity.Concert.order.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Concert)
          - SQL table alias mapping - concert0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_0_0_}

2022-07-04 22:34:27,122 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Concert [NONE]: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 22:34:27,124 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7c2924d7]
2022-07-04 22:34:27,124 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertName
2022-07-04 22:34:27,126 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 22:34:27,126 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6587305a]
2022-07-04 22:34:27,128 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@abbe000]
2022-07-04 22:34:27,132 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : contents
2022-07-04 22:34:27,133 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : date
2022-07-04 22:34:27,134 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : location
2022-07-04 22:34:27,134 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : maxSeats
2022-07-04 22:34:27,135 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : order
2022-07-04 22:34:27,136 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@3f81621c]
2022-07-04 22:34:27,137 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5b9499fe]
2022-07-04 22:34:27,139 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 22:34:27,141 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 22:34:27,145 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Concert)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:0>, path=concert.model.entity.Concert)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Concert.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Concert.concertSinger.<elements>)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.order, querySpaceUid=<gen:3>, path=concert.model.entity.Concert.order)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.Orders, querySpaceUid=<gen:4>, path=concert.model.entity.Concert.order.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Concert)
          - SQL table alias mapping - concert0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_0_0_}

2022-07-04 22:34:27,146 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Concert [READ]: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 22:34:27,210 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.Concert: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 22:34:27,211 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.Concert: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 22:34:27,214 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.Orders
2022-07-04 22:34:27,215 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select order_id from Orders where order_id =?
2022-07-04 22:34:27,215 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select orders_.order_id, orders_.amount as amount2_2_, orders_.concert_id as concert_3_2_, orders_.customer_email as customer4_2_, orders_.customer_name as customer5_2_ from Orders orders_ where orders_.order_id=?
2022-07-04 22:34:27,216 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Orders (amount, concert_id, customer_email, customer_name, order_id) values (?, ?, ?, ?, ?)
2022-07-04 22:34:27,216 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Orders set amount=?, concert_id=?, customer_email=?, customer_name=? where order_id=?
2022-07-04 22:34:27,217 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Orders where order_id=?
2022-07-04 22:34:27,217 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into Orders (amount, concert_id, customer_email, customer_name) values (?, ?, ?, ?)
2022-07-04 22:34:27,218 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@38cedb7d]
2022-07-04 22:34:27,219 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : amount
2022-07-04 22:34:27,219 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 22:34:27,220 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2acdcce8]
2022-07-04 22:34:27,224 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert_id
2022-07-04 22:34:27,225 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerEmail
2022-07-04 22:34:27,225 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerName
2022-07-04 22:34:27,225 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 22:34:27,228 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 22:34:27,229 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Orders)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Orders, querySpaceUid=<gen:0>, path=concert.model.entity.Orders)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.Orders.concert)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {order_id1_2_0_}

2022-07-04 22:34:27,230 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Orders [NONE]: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 22:34:27,233 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@d5bb1c4]
2022-07-04 22:34:27,235 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : amount
2022-07-04 22:34:27,237 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 22:34:27,239 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@465b38e6]
2022-07-04 22:34:27,240 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert_id
2022-07-04 22:34:27,241 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerEmail
2022-07-04 22:34:27,243 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerName
2022-07-04 22:34:27,244 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 22:34:27,246 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 22:34:27,248 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Orders)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Orders, querySpaceUid=<gen:0>, path=concert.model.entity.Orders)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.Orders.concert)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {order_id1_2_0_}

2022-07-04 22:34:27,250 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Orders [READ]: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 22:34:27,252 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.Orders: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 22:34:27,254 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.Orders: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 22:34:27,256 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.ConcertSinger
2022-07-04 22:34:27,257 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select concert_singer_id from concert_singer where concert_singer_id =?
2022-07-04 22:34:27,260 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select concertsin_.concert_singer_id, concertsin_.concert_id as concert_2_1_, concertsin_.singer_id as singer_i3_1_ from concert_singer concertsin_ where concertsin_.concert_singer_id=?
2022-07-04 22:34:27,263 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into concert_singer (concert_id, singer_id, concert_singer_id) values (?, ?, ?)
2022-07-04 22:34:27,263 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update concert_singer set concert_id=?, singer_id=? where concert_singer_id=?
2022-07-04 22:34:27,264 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from concert_singer where concert_singer_id=?
2022-07-04 22:34:27,264 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into concert_singer (concert_id, singer_id) values (?, ?)
2022-07-04 22:34:27,266 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4b960b5b]
2022-07-04 22:34:27,267 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 22:34:27,269 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7bd96822]
2022-07-04 22:34:27,269 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 22:34:27,270 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 22:34:27,271 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@64dae3b7]
2022-07-04 22:34:27,272 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 22:34:27,275 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 22:34:27,276 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 22:34:27,277 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.ConcertSinger)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:0>, path=concert.model.entity.ConcertSinger)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.ConcertSinger.concert)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:2>, path=concert.model.entity.ConcertSinger.singer)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.ConcertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_1_0_}

2022-07-04 22:34:27,278 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.ConcertSinger [NONE]: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 22:34:27,280 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1fedf0a4]
2022-07-04 22:34:27,281 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 22:34:27,283 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2ee48610]
2022-07-04 22:34:27,285 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 22:34:27,286 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 22:34:27,287 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1d901f20]
2022-07-04 22:34:27,288 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 22:34:27,288 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 22:34:27,290 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 22:34:27,291 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.ConcertSinger)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:0>, path=concert.model.entity.ConcertSinger)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.ConcertSinger.concert)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:2>, path=concert.model.entity.ConcertSinger.singer)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.ConcertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_1_0_}

2022-07-04 22:34:27,292 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.ConcertSinger [READ]: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 22:34:27,294 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.ConcertSinger: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 22:34:27,295 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.ConcertSinger: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 22:34:27,296 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.Singer
2022-07-04 22:34:27,297 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select singer_id from Singer where singer_id =?
2022-07-04 22:34:27,297 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select singer_.singer_id, singer_.detail as detail2_3_, singer_.singer_name as singer_n3_3_ from Singer singer_ where singer_.singer_id=?
2022-07-04 22:34:27,298 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Singer (detail, singer_name, singer_id) values (?, ?, ?)
2022-07-04 22:34:27,298 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Singer set detail=?, singer_name=? where singer_id=?
2022-07-04 22:34:27,298 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Singer where singer_id=?
2022-07-04 22:34:27,298 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into Singer (detail, singer_name) values (?, ?)
2022-07-04 22:34:27,299 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6d08b4e6]
2022-07-04 22:34:27,300 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 22:34:27,301 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1acb74ad]
2022-07-04 22:34:27,302 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7bf01cb]
2022-07-04 22:34:27,303 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : detail
2022-07-04 22:34:27,303 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerName
2022-07-04 22:34:27,304 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 22:34:27,305 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 22:34:27,306 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Singer)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:0>, path=concert.model.entity.Singer)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Singer.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Singer.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Singer.concertSinger.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Singer)
          - SQL table alias mapping - singer0_
          - alias suffix - 0_
          - suffixed key columns - {singer_i1_3_0_}

2022-07-04 22:34:27,307 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Singer [NONE]: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 22:34:27,308 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2f382a5e]
2022-07-04 22:34:27,308 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 22:34:27,309 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@539a138b]
2022-07-04 22:34:27,310 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2cd4e16a]
2022-07-04 22:34:27,311 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : detail
2022-07-04 22:34:27,312 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerName
2022-07-04 22:34:27,312 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 22:34:27,313 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 22:34:27,314 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Singer)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:0>, path=concert.model.entity.Singer)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Singer.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Singer.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Singer.concertSinger.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Singer)
          - SQL table alias mapping - singer0_
          - alias suffix - 0_
          - suffixed key columns - {singer_i1_3_0_}

2022-07-04 22:34:27,315 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Singer [READ]: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 22:34:27,317 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.Singer: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 22:34:27,318 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.Singer: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 22:34:27,335 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@7affc159]
2022-07-04 22:34:27,336 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1682c08c]
2022-07-04 22:34:27,345 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 22:34:27,346 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2f14b0f6]
2022-07-04 22:34:27,346 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 22:34:27,347 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 22:34:27,348 DEBUG (MetamodelGraphWalker.java:154) - Property path deemed to be circular : singer
2022-07-04 22:34:27,349 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 22:34:27,351 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 22:34:27,365 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 22:34:27,368 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(collection=concert.model.entity.Singer.concertSinger)
    - Returns
       - CollectionReturnImpl(collection=concert.model.entity.Singer.concertSinger, querySpaceUid=<gen:0>, path=[concert.model.entity.Singer.concertSinger])
          - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:1>, path=[concert.model.entity.Singer.concertSinger].<elements>)
             - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:2>, path=[concert.model.entity.Singer.concertSinger].<elements>.concert)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=concert.model.entity.Singer.concertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {singer_i3_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - concert_1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=concert.model.entity.ConcertSinger)
                - SQL table alias mapping - concertsin0_
                - alias suffix - 1_
                - suffixed key columns - {concert_1_1_1_}

2022-07-04 22:34:27,372 DEBUG (CollectionLoader.java:83) - Static select for collection concert.model.entity.Singer.concertSinger: select concertsin0_.singer_id as singer_i3_1_0_, concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_singer_id as concert_1_1_1_, concertsin0_.concert_id as concert_2_1_1_, concertsin0_.singer_id as singer_i3_1_1_ from concert_singer concertsin0_ where concertsin0_.singer_id=?
2022-07-04 22:34:27,373 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@273a5a8a]
2022-07-04 22:34:27,374 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1823b9c4]
2022-07-04 22:34:27,375 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : amount
2022-07-04 22:34:27,375 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 22:34:27,376 DEBUG (MetamodelGraphWalker.java:154) - Property path deemed to be circular : concert
2022-07-04 22:34:27,377 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert_id
2022-07-04 22:34:27,377 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerEmail
2022-07-04 22:34:27,377 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerName
2022-07-04 22:34:27,378 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 22:34:27,379 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 22:34:27,380 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(collection=concert.model.entity.Concert.order)
    - Returns
       - CollectionReturnImpl(collection=concert.model.entity.Concert.order, querySpaceUid=<gen:0>, path=[concert.model.entity.Concert.order])
          - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.Orders, querySpaceUid=<gen:1>, path=[concert.model.entity.Concert.order].<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=concert.model.entity.Concert.order)
          - SQL table alias mapping - order0_
          - alias suffix - 0_
          - suffixed key columns - {concert_3_2_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - order_id1_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=concert.model.entity.Orders)
                - SQL table alias mapping - order0_
                - alias suffix - 1_
                - suffixed key columns - {order_id1_2_1_}

2022-07-04 22:34:27,381 DEBUG (CollectionLoader.java:83) - Static select for collection concert.model.entity.Concert.order: select order0_.concert_id as concert_3_2_0_, order0_.order_id as order_id1_2_0_, order0_.order_id as order_id1_2_1_, order0_.amount as amount2_2_1_, order0_.concert_id as concert_3_2_1_, order0_.customer_email as customer4_2_1_, order0_.customer_name as customer5_2_1_ from Orders order0_ where order0_.concert_id=?
2022-07-04 22:34:27,382 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@adcfad9]
2022-07-04 22:34:27,383 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@fb49fdf]
2022-07-04 22:34:27,384 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 22:34:27,384 DEBUG (MetamodelGraphWalker.java:154) - Property path deemed to be circular : concert
2022-07-04 22:34:27,387 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 22:34:27,387 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 22:34:27,388 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@10c47c79]
2022-07-04 22:34:27,389 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 22:34:27,390 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 22:34:27,392 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 22:34:27,394 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(collection=concert.model.entity.Concert.concertSinger)
    - Returns
       - CollectionReturnImpl(collection=concert.model.entity.Concert.concertSinger, querySpaceUid=<gen:0>, path=[concert.model.entity.Concert.concertSinger])
          - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:1>, path=[concert.model.entity.Concert.concertSinger].<elements>)
             - EntityAttributeFetchImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:2>, path=[concert.model.entity.Concert.concertSinger].<elements>.singer)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=concert.model.entity.Concert.concertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {concert_2_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - concert_1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=concert.model.entity.ConcertSinger)
                - SQL table alias mapping - concertsin0_
                - alias suffix - 1_
                - suffixed key columns - {concert_1_1_1_}

2022-07-04 22:34:27,395 DEBUG (CollectionLoader.java:83) - Static select for collection concert.model.entity.Concert.concertSinger: select concertsin0_.concert_id as concert_2_1_0_, concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_singer_id as concert_1_1_1_, concertsin0_.concert_id as concert_2_1_1_, concertsin0_.singer_id as singer_i3_1_1_ from concert_singer concertsin0_ where concertsin0_.concert_id=?
2022-07-04 22:34:27,574 DEBUG (SchemaManagementToolCoordinator.java:57) - No actions specified; doing nothing
2022-07-04 22:34:27,575 DEBUG (JtaPlatformInitiator.java:43) - No JtaPlatform was specified, checking resolver
2022-07-04 22:34:27,577 DEBUG (JtaPlatformResolverInitiator.java:33) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2022-07-04 22:34:27,609 DEBUG (StandardJtaPlatformResolver.java:137) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2022-07-04 22:34:27,610  INFO (JtaPlatformInitiator.java:52) - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2022-07-04 22:34:27,617 DEBUG (NamedQueryRepository.java:151) - Checking 0 named HQL queries
2022-07-04 22:34:27,619 DEBUG (NamedQueryRepository.java:167) - Checking 0 named SQL queries
2022-07-04 22:34:27,624 DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@787508ca
2022-07-04 22:34:27,630 DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: 98d24a71-8e73-4ec3-b801-6aa8c55e1b25 (<unnamed>)
2022-07-04 22:34:27,631 DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2022-07-04 22:34:27,946 DEBUG (StatisticsInitiator.java:101) - Statistics initialized [enabled=false]
2022-07-04 22:34:27,998 DEBUG (TransactionImpl.java:56) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2022-07-04 22:34:27,999 DEBUG (TransactionImpl.java:84) - begin
2022-07-04 22:34:28,052 DEBUG (SqlStatementLogger.java:94) - 
    select
        concert0_.concert_id as concert_1_0_0_,
        concert0_.concert_name as concert_2_0_0_,
        concert0_.contents as contents3_0_0_,
        concert0_.date as date4_0_0_,
        concert0_.location as location5_0_0_,
        concert0_.max_seats as max_seat6_0_0_ 
    from
        Concert concert0_ 
    where
        concert0_.concert_id=?
2022-07-04 22:34:28,125 DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2022-07-04 22:34:28,129 DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2022-07-04 22:34:28,170 DEBUG (TwoPhaseLoad.java:145) - Resolving associations for [concert.model.entity.Concert#1]
2022-07-04 22:34:28,222 DEBUG (TwoPhaseLoad.java:288) - Done materializing entity [concert.model.entity.Concert#1]
2022-07-04 22:34:28,224 DEBUG (ResourceRegistryStandardImpl.java:87) - HHH000387: ResultSet's statement was not registered
2022-07-04 22:34:28,225 DEBUG (AbstractLoadPlanBasedEntityLoader.java:219) - Done entity load : concert.model.entity.Concert#1
2022-07-04 23:12:43,399 DEBUG (HibernatePersistenceProvider.java:38) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2022-07-04 23:12:44,139 DEBUG (HibernatePersistenceProvider.java:88) - Located and parsed 1 persistence units; checking each
2022-07-04 23:12:44,149 DEBUG (HibernatePersistenceProvider.java:96) - Checking persistence-unit [name=dbinfo, explicit-provider=null] against incoming persistence unit name [dbinfo]
2022-07-04 23:12:44,152 DEBUG (ProviderChecker.java:95) - No PersistenceProvider explicitly requested, assuming Hibernate
2022-07-04 23:12:44,183 DEBUG (LogHelper.java:102) - PersistenceUnitInfo [
	name: dbinfo
	persistence provider classname: null
	classloader: null
	excludeUnlistedClasses: false
	JTA datasource: null
	Non JTA datasource: null
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/%ec%8b%a0%eb%8f%99%ed%98%81/playdata/20220509_lab/03.web/concertProject/concert/target/classes
	Shared Cache Mode: null
	Validation Mode: null
	Jar files URLs []
	Managed classes names [
		concert.model.entity.Concert
		concert.model.entity.ConcertSinger
		concert.model.entity.Orders
		concert.model.entity.Singer]
	Mapping files names []
	Properties [
		javax.persistence.jdbc.driver: com.mysql.cj.jdbc.Driver
		javax.persistence.jdbc.password: playdata
		hibernate.dialect: org.hibernate.dialect.MySQL8Dialect
		javax.persistence.jdbc.url: jdbc:mysql://localhost/playdata?characterEncoding=UTF-8
		hibernate.show_sql: true
		hibernate.hbm2ddl.auto: none
		hibernate.format_sql: true
		javax.persistence.jdbc.user: root]
2022-07-04 23:12:44,210 DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2022-07-04 23:12:44,221 DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2022-07-04 23:12:44,248 DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2022-07-04 23:12:44,576  INFO (Version.java:46) - HHH000412: Hibernate Core {5.4.2.Final}
2022-07-04 23:12:44,585 DEBUG (Environment.java:199) - HHH000206: hibernate.properties not found
2022-07-04 23:12:45,288 DEBUG (ServiceBinding.java:68) - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
2022-07-04 23:12:45,388 DEBUG (RegionFactoryInitiator.java:118) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2022-07-04 23:12:45,395 DEBUG (RegionFactoryInitiator.java:49) - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2022-07-04 23:12:45,490  INFO (JavaReflectionManager.java:49) - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2022-07-04 23:12:47,101 DEBUG (BasicTypeRegistry.java:156) - Adding type registration boolean -> org.hibernate.type.BooleanType@19b93fa8
2022-07-04 23:12:47,102 DEBUG (BasicTypeRegistry.java:156) - Adding type registration boolean -> org.hibernate.type.BooleanType@19b93fa8
2022-07-04 23:12:47,112 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@19b93fa8
2022-07-04 23:12:47,114 DEBUG (BasicTypeRegistry.java:156) - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@8ad6665
2022-07-04 23:12:47,116 DEBUG (BasicTypeRegistry.java:156) - Adding type registration true_false -> org.hibernate.type.TrueFalseType@bcef303
2022-07-04 23:12:47,118 DEBUG (BasicTypeRegistry.java:156) - Adding type registration yes_no -> org.hibernate.type.YesNoType@4f9a2c08
2022-07-04 23:12:47,122 DEBUG (BasicTypeRegistry.java:156) - Adding type registration byte -> org.hibernate.type.ByteType@386f0da3
2022-07-04 23:12:47,123 DEBUG (BasicTypeRegistry.java:156) - Adding type registration byte -> org.hibernate.type.ByteType@386f0da3
2022-07-04 23:12:47,124 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@386f0da3
2022-07-04 23:12:47,128 DEBUG (BasicTypeRegistry.java:156) - Adding type registration character -> org.hibernate.type.CharacterType@344f4dea
2022-07-04 23:12:47,128 DEBUG (BasicTypeRegistry.java:156) - Adding type registration char -> org.hibernate.type.CharacterType@344f4dea
2022-07-04 23:12:47,129 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@344f4dea
2022-07-04 23:12:47,134 DEBUG (BasicTypeRegistry.java:156) - Adding type registration short -> org.hibernate.type.ShortType@6c0d9d86
2022-07-04 23:12:47,135 DEBUG (BasicTypeRegistry.java:156) - Adding type registration short -> org.hibernate.type.ShortType@6c0d9d86
2022-07-04 23:12:47,137 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@6c0d9d86
2022-07-04 23:12:47,142 DEBUG (BasicTypeRegistry.java:156) - Adding type registration integer -> org.hibernate.type.IntegerType@16ce702d
2022-07-04 23:12:47,143 DEBUG (BasicTypeRegistry.java:156) - Adding type registration int -> org.hibernate.type.IntegerType@16ce702d
2022-07-04 23:12:47,144 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@16ce702d
2022-07-04 23:12:47,148 DEBUG (BasicTypeRegistry.java:156) - Adding type registration long -> org.hibernate.type.LongType@2ea6e30c
2022-07-04 23:12:47,149 DEBUG (BasicTypeRegistry.java:156) - Adding type registration long -> org.hibernate.type.LongType@2ea6e30c
2022-07-04 23:12:47,150 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Long -> org.hibernate.type.LongType@2ea6e30c
2022-07-04 23:12:47,153 DEBUG (BasicTypeRegistry.java:156) - Adding type registration float -> org.hibernate.type.FloatType@531f4093
2022-07-04 23:12:47,154 DEBUG (BasicTypeRegistry.java:156) - Adding type registration float -> org.hibernate.type.FloatType@531f4093
2022-07-04 23:12:47,154 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@531f4093
2022-07-04 23:12:47,158 DEBUG (BasicTypeRegistry.java:156) - Adding type registration double -> org.hibernate.type.DoubleType@16fdec90
2022-07-04 23:12:47,158 DEBUG (BasicTypeRegistry.java:156) - Adding type registration double -> org.hibernate.type.DoubleType@16fdec90
2022-07-04 23:12:47,159 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@16fdec90
2022-07-04 23:12:47,165 DEBUG (BasicTypeRegistry.java:156) - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@6a55299e
2022-07-04 23:12:47,167 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@6a55299e
2022-07-04 23:12:47,173 DEBUG (BasicTypeRegistry.java:156) - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@5a18cd76
2022-07-04 23:12:47,174 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@5a18cd76
2022-07-04 23:12:47,177 DEBUG (BasicTypeRegistry.java:156) - Adding type registration string -> org.hibernate.type.StringType@77825085
2022-07-04 23:12:47,178 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.String -> org.hibernate.type.StringType@77825085
2022-07-04 23:12:47,180 DEBUG (BasicTypeRegistry.java:156) - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@5b1ebf56
2022-07-04 23:12:47,183 DEBUG (BasicTypeRegistry.java:156) - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@3549bca9
2022-07-04 23:12:47,194 DEBUG (BasicTypeRegistry.java:156) - Adding type registration url -> org.hibernate.type.UrlType@46dffdc3
2022-07-04 23:12:47,195 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.net.URL -> org.hibernate.type.UrlType@46dffdc3
2022-07-04 23:12:47,201 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Duration -> org.hibernate.type.DurationType@4748a0f9
2022-07-04 23:12:47,202 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@4748a0f9
2022-07-04 23:12:47,236 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Instant -> org.hibernate.type.InstantType@46944ca9
2022-07-04 23:12:47,237 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@46944ca9
2022-07-04 23:12:47,242 DEBUG (BasicTypeRegistry.java:156) - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@2a448449
2022-07-04 23:12:47,243 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@2a448449
2022-07-04 23:12:47,248 DEBUG (BasicTypeRegistry.java:156) - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@517566b
2022-07-04 23:12:47,249 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@517566b
2022-07-04 23:12:47,253 DEBUG (BasicTypeRegistry.java:156) - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@55322aab
2022-07-04 23:12:47,254 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@55322aab
2022-07-04 23:12:47,258 DEBUG (BasicTypeRegistry.java:156) - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@126945f9
2022-07-04 23:12:47,259 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@126945f9
2022-07-04 23:12:47,264 DEBUG (BasicTypeRegistry.java:156) - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@4879dfad
2022-07-04 23:12:47,265 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@4879dfad
2022-07-04 23:12:47,271 DEBUG (BasicTypeRegistry.java:156) - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@737a135b
2022-07-04 23:12:47,272 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@737a135b
2022-07-04 23:12:47,275 DEBUG (BasicTypeRegistry.java:156) - Adding type registration date -> org.hibernate.type.DateType@6127a7e
2022-07-04 23:12:47,276 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Date -> org.hibernate.type.DateType@6127a7e
2022-07-04 23:12:47,279 DEBUG (BasicTypeRegistry.java:156) - Adding type registration time -> org.hibernate.type.TimeType@7a1a3478
2022-07-04 23:12:47,280 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@7a1a3478
2022-07-04 23:12:47,285 DEBUG (BasicTypeRegistry.java:156) - Adding type registration timestamp -> org.hibernate.type.TimestampType@4b6690c0
2022-07-04 23:12:47,285 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@4b6690c0
2022-07-04 23:12:47,286 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@4b6690c0
2022-07-04 23:12:47,290 DEBUG (BasicTypeRegistry.java:156) - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@eda25e5
2022-07-04 23:12:47,294 DEBUG (BasicTypeRegistry.java:156) - Adding type registration calendar -> org.hibernate.type.CalendarType@35f26e72
2022-07-04 23:12:47,295 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@35f26e72
2022-07-04 23:12:47,296 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@35f26e72
2022-07-04 23:12:47,298 DEBUG (BasicTypeRegistry.java:156) - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@79351f41
2022-07-04 23:12:47,303 DEBUG (BasicTypeRegistry.java:156) - Adding type registration locale -> org.hibernate.type.LocaleType@1e0f9063
2022-07-04 23:12:47,303 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@1e0f9063
2022-07-04 23:12:47,307 DEBUG (BasicTypeRegistry.java:156) - Adding type registration currency -> org.hibernate.type.CurrencyType@3ed242a4
2022-07-04 23:12:47,308 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@3ed242a4
2022-07-04 23:12:47,310 DEBUG (BasicTypeRegistry.java:156) - Adding type registration timezone -> org.hibernate.type.TimeZoneType@13f95696
2022-07-04 23:12:47,310 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@13f95696
2022-07-04 23:12:47,313 DEBUG (BasicTypeRegistry.java:156) - Adding type registration class -> org.hibernate.type.ClassType@ebaa6cb
2022-07-04 23:12:47,313 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@ebaa6cb
2022-07-04 23:12:47,316 DEBUG (BasicTypeRegistry.java:156) - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@66fdec9
2022-07-04 23:12:47,317 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@66fdec9
2022-07-04 23:12:47,318 DEBUG (BasicTypeRegistry.java:156) - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@52851b44
2022-07-04 23:12:47,321 DEBUG (BasicTypeRegistry.java:156) - Adding type registration binary -> org.hibernate.type.BinaryType@5ef6ae06
2022-07-04 23:12:47,322 DEBUG (BasicTypeRegistry.java:156) - Adding type registration byte[] -> org.hibernate.type.BinaryType@5ef6ae06
2022-07-04 23:12:47,323 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [B -> org.hibernate.type.BinaryType@5ef6ae06
2022-07-04 23:12:47,329 DEBUG (BasicTypeRegistry.java:156) - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@604f2bd2
2022-07-04 23:12:47,329 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@604f2bd2
2022-07-04 23:12:47,330 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@604f2bd2
2022-07-04 23:12:47,334 DEBUG (BasicTypeRegistry.java:156) - Adding type registration row_version -> org.hibernate.type.RowVersionType@366ac49b
2022-07-04 23:12:47,336 DEBUG (BasicTypeRegistry.java:156) - Adding type registration image -> org.hibernate.type.ImageType@2cc44ad
2022-07-04 23:12:47,339 DEBUG (BasicTypeRegistry.java:156) - Adding type registration characters -> org.hibernate.type.CharArrayType@33b1c5c5
2022-07-04 23:12:47,339 DEBUG (BasicTypeRegistry.java:156) - Adding type registration char[] -> org.hibernate.type.CharArrayType@33b1c5c5
2022-07-04 23:12:47,340 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [C -> org.hibernate.type.CharArrayType@33b1c5c5
2022-07-04 23:12:47,342 DEBUG (BasicTypeRegistry.java:156) - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@4535b6d5
2022-07-04 23:12:47,343 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@4535b6d5
2022-07-04 23:12:47,344 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@4535b6d5
2022-07-04 23:12:47,345 DEBUG (BasicTypeRegistry.java:156) - Adding type registration text -> org.hibernate.type.TextType@4b41e4dd
2022-07-04 23:12:47,347 DEBUG (BasicTypeRegistry.java:156) - Adding type registration ntext -> org.hibernate.type.NTextType@40844aab
2022-07-04 23:12:47,351 DEBUG (BasicTypeRegistry.java:156) - Adding type registration blob -> org.hibernate.type.BlobType@767e20cf
2022-07-04 23:12:47,352 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@767e20cf
2022-07-04 23:12:47,353 DEBUG (BasicTypeRegistry.java:156) - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@10ded6a9
2022-07-04 23:12:47,357 DEBUG (BasicTypeRegistry.java:156) - Adding type registration clob -> org.hibernate.type.ClobType@189aa67a
2022-07-04 23:12:47,358 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@189aa67a
2022-07-04 23:12:47,362 DEBUG (BasicTypeRegistry.java:156) - Adding type registration nclob -> org.hibernate.type.NClobType@542e560f
2022-07-04 23:12:47,362 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@542e560f
2022-07-04 23:12:47,364 DEBUG (BasicTypeRegistry.java:156) - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@3bcbb589
2022-07-04 23:12:47,366 DEBUG (BasicTypeRegistry.java:156) - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@53d102a2
2022-07-04 23:12:47,370 DEBUG (BasicTypeRegistry.java:156) - Adding type registration serializable -> org.hibernate.type.SerializableType@67c2e933
2022-07-04 23:12:47,378 DEBUG (BasicTypeRegistry.java:156) - Adding type registration object -> org.hibernate.type.ObjectType@5911e990
2022-07-04 23:12:47,379 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@5911e990
2022-07-04 23:12:47,381 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@54c62d71
2022-07-04 23:12:47,381 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@65045a87
2022-07-04 23:12:47,382 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@47f4e407
2022-07-04 23:12:47,382 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@2d1dee39
2022-07-04 23:12:47,382 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@48d5f34e
2022-07-04 23:12:47,382 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@fc258b1
2022-07-04 23:12:47,383 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@6ff65192
2022-07-04 23:12:47,383 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@2dd80673
2022-07-04 23:12:47,417 DEBUG (BootstrapContextImpl.java:272) - Injecting ScanEnvironment [org.hibernate.jpa.boot.internal.StandardJpaScanEnvironmentImpl@26bab2f1] into BootstrapContext; was [null]
2022-07-04 23:12:47,418 DEBUG (BootstrapContextImpl.java:267) - Injecting ScanOptions [org.hibernate.boot.archive.scan.internal.StandardScanOptions@3724af13] into BootstrapContext; was [org.hibernate.boot.archive.scan.internal.StandardScanOptions@68ead359]
2022-07-04 23:12:47,661 DEBUG (BootstrapContextImpl.java:262) - Injecting JPA temp ClassLoader [null] into BootstrapContext; was [null]
2022-07-04 23:12:47,662 DEBUG (ClassLoaderAccessImpl.java:45) - ClassLoaderAccessImpl#injectTempClassLoader(null) [was null]
2022-07-04 23:12:47,705 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2022-07-04 23:12:47,707 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2022-07-04 23:12:47,711 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2022-07-04 23:12:47,713 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2022-07-04 23:12:47,714 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2022-07-04 23:12:47,717 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2022-07-04 23:12:47,720 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2022-07-04 23:12:47,724 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2022-07-04 23:12:47,727 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2022-07-04 23:12:47,729 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2022-07-04 23:12:47,743 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2022-07-04 23:12:47,745 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2022-07-04 23:12:47,745 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2022-07-04 23:12:47,748 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2022-07-04 23:12:47,768  WARN (DriverManagerConnectionProviderImpl.java:72) - HHH10001002: Using Hibernate built-in connection pool (not for production use!)
2022-07-04 23:12:47,821  INFO (DriverManagerConnectionProviderImpl.java:115) - HHH10001005: using driver [com.mysql.cj.jdbc.Driver] at URL [jdbc:mysql://localhost/playdata?characterEncoding=UTF-8]
2022-07-04 23:12:47,823  INFO (DriverManagerConnectionProviderImpl.java:121) - HHH10001001: Connection properties: {password=playdata, user=root}
2022-07-04 23:12:47,823  INFO (DriverManagerConnectionProviderImpl.java:129) - HHH10001003: Autocommit mode: false
2022-07-04 23:12:47,836 DEBUG (DelegatingBasicLogger.java:384) - Initializing Connection pool with 1 Connections
2022-07-04 23:12:47,837  INFO (DriverManagerConnectionProviderImpl.java:239) - HHH000115: Hibernate connection pool size: 20 (min=1)
2022-07-04 23:12:49,890 DEBUG (JdbcEnvironmentInitiator.java:72) - Database ->
       name : MySQL
    version : 8.0.29
      major : 8
      minor : 0
2022-07-04 23:12:49,891 DEBUG (JdbcEnvironmentInitiator.java:83) - Driver ->
       name : MySQL Connector/J
    version : mysql-connector-java-8.0.29 (Revision: dd61577595edad45c398af508cf91ad26fc4144f)
      major : 8
      minor : 0
2022-07-04 23:12:49,892 DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.2
2022-07-04 23:12:49,946  INFO (Dialect.java:158) - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2022-07-04 23:12:50,001 DEBUG (IdentifierHelperBuilder.java:117) - JDBC driver metadata reported database stores quoted identifiers in more than one case
2022-07-04 23:12:50,120 DEBUG (IdentifierHelperBuilder.java:191) - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
2022-07-04 23:12:50,238 DEBUG (Namespace.java:51) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2022-07-04 23:12:50,250 DEBUG (TypeConfiguration.java:152) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@340b7ef6] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@30404dba]
2022-07-04 23:12:50,443 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.Concert
2022-07-04 23:12:50,517 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 23:12:50,536 DEBUG (EntityBinder.java:430) - Import with entity name Concert
2022-07-04 23:12:50,556 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.Concert on table Concert
2022-07-04 23:12:50,654 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concert_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,666 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertId with lazy=false
2022-07-04 23:12:50,673 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:concertId]
2022-07-04 23:12:50,680 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertId
2022-07-04 23:12:50,687 DEBUG (PropertyBinder.java:266) - Building property concertId
2022-07-04 23:12:50,702 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(concert_id)]), concertId, identity, , ...)
2022-07-04 23:12:50,705 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concert_name, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,706 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertName with lazy=false
2022-07-04 23:12:50,706 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:concertName]
2022-07-04 23:12:50,707 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertName
2022-07-04 23:12:50,708 DEBUG (PropertyBinder.java:266) - Building property concertName
2022-07-04 23:12:50,713 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:12:50,717 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concertSinger, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,724 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=null, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,754 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=element, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,755 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concertSinger_KEY, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,757 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concertSinger_KEY', referencedColumn='null', mappedBy='null'}
2022-07-04 23:12:50,761 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:12:50,762 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:12:50,763 DEBUG (CollectionBinder.java:449) - Collection role: concert.model.entity.Concert.concertSinger
2022-07-04 23:12:50,772 DEBUG (PropertyBinder.java:266) - Building property concertSinger
2022-07-04 23:12:50,774 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=contents, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,775 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property contents with lazy=false
2022-07-04 23:12:50,775 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:contents]
2022-07-04 23:12:50,777 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for contents
2022-07-04 23:12:50,780 DEBUG (PropertyBinder.java:266) - Building property contents
2022-07-04 23:12:50,782 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=date, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,783 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property date with lazy=false
2022-07-04 23:12:50,783 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:date]
2022-07-04 23:12:50,785 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for date
2022-07-04 23:12:50,786 DEBUG (PropertyBinder.java:266) - Building property date
2022-07-04 23:12:50,787 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=location, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,788 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property location with lazy=false
2022-07-04 23:12:50,789 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:location]
2022-07-04 23:12:50,790 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for location
2022-07-04 23:12:50,790 DEBUG (PropertyBinder.java:266) - Building property location
2022-07-04 23:12:50,791 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=max_seats, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,791 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property maxSeats with lazy=false
2022-07-04 23:12:50,792 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:maxSeats]
2022-07-04 23:12:50,792 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for maxSeats
2022-07-04 23:12:50,792 DEBUG (PropertyBinder.java:266) - Building property maxSeats
2022-07-04 23:12:50,793 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:12:50,793 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=order, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,794 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=null, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,794 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=element, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,795 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=order_KEY, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,796 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='order_KEY', referencedColumn='null', mappedBy='null'}
2022-07-04 23:12:50,796 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:12:50,798 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:12:50,798 DEBUG (CollectionBinder.java:449) - Collection role: concert.model.entity.Concert.order
2022-07-04 23:12:50,799 DEBUG (PropertyBinder.java:266) - Building property order
2022-07-04 23:12:50,804 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.Orders
2022-07-04 23:12:50,804 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 23:12:50,805 DEBUG (EntityBinder.java:430) - Import with entity name Orders
2022-07-04 23:12:50,806 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.Orders on table Orders
2022-07-04 23:12:50,827 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=order_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,828 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property orderId with lazy=false
2022-07-04 23:12:50,830 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:orderId]
2022-07-04 23:12:50,830 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for orderId
2022-07-04 23:12:50,831 DEBUG (PropertyBinder.java:266) - Building property orderId
2022-07-04 23:12:50,832 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(order_id)]), orderId, identity, , ...)
2022-07-04 23:12:50,833 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=amount, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,834 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property amount with lazy=false
2022-07-04 23:12:50,834 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:amount]
2022-07-04 23:12:50,835 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for amount
2022-07-04 23:12:50,835 DEBUG (PropertyBinder.java:266) - Building property amount
2022-07-04 23:12:50,837 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concert_id', referencedColumn='', mappedBy=''}
2022-07-04 23:12:50,838 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=concert, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,845 DEBUG (PropertyBinder.java:266) - Building property concert
2022-07-04 23:12:50,849 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=concert_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,850 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concert_id with lazy=false
2022-07-04 23:12:50,851 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:concert_id]
2022-07-04 23:12:50,851 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concert_id
2022-07-04 23:12:50,852 DEBUG (PropertyBinder.java:266) - Building property concert_id
2022-07-04 23:12:50,853 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=customer_email, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,853 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property customerEmail with lazy=false
2022-07-04 23:12:50,854 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:customerEmail]
2022-07-04 23:12:50,854 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for customerEmail
2022-07-04 23:12:50,855 DEBUG (PropertyBinder.java:266) - Building property customerEmail
2022-07-04 23:12:50,856 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=customer_name, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,856 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property customerName with lazy=false
2022-07-04 23:12:50,856 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:customerName]
2022-07-04 23:12:50,857 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for customerName
2022-07-04 23:12:50,858 DEBUG (PropertyBinder.java:266) - Building property customerName
2022-07-04 23:12:50,859 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.ConcertSinger
2022-07-04 23:12:50,860 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 23:12:50,861 DEBUG (EntityBinder.java:430) - Import with entity name ConcertSinger
2022-07-04 23:12:50,861 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.ConcertSinger on table concert_singer
2022-07-04 23:12:50,867 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=concert_singer_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,868 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertSingerId with lazy=false
2022-07-04 23:12:50,869 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.ConcertSinger:concertSingerId]
2022-07-04 23:12:50,869 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertSingerId
2022-07-04 23:12:50,870 DEBUG (PropertyBinder.java:266) - Building property concertSingerId
2022-07-04 23:12:50,871 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(concert_singer_id)]), concertSingerId, identity, , ...)
2022-07-04 23:12:50,871 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concert_id', referencedColumn='', mappedBy=''}
2022-07-04 23:12:50,873 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=concert, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,874 DEBUG (PropertyBinder.java:266) - Building property concert
2022-07-04 23:12:50,874 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=concert_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,875 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertId with lazy=false
2022-07-04 23:12:50,875 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.ConcertSinger:concertId]
2022-07-04 23:12:50,875 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertId
2022-07-04 23:12:50,876 DEBUG (PropertyBinder.java:266) - Building property concertId
2022-07-04 23:12:50,876 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='singer_id', referencedColumn='', mappedBy=''}
2022-07-04 23:12:50,877 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=singer, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,878 DEBUG (PropertyBinder.java:266) - Building property singer
2022-07-04 23:12:50,878 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=singer_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,879 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property singerId with lazy=false
2022-07-04 23:12:50,880 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.ConcertSinger:singerId]
2022-07-04 23:12:50,880 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for singerId
2022-07-04 23:12:50,881 DEBUG (PropertyBinder.java:266) - Building property singerId
2022-07-04 23:12:50,881 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.Singer
2022-07-04 23:12:50,883 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 23:12:50,883 DEBUG (EntityBinder.java:430) - Import with entity name Singer
2022-07-04 23:12:50,884 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.Singer on table Singer
2022-07-04 23:12:50,890 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=singer_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,890 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property singerId with lazy=false
2022-07-04 23:12:50,890 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Singer:singerId]
2022-07-04 23:12:50,892 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for singerId
2022-07-04 23:12:50,893 DEBUG (PropertyBinder.java:266) - Building property singerId
2022-07-04 23:12:50,893 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(singer_id)]), singerId, identity, , ...)
2022-07-04 23:12:50,894 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='singer'}
2022-07-04 23:12:50,894 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=concertSinger, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,895 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=null, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,895 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=element, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,896 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=concertSinger_KEY, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,896 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concertSinger_KEY', referencedColumn='null', mappedBy='null'}
2022-07-04 23:12:50,896 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='singer'}
2022-07-04 23:12:50,897 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='singer'}
2022-07-04 23:12:50,897 DEBUG (CollectionBinder.java:449) - Collection role: concert.model.entity.Singer.concertSinger
2022-07-04 23:12:50,897 DEBUG (PropertyBinder.java:266) - Building property concertSinger
2022-07-04 23:12:50,898 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=detail, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,899 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property detail with lazy=false
2022-07-04 23:12:50,899 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Singer:detail]
2022-07-04 23:12:50,900 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for detail
2022-07-04 23:12:50,900 DEBUG (PropertyBinder.java:266) - Building property detail
2022-07-04 23:12:50,900 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=singer_name, insertable=true, updatable=true, unique=false}
2022-07-04 23:12:50,900 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property singerName with lazy=false
2022-07-04 23:12:50,901 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Singer:singerName]
2022-07-04 23:12:50,902 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for singerName
2022-07-04 23:12:50,903 DEBUG (PropertyBinder.java:266) - Building property singerName
2022-07-04 23:12:50,908 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertId
2022-07-04 23:12:50,909 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertName
2022-07-04 23:12:50,909 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for contents
2022-07-04 23:12:50,909 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for date
2022-07-04 23:12:50,910 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for location
2022-07-04 23:12:50,910 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for maxSeats
2022-07-04 23:12:50,910 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for orderId
2022-07-04 23:12:50,911 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for amount
2022-07-04 23:12:50,911 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concert_id
2022-07-04 23:12:50,912 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for customerEmail
2022-07-04 23:12:50,912 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for customerName
2022-07-04 23:12:50,912 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertSingerId
2022-07-04 23:12:50,913 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertId
2022-07-04 23:12:50,913 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for singerId
2022-07-04 23:12:50,913 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for singerId
2022-07-04 23:12:50,913 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for detail
2022-07-04 23:12:50,913 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for singerName
2022-07-04 23:12:50,924 DEBUG (PrimaryKey.java:35) - Forcing column [concert_id] to be non-null as it is part of the primary key for table [concert]
2022-07-04 23:12:50,925 DEBUG (PrimaryKey.java:35) - Forcing column [order_id] to be non-null as it is part of the primary key for table [orders]
2022-07-04 23:12:50,926 DEBUG (PrimaryKey.java:35) - Forcing column [concert_singer_id] to be non-null as it is part of the primary key for table [concert_singer]
2022-07-04 23:12:50,926 DEBUG (PrimaryKey.java:35) - Forcing column [singer_id] to be non-null as it is part of the primary key for table [singer]
2022-07-04 23:12:50,927 DEBUG (CollectionSecondPass.java:51) - Second pass for collection: concert.model.entity.Concert.concertSinger
2022-07-04 23:12:50,928 DEBUG (CollectionBinder.java:898) - Binding a OneToMany: concert.model.entity.Concert.concertSinger through a foreign key
2022-07-04 23:12:50,930 DEBUG (CollectionBinder.java:936) - Mapping collection: concert.model.entity.Concert.concertSinger -> concert_singer
2022-07-04 23:12:50,933 DEBUG (TableBinder.java:565) - Retrieving property concert.model.entity.ConcertSinger.concert
2022-07-04 23:12:50,934 DEBUG (CollectionSecondPass.java:68) - Mapped collection key: concert_id, one-to-many: concert.model.entity.ConcertSinger
2022-07-04 23:12:50,935 DEBUG (CollectionSecondPass.java:51) - Second pass for collection: concert.model.entity.Concert.order
2022-07-04 23:12:50,936 DEBUG (CollectionBinder.java:898) - Binding a OneToMany: concert.model.entity.Concert.order through a foreign key
2022-07-04 23:12:50,936 DEBUG (CollectionBinder.java:936) - Mapping collection: concert.model.entity.Concert.order -> Orders
2022-07-04 23:12:50,937 DEBUG (TableBinder.java:565) - Retrieving property concert.model.entity.Orders.concert
2022-07-04 23:12:50,938 DEBUG (CollectionSecondPass.java:68) - Mapped collection key: concert_id, one-to-many: concert.model.entity.Orders
2022-07-04 23:12:50,939 DEBUG (CollectionSecondPass.java:51) - Second pass for collection: concert.model.entity.Singer.concertSinger
2022-07-04 23:12:50,940 DEBUG (CollectionBinder.java:898) - Binding a OneToMany: concert.model.entity.Singer.concertSinger through a foreign key
2022-07-04 23:12:50,940 DEBUG (CollectionBinder.java:936) - Mapping collection: concert.model.entity.Singer.concertSinger -> concert_singer
2022-07-04 23:12:50,940 DEBUG (TableBinder.java:565) - Retrieving property concert.model.entity.ConcertSinger.singer
2022-07-04 23:12:50,941 DEBUG (CollectionSecondPass.java:68) - Mapped collection key: singer_id, one-to-many: concert.model.entity.ConcertSinger
2022-07-04 23:12:50,941 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 23:12:50,947 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Singer
2022-07-04 23:12:50,947 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 23:12:50,952 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 23:12:50,953 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Singer
2022-07-04 23:12:50,953 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 23:12:51,041 DEBUG (SessionFactoryImpl.java:196) - Building session factory
2022-07-04 23:12:51,044 DEBUG (Settings.java:70) - SessionFactory name : null
2022-07-04 23:12:51,044 DEBUG (Settings.java:71) - Automatic flush during beforeCompletion(): enabled
2022-07-04 23:12:51,046 DEBUG (Settings.java:72) - Automatic session close at end of transaction: disabled
2022-07-04 23:12:51,046 DEBUG (Settings.java:74) - Statistics: disabled
2022-07-04 23:12:51,046 DEBUG (Settings.java:76) - Deleted entity synthetic identifier rollback: disabled
2022-07-04 23:12:51,046 DEBUG (Settings.java:77) - Default entity-mode: pojo
2022-07-04 23:12:51,047 DEBUG (Settings.java:78) - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2022-07-04 23:12:51,047 DEBUG (Settings.java:79) - Allow initialization of lazy state outside session : disabled
2022-07-04 23:12:51,047 DEBUG (Settings.java:81) - Using BatchFetchStyle : LEGACY
2022-07-04 23:12:51,047 DEBUG (Settings.java:82) - Default batch fetch size: -1
2022-07-04 23:12:51,047 DEBUG (Settings.java:83) - Maximum outer join fetch depth: 2
2022-07-04 23:12:51,048 DEBUG (Settings.java:84) - Default null ordering: NONE
2022-07-04 23:12:51,048 DEBUG (Settings.java:85) - Order SQL updates by primary key: disabled
2022-07-04 23:12:51,048 DEBUG (Settings.java:86) - Order SQL inserts for batching: disabled
2022-07-04 23:12:51,048 DEBUG (Settings.java:88) - multi-tenancy strategy : NONE
2022-07-04 23:12:51,049 DEBUG (Settings.java:90) - JTA Track by Thread: enabled
2022-07-04 23:12:51,049 DEBUG (Settings.java:92) - Query language substitutions: {}
2022-07-04 23:12:51,049 DEBUG (Settings.java:93) - Named query checking : enabled
2022-07-04 23:12:51,050 DEBUG (Settings.java:95) - Second-level cache: disabled
2022-07-04 23:12:51,050 DEBUG (Settings.java:96) - Second-level query cache: disabled
2022-07-04 23:12:51,050 DEBUG (Settings.java:97) - Second-level query cache factory: null
2022-07-04 23:12:51,050 DEBUG (Settings.java:98) - Second-level cache region prefix: null
2022-07-04 23:12:51,050 DEBUG (Settings.java:99) - Optimize second-level cache for minimal puts: disabled
2022-07-04 23:12:51,051 DEBUG (Settings.java:100) - Structured second-level cache entries: disabled
2022-07-04 23:12:51,051 DEBUG (Settings.java:101) - Second-level cache direct-reference entries: disabled
2022-07-04 23:12:51,051 DEBUG (Settings.java:102) - Automatic eviction of collection cache: disabled
2022-07-04 23:12:51,051 DEBUG (Settings.java:104) - JDBC batch size: 15
2022-07-04 23:12:51,052 DEBUG (Settings.java:105) - JDBC batch updates for versioned data: enabled
2022-07-04 23:12:51,052 DEBUG (Settings.java:106) - Scrollable result sets: enabled
2022-07-04 23:12:51,052 DEBUG (Settings.java:107) - Wrap result sets: disabled
2022-07-04 23:12:51,052 DEBUG (Settings.java:108) - JDBC3 getGeneratedKeys(): enabled
2022-07-04 23:12:51,053 DEBUG (Settings.java:109) - JDBC result set fetch size: null
2022-07-04 23:12:51,053 DEBUG (Settings.java:110) - Connection release mode: AFTER_TRANSACTION
2022-07-04 23:12:51,053 DEBUG (Settings.java:111) - Generate SQL with comments: disabled
2022-07-04 23:12:51,054 DEBUG (Settings.java:113) - JPA compliance - query : 
2022-07-04 23:12:51,054 DEBUG (Settings.java:114) - JPA compliance - closed-handling : 
2022-07-04 23:12:51,054 DEBUG (Settings.java:115) - JPA compliance - lists : 
2022-07-04 23:12:51,055 DEBUG (Settings.java:116) - JPA compliance - transactions : 
2022-07-04 23:12:51,250 DEBUG (SessionFactoryImpl.java:251) - Session factory constructed with filter configurations : {}
2022-07-04 23:12:51,252 DEBUG (SessionFactoryImpl.java:252) - Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, hibernate.format_sql=true, java.specification.version=11, sun.cpu.isalist=amd64, sun.jnu.encoding=MS949, hibernate.dialect=org.hibernate.dialect.MySQL8Dialect, java.class.path=C:\Users\신동혁\playdata\20220509_lab\03.web\concertProject\concert\target\classes;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\annotations-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-ant.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-ha.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-ssi.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-storeconfig.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-tribes.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\ecj-4.20.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\el-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jasper-el.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jasper.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jaspic-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jsp-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\servlet-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-coyote.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-dbcp.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-cs.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-de.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-es.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-fr.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-ja.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-ko.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-pt-BR.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-ru.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-zh-CN.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-jdbc.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-jni.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-util-scan.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-util.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-websocket.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\websocket-api.jar;C:\Users\신동혁\.m2\repository\javax\persistence\javax.persistence-api\2.2\javax.persistence-api-2.2.jar;C:\Users\신동혁\.m2\repository\org\hibernate\hibernate-entitymanager\5.4.2.Final\hibernate-entitymanager-5.4.2.Final.jar;C:\Users\신동혁\.m2\repository\org\jboss\logging\jboss-logging\3.3.2.Final\jboss-logging-3.3.2.Final.jar;C:\Users\신동혁\.m2\repository\org\hibernate\hibernate-core\5.4.2.Final\hibernate-core-5.4.2.Final.jar;C:\Users\신동혁\.m2\repository\org\javassist\javassist\3.24.0-GA\javassist-3.24.0-GA.jar;C:\Users\신동혁\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\신동혁\.m2\repository\org\jboss\jandex\2.0.5.Final\jandex-2.0.5.Final.jar;C:\Users\신동혁\.m2\repository\com\fasterxml\classmate\1.3.4\classmate-1.3.4.jar;C:\Users\신동혁\.m2\repository\javax\activation\javax.activation-api\1.2.0\javax.activation-api-1.2.0.jar;C:\Users\신동혁\.m2\repository\javax\xml\bind\jaxb-api\2.3.1\jaxb-api-2.3.1.jar;C:\Users\신동혁\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.1\jaxb-runtime-2.3.1.jar;C:\Users\신동혁\.m2\repository\org\glassfish\jaxb\txw2\2.3.1\txw2-2.3.1.jar;C:\Users\신동혁\.m2\repository\com\sun\istack\istack-commons-runtime\3.0.7\istack-commons-runtime-3.0.7.jar;C:\Users\신동혁\.m2\repository\org\jvnet\staxex\stax-ex\1.8\stax-ex-1.8.jar;C:\Users\신동혁\.m2\repository\com\sun\xml\fastinfoset\FastInfoset\1.2.15\FastInfoset-1.2.15.jar;C:\Users\신동혁\.m2\repository\org\dom4j\dom4j\2.1.1\dom4j-2.1.1.jar;C:\Users\신동혁\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.1.0.Final\hibernate-commons-annotations-5.1.0.Final.jar;C:\Users\신동혁\.m2\repository\net\bytebuddy\byte-buddy\1.9.10\byte-buddy-1.9.10.jar;C:\Users\신동혁\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.1.1.Final\jboss-transaction-api_1.2_spec-1.1.1.Final.jar;C:\Users\신동혁\.m2\repository\junit\junit\4.13.2\junit-4.13.2.jar;C:\Users\신동혁\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\신동혁\.m2\repository\org\projectlombok\lombok\1.18.24\lombok-1.18.24.jar;C:\Users\신동혁\.m2\repository\com\jslsolucoes\ojdbc6\11.2.0.1.0\ojdbc6-11.2.0.1.0.jar;C:\Users\신동혁\.m2\repository\mysql\mysql-connector-java\8.0.29\mysql-connector-java-8.0.29.jar;C:\Users\신동혁\.m2\repository\com\google\protobuf\protobuf-java\3.19.4\protobuf-java-3.19.4.jar;C:\Users\신동혁\.m2\repository\org\slf4j\slf4j-api\1.7.5\slf4j-api-1.7.5.jar;C:\Users\신동혁\.m2\repository\org\slf4j\slf4j-log4j12\1.7.5\slf4j-log4j12-1.7.5.jar;C:\Users\신동혁\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\신동혁\.m2\repository\org\modelmapper\modelmapper\2.4.0\modelmapper-2.4.0.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Asia/Seoul, javax.persistence.jdbc.url=jdbc:mysql://localhost/playdata?characterEncoding=UTF-8, javax.persistence.jdbc.user=****, os.name=Windows 10, java.vm.specification.version=11, sun.java.launcher=SUN_STANDARD, user.country=KR, sun.boot.library.path=C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11\bin, sun.java.command=cocert.model.dao.Test, jdk.debug=release, sun.cpu.endian=little, user.home=C:\Users\신동혁, user.language=ko, java.specification.vendor=Oracle Corporation, java.version.date=2018-09-25, java.home=C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11, file.separator=\, java.vm.compressedOopsMode=32-bit, line.separator=
, java.specification.name=Java Platform API Specification, java.vm.specification.vendor=Oracle Corporation, hibernate.transaction.coordinator_class=class org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, javax.persistence.jdbc.driver=com.mysql.cj.jdbc.Driver, hibernate.hbm2ddl.auto=none, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=11+28, user.name=Shin, path.separator=;, hibernate.connection.username=****, os.version=10.0, java.runtime.name=OpenJDK Runtime Environment, hibernate.connection.url=jdbc:mysql://localhost/playdata?characterEncoding=UTF-8, file.encoding=UTF-8, hibernate.ejb.persistenceUnitName=dbinfo, java.vm.name=OpenJDK 64-Bit Server VM, hibernate.show_sql=true, java.vendor.version=18.9, hibernate.connection.driver_class=com.mysql.cj.jdbc.Driver, java.vendor.url.bug=http://bugreport.java.com/bugreport/, java.io.tmpdir=C:\Users\신동혁\AppData\Local\Temp\, java.version=11, user.dir=C:\Users\신동혁\playdata\20220509_lab\03.web\concertProject\concert, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.password=****, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@2c58dcb1, java.library.path=C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Users/신동혁/playdata/20220509_lab/99.devEnv/eclipse//plugins/org.eclipse.justj.openjdk.hotspot.jre.full.win32.x86_64_16.0.1.v20210528-1205/jre/bin/server;C:/Users/신동혁/playdata/20220509_lab/99.devEnv/eclipse//plugins/org.eclipse.justj.openjdk.hotspot.jre.full.win32.x86_64_16.0.1.v20210528-1205/jre/bin;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11\bin;C:\oraclexe\app\oracle\product\11.2.0\server\bin;C:\Program Files\MySQL\MySQL Server 8.0\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\Bandizip\;C:\Program Files\Git\cmd;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\신동혁\AppData\Local\Programs\Python\Python39\Scripts\;C:\Users\신동혁\AppData\Local\Programs\Python\Python39\;C:\Users\신동혁\AppData\Local\Microsoft\WindowsApps;C:\Users\신동혁\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\eclipse;;., java.vendor=Oracle Corporation, java.vm.info=mixed mode, java.vm.version=11+28, hibernate.bytecode.use_reflection_optimizer=false, sun.io.unicode.encoding=UnicodeLittle, javax.persistence.jdbc.password=****, java.class.version=55.0}
2022-07-04 23:12:51,290 DEBUG (JaccIntegrator.java:80) - Skipping JACC integration as it was not enabled
2022-07-04 23:12:51,293 DEBUG (SessionFactoryImpl.java:291) - Instantiated session factory
2022-07-04 23:12:51,294 DEBUG (TypeConfiguration.java:157) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@340b7ef6] to SessionFactoryImpl [org.hibernate.internal.SessionFactoryImpl@5fe7f967]
2022-07-04 23:12:51,425 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Concert] is safe
2022-07-04 23:12:51,425 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Concert
2022-07-04 23:12:51,470 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Concert] is safe
2022-07-04 23:12:51,471 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Concert
2022-07-04 23:12:52,300 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Orders] is safe
2022-07-04 23:12:52,301 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Orders
2022-07-04 23:12:52,303 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Orders] is safe
2022-07-04 23:12:52,303 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Orders
2022-07-04 23:12:52,395 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.ConcertSinger] is safe
2022-07-04 23:12:52,396 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.ConcertSinger
2022-07-04 23:12:52,399 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.ConcertSinger] is safe
2022-07-04 23:12:52,402 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.ConcertSinger
2022-07-04 23:12:52,467 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Singer] is safe
2022-07-04 23:12:52,468 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Singer
2022-07-04 23:12:52,470 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Singer] is safe
2022-07-04 23:12:52,470 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Singer
2022-07-04 23:12:52,562 DEBUG (AbstractCollectionPersister.java:688) - Static SQL for collection: concert.model.entity.Singer.concertSinger
2022-07-04 23:12:52,563 DEBUG (AbstractCollectionPersister.java:690) -  Row insert: update concert_singer set singer_id=? where concert_singer_id=?
2022-07-04 23:12:52,564 DEBUG (AbstractCollectionPersister.java:693) -  Row update: update concert_singer set  where concert_singer_id=?
2022-07-04 23:12:52,564 DEBUG (AbstractCollectionPersister.java:696) -  Row delete: update concert_singer set singer_id=null where singer_id=? and concert_singer_id=?
2022-07-04 23:12:52,567 DEBUG (AbstractCollectionPersister.java:699) -  One-shot delete: update concert_singer set singer_id=null where singer_id=?
2022-07-04 23:12:52,569 DEBUG (AbstractCollectionPersister.java:688) - Static SQL for collection: concert.model.entity.Concert.order
2022-07-04 23:12:52,569 DEBUG (AbstractCollectionPersister.java:690) -  Row insert: update Orders set concert_id=? where order_id=?
2022-07-04 23:12:52,570 DEBUG (AbstractCollectionPersister.java:693) -  Row update: update Orders set  where order_id=?
2022-07-04 23:12:52,570 DEBUG (AbstractCollectionPersister.java:696) -  Row delete: update Orders set concert_id=null where concert_id=? and order_id=?
2022-07-04 23:12:52,571 DEBUG (AbstractCollectionPersister.java:699) -  One-shot delete: update Orders set concert_id=null where concert_id=?
2022-07-04 23:12:52,572 DEBUG (AbstractCollectionPersister.java:688) - Static SQL for collection: concert.model.entity.Concert.concertSinger
2022-07-04 23:12:52,573 DEBUG (AbstractCollectionPersister.java:690) -  Row insert: update concert_singer set concert_id=? where concert_singer_id=?
2022-07-04 23:12:52,574 DEBUG (AbstractCollectionPersister.java:693) -  Row update: update concert_singer set  where concert_singer_id=?
2022-07-04 23:12:52,574 DEBUG (AbstractCollectionPersister.java:696) -  Row delete: update concert_singer set concert_id=null where concert_id=? and concert_singer_id=?
2022-07-04 23:12:52,574 DEBUG (AbstractCollectionPersister.java:699) -  One-shot delete: update concert_singer set concert_id=null where concert_id=?
2022-07-04 23:12:52,600 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.Concert
2022-07-04 23:12:52,601 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select concert_id from Concert where concert_id =?
2022-07-04 23:12:52,601 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select concert_.concert_id, concert_.concert_name as concert_2_0_, concert_.contents as contents3_0_, concert_.date as date4_0_, concert_.location as location5_0_, concert_.max_seats as max_seat6_0_ from Concert concert_ where concert_.concert_id=?
2022-07-04 23:12:52,602 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Concert (concert_name, contents, date, location, max_seats, concert_id) values (?, ?, ?, ?, ?, ?)
2022-07-04 23:12:52,603 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Concert set concert_name=?, contents=?, date=?, location=?, max_seats=? where concert_id=?
2022-07-04 23:12:52,603 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Concert where concert_id=?
2022-07-04 23:12:52,603 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into Concert (concert_name, contents, date, location, max_seats) values (?, ?, ?, ?, ?)
2022-07-04 23:12:52,684 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4e642ee1]
2022-07-04 23:12:52,694 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertName
2022-07-04 23:12:52,695 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 23:12:52,741 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@751ae8a4]
2022-07-04 23:12:52,754 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7e307087]
2022-07-04 23:12:52,756 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : contents
2022-07-04 23:12:52,760 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : date
2022-07-04 23:12:52,763 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : location
2022-07-04 23:12:52,764 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : maxSeats
2022-07-04 23:12:52,764 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : order
2022-07-04 23:12:52,766 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@4bcaa195]
2022-07-04 23:12:52,766 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@d08edc5]
2022-07-04 23:12:52,768 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:12:52,825 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:12:52,839 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Concert)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:0>, path=concert.model.entity.Concert)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Concert.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Concert.concertSinger.<elements>)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.order, querySpaceUid=<gen:3>, path=concert.model.entity.Concert.order)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.Orders, querySpaceUid=<gen:4>, path=concert.model.entity.Concert.order.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Concert)
          - SQL table alias mapping - concert0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_0_0_}

2022-07-04 23:12:52,848 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Concert [NONE]: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 23:12:52,849 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7c2924d7]
2022-07-04 23:12:52,849 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertName
2022-07-04 23:12:52,851 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 23:12:52,853 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6587305a]
2022-07-04 23:12:52,853 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@abbe000]
2022-07-04 23:12:52,853 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : contents
2022-07-04 23:12:52,854 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : date
2022-07-04 23:12:52,855 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : location
2022-07-04 23:12:52,855 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : maxSeats
2022-07-04 23:12:52,856 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : order
2022-07-04 23:12:52,857 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@3f81621c]
2022-07-04 23:12:52,858 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5b9499fe]
2022-07-04 23:12:52,859 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:12:52,862 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:12:52,864 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Concert)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:0>, path=concert.model.entity.Concert)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Concert.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Concert.concertSinger.<elements>)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.order, querySpaceUid=<gen:3>, path=concert.model.entity.Concert.order)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.Orders, querySpaceUid=<gen:4>, path=concert.model.entity.Concert.order.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Concert)
          - SQL table alias mapping - concert0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_0_0_}

2022-07-04 23:12:52,864 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Concert [READ]: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 23:12:52,899 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.Concert: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 23:12:52,900 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.Concert: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 23:12:52,902 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.Orders
2022-07-04 23:12:52,902 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select order_id from Orders where order_id =?
2022-07-04 23:12:52,902 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select orders_.order_id, orders_.amount as amount2_2_, orders_.concert_id as concert_3_2_, orders_.customer_email as customer4_2_, orders_.customer_name as customer5_2_ from Orders orders_ where orders_.order_id=?
2022-07-04 23:12:52,902 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Orders (amount, concert_id, customer_email, customer_name, order_id) values (?, ?, ?, ?, ?)
2022-07-04 23:12:52,903 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Orders set amount=?, concert_id=?, customer_email=?, customer_name=? where order_id=?
2022-07-04 23:12:52,903 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Orders where order_id=?
2022-07-04 23:12:52,904 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into Orders (amount, concert_id, customer_email, customer_name) values (?, ?, ?, ?)
2022-07-04 23:12:52,905 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@38cedb7d]
2022-07-04 23:12:52,907 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : amount
2022-07-04 23:12:52,907 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:12:52,910 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2acdcce8]
2022-07-04 23:12:52,913 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert_id
2022-07-04 23:12:52,913 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerEmail
2022-07-04 23:12:52,914 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerName
2022-07-04 23:12:52,914 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:12:52,915 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:12:52,916 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Orders)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Orders, querySpaceUid=<gen:0>, path=concert.model.entity.Orders)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.Orders.concert)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {order_id1_2_0_}

2022-07-04 23:12:52,917 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Orders [NONE]: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 23:12:52,917 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@d5bb1c4]
2022-07-04 23:12:52,918 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : amount
2022-07-04 23:12:52,919 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:12:52,920 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@465b38e6]
2022-07-04 23:12:52,921 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert_id
2022-07-04 23:12:52,923 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerEmail
2022-07-04 23:12:52,924 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerName
2022-07-04 23:12:52,924 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:12:52,925 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:12:52,926 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Orders)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Orders, querySpaceUid=<gen:0>, path=concert.model.entity.Orders)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.Orders.concert)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {order_id1_2_0_}

2022-07-04 23:12:52,927 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Orders [READ]: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 23:12:52,928 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.Orders: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 23:12:52,929 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.Orders: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 23:12:52,930 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.ConcertSinger
2022-07-04 23:12:52,930 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select concert_singer_id from concert_singer where concert_singer_id =?
2022-07-04 23:12:52,931 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select concertsin_.concert_singer_id, concertsin_.concert_id as concert_2_1_, concertsin_.singer_id as singer_i3_1_ from concert_singer concertsin_ where concertsin_.concert_singer_id=?
2022-07-04 23:12:52,931 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into concert_singer (concert_id, singer_id, concert_singer_id) values (?, ?, ?)
2022-07-04 23:12:52,932 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update concert_singer set concert_id=?, singer_id=? where concert_singer_id=?
2022-07-04 23:12:52,932 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from concert_singer where concert_singer_id=?
2022-07-04 23:12:52,932 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into concert_singer (concert_id, singer_id) values (?, ?)
2022-07-04 23:12:52,932 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4b960b5b]
2022-07-04 23:12:52,933 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:12:52,933 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7bd96822]
2022-07-04 23:12:52,934 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 23:12:52,934 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 23:12:52,935 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@64dae3b7]
2022-07-04 23:12:52,937 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 23:12:52,937 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:12:52,938 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:12:52,939 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.ConcertSinger)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:0>, path=concert.model.entity.ConcertSinger)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.ConcertSinger.concert)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:2>, path=concert.model.entity.ConcertSinger.singer)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.ConcertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_1_0_}

2022-07-04 23:12:52,940 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.ConcertSinger [NONE]: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 23:12:52,940 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1fedf0a4]
2022-07-04 23:12:52,941 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:12:52,942 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2ee48610]
2022-07-04 23:12:52,943 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 23:12:52,944 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 23:12:52,944 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1d901f20]
2022-07-04 23:12:52,945 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 23:12:52,945 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:12:52,946 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:12:52,947 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.ConcertSinger)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:0>, path=concert.model.entity.ConcertSinger)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.ConcertSinger.concert)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:2>, path=concert.model.entity.ConcertSinger.singer)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.ConcertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_1_0_}

2022-07-04 23:12:52,948 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.ConcertSinger [READ]: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 23:12:52,948 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.ConcertSinger: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 23:12:52,949 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.ConcertSinger: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 23:12:52,950 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.Singer
2022-07-04 23:12:52,950 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select singer_id from Singer where singer_id =?
2022-07-04 23:12:52,950 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select singer_.singer_id, singer_.detail as detail2_3_, singer_.singer_name as singer_n3_3_ from Singer singer_ where singer_.singer_id=?
2022-07-04 23:12:52,950 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Singer (detail, singer_name, singer_id) values (?, ?, ?)
2022-07-04 23:12:52,950 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Singer set detail=?, singer_name=? where singer_id=?
2022-07-04 23:12:52,951 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Singer where singer_id=?
2022-07-04 23:12:52,951 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into Singer (detail, singer_name) values (?, ?)
2022-07-04 23:12:52,951 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6d08b4e6]
2022-07-04 23:12:52,952 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 23:12:52,953 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1acb74ad]
2022-07-04 23:12:52,954 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7bf01cb]
2022-07-04 23:12:52,955 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : detail
2022-07-04 23:12:52,956 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerName
2022-07-04 23:12:52,956 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:12:52,957 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:12:52,959 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Singer)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:0>, path=concert.model.entity.Singer)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Singer.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Singer.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Singer.concertSinger.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Singer)
          - SQL table alias mapping - singer0_
          - alias suffix - 0_
          - suffixed key columns - {singer_i1_3_0_}

2022-07-04 23:12:52,960 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Singer [NONE]: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 23:12:52,960 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2f382a5e]
2022-07-04 23:12:52,961 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 23:12:52,962 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@539a138b]
2022-07-04 23:12:52,962 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2cd4e16a]
2022-07-04 23:12:52,964 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : detail
2022-07-04 23:12:52,964 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerName
2022-07-04 23:12:52,965 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:12:52,965 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:12:52,966 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Singer)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:0>, path=concert.model.entity.Singer)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Singer.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Singer.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Singer.concertSinger.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Singer)
          - SQL table alias mapping - singer0_
          - alias suffix - 0_
          - suffixed key columns - {singer_i1_3_0_}

2022-07-04 23:12:52,967 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Singer [READ]: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 23:12:52,968 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.Singer: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 23:12:52,969 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.Singer: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 23:12:52,981 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@7affc159]
2022-07-04 23:12:52,982 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1682c08c]
2022-07-04 23:12:52,988 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:12:52,988 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2f14b0f6]
2022-07-04 23:12:52,989 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 23:12:52,989 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 23:12:52,989 DEBUG (MetamodelGraphWalker.java:154) - Property path deemed to be circular : singer
2022-07-04 23:12:52,989 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 23:12:52,990 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:12:52,999 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:12:53,001 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(collection=concert.model.entity.Singer.concertSinger)
    - Returns
       - CollectionReturnImpl(collection=concert.model.entity.Singer.concertSinger, querySpaceUid=<gen:0>, path=[concert.model.entity.Singer.concertSinger])
          - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:1>, path=[concert.model.entity.Singer.concertSinger].<elements>)
             - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:2>, path=[concert.model.entity.Singer.concertSinger].<elements>.concert)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=concert.model.entity.Singer.concertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {singer_i3_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - concert_1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=concert.model.entity.ConcertSinger)
                - SQL table alias mapping - concertsin0_
                - alias suffix - 1_
                - suffixed key columns - {concert_1_1_1_}

2022-07-04 23:12:53,003 DEBUG (CollectionLoader.java:83) - Static select for collection concert.model.entity.Singer.concertSinger: select concertsin0_.singer_id as singer_i3_1_0_, concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_singer_id as concert_1_1_1_, concertsin0_.concert_id as concert_2_1_1_, concertsin0_.singer_id as singer_i3_1_1_ from concert_singer concertsin0_ where concertsin0_.singer_id=?
2022-07-04 23:12:53,004 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@273a5a8a]
2022-07-04 23:12:53,004 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1823b9c4]
2022-07-04 23:12:53,004 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : amount
2022-07-04 23:12:53,005 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:12:53,005 DEBUG (MetamodelGraphWalker.java:154) - Property path deemed to be circular : concert
2022-07-04 23:12:53,005 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert_id
2022-07-04 23:12:53,005 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerEmail
2022-07-04 23:12:53,006 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerName
2022-07-04 23:12:53,006 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:12:53,007 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:12:53,007 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(collection=concert.model.entity.Concert.order)
    - Returns
       - CollectionReturnImpl(collection=concert.model.entity.Concert.order, querySpaceUid=<gen:0>, path=[concert.model.entity.Concert.order])
          - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.Orders, querySpaceUid=<gen:1>, path=[concert.model.entity.Concert.order].<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=concert.model.entity.Concert.order)
          - SQL table alias mapping - order0_
          - alias suffix - 0_
          - suffixed key columns - {concert_3_2_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - order_id1_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=concert.model.entity.Orders)
                - SQL table alias mapping - order0_
                - alias suffix - 1_
                - suffixed key columns - {order_id1_2_1_}

2022-07-04 23:12:53,008 DEBUG (CollectionLoader.java:83) - Static select for collection concert.model.entity.Concert.order: select order0_.concert_id as concert_3_2_0_, order0_.order_id as order_id1_2_0_, order0_.order_id as order_id1_2_1_, order0_.amount as amount2_2_1_, order0_.concert_id as concert_3_2_1_, order0_.customer_email as customer4_2_1_, order0_.customer_name as customer5_2_1_ from Orders order0_ where order0_.concert_id=?
2022-07-04 23:12:53,008 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@adcfad9]
2022-07-04 23:12:53,008 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@fb49fdf]
2022-07-04 23:12:53,009 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:12:53,009 DEBUG (MetamodelGraphWalker.java:154) - Property path deemed to be circular : concert
2022-07-04 23:12:53,010 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 23:12:53,010 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 23:12:53,010 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@10c47c79]
2022-07-04 23:12:53,010 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 23:12:53,011 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:12:53,011 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:12:53,012 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(collection=concert.model.entity.Concert.concertSinger)
    - Returns
       - CollectionReturnImpl(collection=concert.model.entity.Concert.concertSinger, querySpaceUid=<gen:0>, path=[concert.model.entity.Concert.concertSinger])
          - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:1>, path=[concert.model.entity.Concert.concertSinger].<elements>)
             - EntityAttributeFetchImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:2>, path=[concert.model.entity.Concert.concertSinger].<elements>.singer)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=concert.model.entity.Concert.concertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {concert_2_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - concert_1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=concert.model.entity.ConcertSinger)
                - SQL table alias mapping - concertsin0_
                - alias suffix - 1_
                - suffixed key columns - {concert_1_1_1_}

2022-07-04 23:12:53,013 DEBUG (CollectionLoader.java:83) - Static select for collection concert.model.entity.Concert.concertSinger: select concertsin0_.concert_id as concert_2_1_0_, concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_singer_id as concert_1_1_1_, concertsin0_.concert_id as concert_2_1_1_, concertsin0_.singer_id as singer_i3_1_1_ from concert_singer concertsin0_ where concertsin0_.concert_id=?
2022-07-04 23:12:53,102 DEBUG (SchemaManagementToolCoordinator.java:57) - No actions specified; doing nothing
2022-07-04 23:12:53,103 DEBUG (JtaPlatformInitiator.java:43) - No JtaPlatform was specified, checking resolver
2022-07-04 23:12:53,104 DEBUG (JtaPlatformResolverInitiator.java:33) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2022-07-04 23:12:53,115 DEBUG (StandardJtaPlatformResolver.java:137) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2022-07-04 23:12:53,117  INFO (JtaPlatformInitiator.java:52) - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2022-07-04 23:12:53,120 DEBUG (NamedQueryRepository.java:151) - Checking 0 named HQL queries
2022-07-04 23:12:53,121 DEBUG (NamedQueryRepository.java:167) - Checking 0 named SQL queries
2022-07-04 23:12:53,126 DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@787508ca
2022-07-04 23:12:53,130 DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: c3fc8240-563d-42d3-b3f3-f4c063072cd0 (<unnamed>)
2022-07-04 23:12:53,130 DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2022-07-04 23:12:53,336 DEBUG (StatisticsInitiator.java:101) - Statistics initialized [enabled=false]
2022-07-04 23:12:53,361 DEBUG (TransactionImpl.java:56) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2022-07-04 23:12:53,362 DEBUG (TransactionImpl.java:84) - begin
2022-07-04 23:12:53,393 DEBUG (SqlStatementLogger.java:94) - 
    select
        concert0_.concert_id as concert_1_0_0_,
        concert0_.concert_name as concert_2_0_0_,
        concert0_.contents as contents3_0_0_,
        concert0_.date as date4_0_0_,
        concert0_.location as location5_0_0_,
        concert0_.max_seats as max_seat6_0_0_ 
    from
        Concert concert0_ 
    where
        concert0_.concert_id=?
2022-07-04 23:12:53,438 DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2022-07-04 23:12:53,440 DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2022-07-04 23:12:53,468 DEBUG (TwoPhaseLoad.java:145) - Resolving associations for [concert.model.entity.Concert#1]
2022-07-04 23:12:53,490 DEBUG (TwoPhaseLoad.java:288) - Done materializing entity [concert.model.entity.Concert#1]
2022-07-04 23:12:53,492 DEBUG (ResourceRegistryStandardImpl.java:87) - HHH000387: ResultSet's statement was not registered
2022-07-04 23:12:53,492 DEBUG (AbstractLoadPlanBasedEntityLoader.java:219) - Done entity load : concert.model.entity.Concert#1
2022-07-04 23:12:53,496 DEBUG (TransactionImpl.java:56) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2022-07-04 23:12:53,496 DEBUG (TransactionImpl.java:84) - begin
2022-07-04 23:12:53,663 DEBUG (SqlStatementLogger.java:94) - 
    SELECT
        * 
    FROM
        Concert
2022-07-04 23:12:53,684 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 0
2022-07-04 23:12:53,684 DEBUG (Loader.java:1538) - Result row: 
2022-07-04 23:12:53,686 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 1
2022-07-04 23:12:53,686 DEBUG (Loader.java:1538) - Result row: 
2022-07-04 23:12:53,687 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 2
2022-07-04 23:12:53,688 DEBUG (Loader.java:1538) - Result row: 
2022-07-04 23:12:53,688 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 3
2022-07-04 23:12:53,688 DEBUG (Loader.java:1538) - Result row: 
2022-07-04 23:12:53,690 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 4
2022-07-04 23:12:53,690 DEBUG (Loader.java:1538) - Result row: 
2022-07-04 23:12:53,691 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 5
2022-07-04 23:12:53,692 DEBUG (Loader.java:1538) - Result row: 
2022-07-04 23:12:53,693 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 6
2022-07-04 23:12:53,693 DEBUG (Loader.java:1538) - Result row: 
2022-07-04 23:12:53,698 DEBUG (TransactionImpl.java:142) - rolling back
2022-07-04 23:12:53,701 DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2022-07-04 23:12:53,703 DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2022-07-04 23:14:18,867 DEBUG (HibernatePersistenceProvider.java:38) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2022-07-04 23:14:19,254 DEBUG (HibernatePersistenceProvider.java:88) - Located and parsed 1 persistence units; checking each
2022-07-04 23:14:19,261 DEBUG (HibernatePersistenceProvider.java:96) - Checking persistence-unit [name=dbinfo, explicit-provider=null] against incoming persistence unit name [dbinfo]
2022-07-04 23:14:19,264 DEBUG (ProviderChecker.java:95) - No PersistenceProvider explicitly requested, assuming Hibernate
2022-07-04 23:14:19,285 DEBUG (LogHelper.java:102) - PersistenceUnitInfo [
	name: dbinfo
	persistence provider classname: null
	classloader: null
	excludeUnlistedClasses: false
	JTA datasource: null
	Non JTA datasource: null
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/%ec%8b%a0%eb%8f%99%ed%98%81/playdata/20220509_lab/03.web/concertProject/concert/target/classes
	Shared Cache Mode: null
	Validation Mode: null
	Jar files URLs []
	Managed classes names [
		concert.model.entity.Concert
		concert.model.entity.ConcertSinger
		concert.model.entity.Orders
		concert.model.entity.Singer]
	Mapping files names []
	Properties [
		javax.persistence.jdbc.driver: com.mysql.cj.jdbc.Driver
		javax.persistence.jdbc.password: playdata
		hibernate.dialect: org.hibernate.dialect.MySQL8Dialect
		javax.persistence.jdbc.url: jdbc:mysql://localhost/playdata?characterEncoding=UTF-8
		hibernate.show_sql: true
		hibernate.hbm2ddl.auto: none
		hibernate.format_sql: true
		javax.persistence.jdbc.user: root]
2022-07-04 23:14:19,300 DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2022-07-04 23:14:19,306 DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2022-07-04 23:14:19,320 DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2022-07-04 23:14:19,518  INFO (Version.java:46) - HHH000412: Hibernate Core {5.4.2.Final}
2022-07-04 23:14:19,522 DEBUG (Environment.java:199) - HHH000206: hibernate.properties not found
2022-07-04 23:14:19,864 DEBUG (ServiceBinding.java:68) - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
2022-07-04 23:14:19,927 DEBUG (RegionFactoryInitiator.java:118) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2022-07-04 23:14:19,929 DEBUG (RegionFactoryInitiator.java:49) - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2022-07-04 23:14:19,975  INFO (JavaReflectionManager.java:49) - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2022-07-04 23:14:21,149 DEBUG (BasicTypeRegistry.java:156) - Adding type registration boolean -> org.hibernate.type.BooleanType@19b93fa8
2022-07-04 23:14:21,150 DEBUG (BasicTypeRegistry.java:156) - Adding type registration boolean -> org.hibernate.type.BooleanType@19b93fa8
2022-07-04 23:14:21,155 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@19b93fa8
2022-07-04 23:14:21,157 DEBUG (BasicTypeRegistry.java:156) - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@8ad6665
2022-07-04 23:14:21,159 DEBUG (BasicTypeRegistry.java:156) - Adding type registration true_false -> org.hibernate.type.TrueFalseType@bcef303
2022-07-04 23:14:21,160 DEBUG (BasicTypeRegistry.java:156) - Adding type registration yes_no -> org.hibernate.type.YesNoType@4f9a2c08
2022-07-04 23:14:21,163 DEBUG (BasicTypeRegistry.java:156) - Adding type registration byte -> org.hibernate.type.ByteType@386f0da3
2022-07-04 23:14:21,164 DEBUG (BasicTypeRegistry.java:156) - Adding type registration byte -> org.hibernate.type.ByteType@386f0da3
2022-07-04 23:14:21,165 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@386f0da3
2022-07-04 23:14:21,167 DEBUG (BasicTypeRegistry.java:156) - Adding type registration character -> org.hibernate.type.CharacterType@344f4dea
2022-07-04 23:14:21,168 DEBUG (BasicTypeRegistry.java:156) - Adding type registration char -> org.hibernate.type.CharacterType@344f4dea
2022-07-04 23:14:21,168 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@344f4dea
2022-07-04 23:14:21,173 DEBUG (BasicTypeRegistry.java:156) - Adding type registration short -> org.hibernate.type.ShortType@6c0d9d86
2022-07-04 23:14:21,173 DEBUG (BasicTypeRegistry.java:156) - Adding type registration short -> org.hibernate.type.ShortType@6c0d9d86
2022-07-04 23:14:21,174 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@6c0d9d86
2022-07-04 23:14:21,178 DEBUG (BasicTypeRegistry.java:156) - Adding type registration integer -> org.hibernate.type.IntegerType@16ce702d
2022-07-04 23:14:21,181 DEBUG (BasicTypeRegistry.java:156) - Adding type registration int -> org.hibernate.type.IntegerType@16ce702d
2022-07-04 23:14:21,186 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@16ce702d
2022-07-04 23:14:21,192 DEBUG (BasicTypeRegistry.java:156) - Adding type registration long -> org.hibernate.type.LongType@2ea6e30c
2022-07-04 23:14:21,193 DEBUG (BasicTypeRegistry.java:156) - Adding type registration long -> org.hibernate.type.LongType@2ea6e30c
2022-07-04 23:14:21,195 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Long -> org.hibernate.type.LongType@2ea6e30c
2022-07-04 23:14:21,197 DEBUG (BasicTypeRegistry.java:156) - Adding type registration float -> org.hibernate.type.FloatType@531f4093
2022-07-04 23:14:21,197 DEBUG (BasicTypeRegistry.java:156) - Adding type registration float -> org.hibernate.type.FloatType@531f4093
2022-07-04 23:14:21,198 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@531f4093
2022-07-04 23:14:21,199 DEBUG (BasicTypeRegistry.java:156) - Adding type registration double -> org.hibernate.type.DoubleType@16fdec90
2022-07-04 23:14:21,200 DEBUG (BasicTypeRegistry.java:156) - Adding type registration double -> org.hibernate.type.DoubleType@16fdec90
2022-07-04 23:14:21,201 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@16fdec90
2022-07-04 23:14:21,204 DEBUG (BasicTypeRegistry.java:156) - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@6a55299e
2022-07-04 23:14:21,204 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@6a55299e
2022-07-04 23:14:21,207 DEBUG (BasicTypeRegistry.java:156) - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@5a18cd76
2022-07-04 23:14:21,208 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@5a18cd76
2022-07-04 23:14:21,210 DEBUG (BasicTypeRegistry.java:156) - Adding type registration string -> org.hibernate.type.StringType@77825085
2022-07-04 23:14:21,211 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.String -> org.hibernate.type.StringType@77825085
2022-07-04 23:14:21,212 DEBUG (BasicTypeRegistry.java:156) - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@5b1ebf56
2022-07-04 23:14:21,215 DEBUG (BasicTypeRegistry.java:156) - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@3549bca9
2022-07-04 23:14:21,225 DEBUG (BasicTypeRegistry.java:156) - Adding type registration url -> org.hibernate.type.UrlType@46dffdc3
2022-07-04 23:14:21,226 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.net.URL -> org.hibernate.type.UrlType@46dffdc3
2022-07-04 23:14:21,230 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Duration -> org.hibernate.type.DurationType@4748a0f9
2022-07-04 23:14:21,231 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@4748a0f9
2022-07-04 23:14:21,257 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Instant -> org.hibernate.type.InstantType@46944ca9
2022-07-04 23:14:21,258 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@46944ca9
2022-07-04 23:14:21,263 DEBUG (BasicTypeRegistry.java:156) - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@2a448449
2022-07-04 23:14:21,263 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@2a448449
2022-07-04 23:14:21,268 DEBUG (BasicTypeRegistry.java:156) - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@517566b
2022-07-04 23:14:21,269 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@517566b
2022-07-04 23:14:21,273 DEBUG (BasicTypeRegistry.java:156) - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@55322aab
2022-07-04 23:14:21,274 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@55322aab
2022-07-04 23:14:21,278 DEBUG (BasicTypeRegistry.java:156) - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@126945f9
2022-07-04 23:14:21,279 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@126945f9
2022-07-04 23:14:21,285 DEBUG (BasicTypeRegistry.java:156) - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@4879dfad
2022-07-04 23:14:21,286 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@4879dfad
2022-07-04 23:14:21,292 DEBUG (BasicTypeRegistry.java:156) - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@737a135b
2022-07-04 23:14:21,293 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@737a135b
2022-07-04 23:14:21,297 DEBUG (BasicTypeRegistry.java:156) - Adding type registration date -> org.hibernate.type.DateType@6127a7e
2022-07-04 23:14:21,297 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Date -> org.hibernate.type.DateType@6127a7e
2022-07-04 23:14:21,300 DEBUG (BasicTypeRegistry.java:156) - Adding type registration time -> org.hibernate.type.TimeType@7a1a3478
2022-07-04 23:14:21,301 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@7a1a3478
2022-07-04 23:14:21,306 DEBUG (BasicTypeRegistry.java:156) - Adding type registration timestamp -> org.hibernate.type.TimestampType@4b6690c0
2022-07-04 23:14:21,306 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@4b6690c0
2022-07-04 23:14:21,307 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@4b6690c0
2022-07-04 23:14:21,310 DEBUG (BasicTypeRegistry.java:156) - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@eda25e5
2022-07-04 23:14:21,314 DEBUG (BasicTypeRegistry.java:156) - Adding type registration calendar -> org.hibernate.type.CalendarType@35f26e72
2022-07-04 23:14:21,315 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@35f26e72
2022-07-04 23:14:21,316 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@35f26e72
2022-07-04 23:14:21,318 DEBUG (BasicTypeRegistry.java:156) - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@79351f41
2022-07-04 23:14:21,320 DEBUG (BasicTypeRegistry.java:156) - Adding type registration locale -> org.hibernate.type.LocaleType@1e0f9063
2022-07-04 23:14:21,322 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@1e0f9063
2022-07-04 23:14:21,324 DEBUG (BasicTypeRegistry.java:156) - Adding type registration currency -> org.hibernate.type.CurrencyType@3ed242a4
2022-07-04 23:14:21,325 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@3ed242a4
2022-07-04 23:14:21,326 DEBUG (BasicTypeRegistry.java:156) - Adding type registration timezone -> org.hibernate.type.TimeZoneType@13f95696
2022-07-04 23:14:21,327 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@13f95696
2022-07-04 23:14:21,329 DEBUG (BasicTypeRegistry.java:156) - Adding type registration class -> org.hibernate.type.ClassType@ebaa6cb
2022-07-04 23:14:21,329 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@ebaa6cb
2022-07-04 23:14:21,332 DEBUG (BasicTypeRegistry.java:156) - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@66fdec9
2022-07-04 23:14:21,333 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@66fdec9
2022-07-04 23:14:21,334 DEBUG (BasicTypeRegistry.java:156) - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@52851b44
2022-07-04 23:14:21,337 DEBUG (BasicTypeRegistry.java:156) - Adding type registration binary -> org.hibernate.type.BinaryType@5ef6ae06
2022-07-04 23:14:21,338 DEBUG (BasicTypeRegistry.java:156) - Adding type registration byte[] -> org.hibernate.type.BinaryType@5ef6ae06
2022-07-04 23:14:21,339 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [B -> org.hibernate.type.BinaryType@5ef6ae06
2022-07-04 23:14:21,342 DEBUG (BasicTypeRegistry.java:156) - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@604f2bd2
2022-07-04 23:14:21,343 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@604f2bd2
2022-07-04 23:14:21,343 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@604f2bd2
2022-07-04 23:14:21,345 DEBUG (BasicTypeRegistry.java:156) - Adding type registration row_version -> org.hibernate.type.RowVersionType@366ac49b
2022-07-04 23:14:21,346 DEBUG (BasicTypeRegistry.java:156) - Adding type registration image -> org.hibernate.type.ImageType@2cc44ad
2022-07-04 23:14:21,349 DEBUG (BasicTypeRegistry.java:156) - Adding type registration characters -> org.hibernate.type.CharArrayType@33b1c5c5
2022-07-04 23:14:21,350 DEBUG (BasicTypeRegistry.java:156) - Adding type registration char[] -> org.hibernate.type.CharArrayType@33b1c5c5
2022-07-04 23:14:21,350 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [C -> org.hibernate.type.CharArrayType@33b1c5c5
2022-07-04 23:14:21,353 DEBUG (BasicTypeRegistry.java:156) - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@4535b6d5
2022-07-04 23:14:21,354 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@4535b6d5
2022-07-04 23:14:21,354 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@4535b6d5
2022-07-04 23:14:21,356 DEBUG (BasicTypeRegistry.java:156) - Adding type registration text -> org.hibernate.type.TextType@4b41e4dd
2022-07-04 23:14:21,357 DEBUG (BasicTypeRegistry.java:156) - Adding type registration ntext -> org.hibernate.type.NTextType@40844aab
2022-07-04 23:14:21,362 DEBUG (BasicTypeRegistry.java:156) - Adding type registration blob -> org.hibernate.type.BlobType@767e20cf
2022-07-04 23:14:21,363 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@767e20cf
2022-07-04 23:14:21,364 DEBUG (BasicTypeRegistry.java:156) - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@10ded6a9
2022-07-04 23:14:21,369 DEBUG (BasicTypeRegistry.java:156) - Adding type registration clob -> org.hibernate.type.ClobType@189aa67a
2022-07-04 23:14:21,369 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@189aa67a
2022-07-04 23:14:21,373 DEBUG (BasicTypeRegistry.java:156) - Adding type registration nclob -> org.hibernate.type.NClobType@542e560f
2022-07-04 23:14:21,374 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@542e560f
2022-07-04 23:14:21,375 DEBUG (BasicTypeRegistry.java:156) - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@3bcbb589
2022-07-04 23:14:21,377 DEBUG (BasicTypeRegistry.java:156) - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@53d102a2
2022-07-04 23:14:21,382 DEBUG (BasicTypeRegistry.java:156) - Adding type registration serializable -> org.hibernate.type.SerializableType@67c2e933
2022-07-04 23:14:21,390 DEBUG (BasicTypeRegistry.java:156) - Adding type registration object -> org.hibernate.type.ObjectType@5911e990
2022-07-04 23:14:21,391 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@5911e990
2022-07-04 23:14:21,392 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@54c62d71
2022-07-04 23:14:21,393 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@65045a87
2022-07-04 23:14:21,394 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@47f4e407
2022-07-04 23:14:21,394 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@2d1dee39
2022-07-04 23:14:21,394 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@48d5f34e
2022-07-04 23:14:21,395 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@fc258b1
2022-07-04 23:14:21,395 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@6ff65192
2022-07-04 23:14:21,396 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@2dd80673
2022-07-04 23:14:21,423 DEBUG (BootstrapContextImpl.java:272) - Injecting ScanEnvironment [org.hibernate.jpa.boot.internal.StandardJpaScanEnvironmentImpl@26bab2f1] into BootstrapContext; was [null]
2022-07-04 23:14:21,424 DEBUG (BootstrapContextImpl.java:267) - Injecting ScanOptions [org.hibernate.boot.archive.scan.internal.StandardScanOptions@3724af13] into BootstrapContext; was [org.hibernate.boot.archive.scan.internal.StandardScanOptions@68ead359]
2022-07-04 23:14:21,559 DEBUG (BootstrapContextImpl.java:262) - Injecting JPA temp ClassLoader [null] into BootstrapContext; was [null]
2022-07-04 23:14:21,559 DEBUG (ClassLoaderAccessImpl.java:45) - ClassLoaderAccessImpl#injectTempClassLoader(null) [was null]
2022-07-04 23:14:21,579 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2022-07-04 23:14:21,581 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2022-07-04 23:14:21,584 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2022-07-04 23:14:21,584 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2022-07-04 23:14:21,585 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2022-07-04 23:14:21,588 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2022-07-04 23:14:21,589 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2022-07-04 23:14:21,593 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2022-07-04 23:14:21,596 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2022-07-04 23:14:21,598 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2022-07-04 23:14:21,599 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2022-07-04 23:14:21,600 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2022-07-04 23:14:21,600 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2022-07-04 23:14:21,603 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2022-07-04 23:14:21,615  WARN (DriverManagerConnectionProviderImpl.java:72) - HHH10001002: Using Hibernate built-in connection pool (not for production use!)
2022-07-04 23:14:21,640  INFO (DriverManagerConnectionProviderImpl.java:115) - HHH10001005: using driver [com.mysql.cj.jdbc.Driver] at URL [jdbc:mysql://localhost/playdata?characterEncoding=UTF-8]
2022-07-04 23:14:21,642  INFO (DriverManagerConnectionProviderImpl.java:121) - HHH10001001: Connection properties: {password=playdata, user=root}
2022-07-04 23:14:21,642  INFO (DriverManagerConnectionProviderImpl.java:129) - HHH10001003: Autocommit mode: false
2022-07-04 23:14:21,649 DEBUG (DelegatingBasicLogger.java:384) - Initializing Connection pool with 1 Connections
2022-07-04 23:14:21,650  INFO (DriverManagerConnectionProviderImpl.java:239) - HHH000115: Hibernate connection pool size: 20 (min=1)
2022-07-04 23:14:22,666 DEBUG (JdbcEnvironmentInitiator.java:72) - Database ->
       name : MySQL
    version : 8.0.29
      major : 8
      minor : 0
2022-07-04 23:14:22,668 DEBUG (JdbcEnvironmentInitiator.java:83) - Driver ->
       name : MySQL Connector/J
    version : mysql-connector-java-8.0.29 (Revision: dd61577595edad45c398af508cf91ad26fc4144f)
      major : 8
      minor : 0
2022-07-04 23:14:22,669 DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.2
2022-07-04 23:14:22,696  INFO (Dialect.java:158) - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2022-07-04 23:14:22,733 DEBUG (IdentifierHelperBuilder.java:117) - JDBC driver metadata reported database stores quoted identifiers in more than one case
2022-07-04 23:14:22,820 DEBUG (IdentifierHelperBuilder.java:191) - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
2022-07-04 23:14:22,889 DEBUG (Namespace.java:51) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2022-07-04 23:14:22,896 DEBUG (TypeConfiguration.java:152) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@340b7ef6] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@30404dba]
2022-07-04 23:14:23,010 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.Concert
2022-07-04 23:14:23,051 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 23:14:23,062 DEBUG (EntityBinder.java:430) - Import with entity name Concert
2022-07-04 23:14:23,072 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.Concert on table Concert
2022-07-04 23:14:23,133 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concert_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,139 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertId with lazy=false
2022-07-04 23:14:23,143 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:concertId]
2022-07-04 23:14:23,147 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertId
2022-07-04 23:14:23,152 DEBUG (PropertyBinder.java:266) - Building property concertId
2022-07-04 23:14:23,162 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(concert_id)]), concertId, identity, , ...)
2022-07-04 23:14:23,164 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concert_name, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,165 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertName with lazy=false
2022-07-04 23:14:23,165 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:concertName]
2022-07-04 23:14:23,165 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertName
2022-07-04 23:14:23,166 DEBUG (PropertyBinder.java:266) - Building property concertName
2022-07-04 23:14:23,174 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:14:23,178 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concertSinger, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,183 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=null, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,208 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=element, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,209 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concertSinger_KEY, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,210 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concertSinger_KEY', referencedColumn='null', mappedBy='null'}
2022-07-04 23:14:23,215 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:14:23,216 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:14:23,218 DEBUG (CollectionBinder.java:449) - Collection role: concert.model.entity.Concert.concertSinger
2022-07-04 23:14:23,224 DEBUG (PropertyBinder.java:266) - Building property concertSinger
2022-07-04 23:14:23,225 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=contents, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,226 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property contents with lazy=false
2022-07-04 23:14:23,228 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:contents]
2022-07-04 23:14:23,229 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for contents
2022-07-04 23:14:23,230 DEBUG (PropertyBinder.java:266) - Building property contents
2022-07-04 23:14:23,231 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=date, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,231 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property date with lazy=false
2022-07-04 23:14:23,232 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:date]
2022-07-04 23:14:23,234 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for date
2022-07-04 23:14:23,234 DEBUG (PropertyBinder.java:266) - Building property date
2022-07-04 23:14:23,236 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=location, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,236 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property location with lazy=false
2022-07-04 23:14:23,237 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:location]
2022-07-04 23:14:23,237 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for location
2022-07-04 23:14:23,238 DEBUG (PropertyBinder.java:266) - Building property location
2022-07-04 23:14:23,238 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=max_seats, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,239 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property maxSeats with lazy=false
2022-07-04 23:14:23,239 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:maxSeats]
2022-07-04 23:14:23,239 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for maxSeats
2022-07-04 23:14:23,240 DEBUG (PropertyBinder.java:266) - Building property maxSeats
2022-07-04 23:14:23,240 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:14:23,240 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=order, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,242 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=null, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,243 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=element, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,243 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=order_KEY, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,244 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='order_KEY', referencedColumn='null', mappedBy='null'}
2022-07-04 23:14:23,245 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:14:23,245 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:14:23,245 DEBUG (CollectionBinder.java:449) - Collection role: concert.model.entity.Concert.order
2022-07-04 23:14:23,246 DEBUG (PropertyBinder.java:266) - Building property order
2022-07-04 23:14:23,250 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.Orders
2022-07-04 23:14:23,251 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 23:14:23,255 DEBUG (EntityBinder.java:430) - Import with entity name Orders
2022-07-04 23:14:23,256 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.Orders on table Orders
2022-07-04 23:14:23,276 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=order_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,278 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property orderId with lazy=false
2022-07-04 23:14:23,278 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:orderId]
2022-07-04 23:14:23,279 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for orderId
2022-07-04 23:14:23,279 DEBUG (PropertyBinder.java:266) - Building property orderId
2022-07-04 23:14:23,280 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(order_id)]), orderId, identity, , ...)
2022-07-04 23:14:23,281 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=amount, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,281 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property amount with lazy=false
2022-07-04 23:14:23,282 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:amount]
2022-07-04 23:14:23,282 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for amount
2022-07-04 23:14:23,283 DEBUG (PropertyBinder.java:266) - Building property amount
2022-07-04 23:14:23,283 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concert_id', referencedColumn='', mappedBy=''}
2022-07-04 23:14:23,285 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=concert, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,291 DEBUG (PropertyBinder.java:266) - Building property concert
2022-07-04 23:14:23,296 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=concert_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,297 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concert_id with lazy=false
2022-07-04 23:14:23,297 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:concert_id]
2022-07-04 23:14:23,298 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concert_id
2022-07-04 23:14:23,298 DEBUG (PropertyBinder.java:266) - Building property concert_id
2022-07-04 23:14:23,299 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=customer_email, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,299 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property customerEmail with lazy=false
2022-07-04 23:14:23,300 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:customerEmail]
2022-07-04 23:14:23,300 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for customerEmail
2022-07-04 23:14:23,302 DEBUG (PropertyBinder.java:266) - Building property customerEmail
2022-07-04 23:14:23,302 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=customer_name, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,303 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property customerName with lazy=false
2022-07-04 23:14:23,303 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:customerName]
2022-07-04 23:14:23,305 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for customerName
2022-07-04 23:14:23,306 DEBUG (PropertyBinder.java:266) - Building property customerName
2022-07-04 23:14:23,307 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.ConcertSinger
2022-07-04 23:14:23,308 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 23:14:23,309 DEBUG (EntityBinder.java:430) - Import with entity name ConcertSinger
2022-07-04 23:14:23,309 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.ConcertSinger on table concert_singer
2022-07-04 23:14:23,315 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=concert_singer_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,316 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertSingerId with lazy=false
2022-07-04 23:14:23,317 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.ConcertSinger:concertSingerId]
2022-07-04 23:14:23,318 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertSingerId
2022-07-04 23:14:23,319 DEBUG (PropertyBinder.java:266) - Building property concertSingerId
2022-07-04 23:14:23,320 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(concert_singer_id)]), concertSingerId, identity, , ...)
2022-07-04 23:14:23,323 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concert_id', referencedColumn='', mappedBy=''}
2022-07-04 23:14:23,324 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=concert, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,324 DEBUG (PropertyBinder.java:266) - Building property concert
2022-07-04 23:14:23,326 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=concert_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,326 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertId with lazy=false
2022-07-04 23:14:23,327 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.ConcertSinger:concertId]
2022-07-04 23:14:23,327 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertId
2022-07-04 23:14:23,328 DEBUG (PropertyBinder.java:266) - Building property concertId
2022-07-04 23:14:23,329 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='singer_id', referencedColumn='', mappedBy=''}
2022-07-04 23:14:23,330 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=singer, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,330 DEBUG (PropertyBinder.java:266) - Building property singer
2022-07-04 23:14:23,330 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=singer_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,331 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property singerId with lazy=false
2022-07-04 23:14:23,332 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.ConcertSinger:singerId]
2022-07-04 23:14:23,332 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for singerId
2022-07-04 23:14:23,333 DEBUG (PropertyBinder.java:266) - Building property singerId
2022-07-04 23:14:23,334 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.Singer
2022-07-04 23:14:23,336 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 23:14:23,336 DEBUG (EntityBinder.java:430) - Import with entity name Singer
2022-07-04 23:14:23,338 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.Singer on table Singer
2022-07-04 23:14:23,343 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=singer_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,343 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property singerId with lazy=false
2022-07-04 23:14:23,345 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Singer:singerId]
2022-07-04 23:14:23,346 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for singerId
2022-07-04 23:14:23,346 DEBUG (PropertyBinder.java:266) - Building property singerId
2022-07-04 23:14:23,347 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(singer_id)]), singerId, identity, , ...)
2022-07-04 23:14:23,347 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='singer'}
2022-07-04 23:14:23,348 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=concertSinger, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,349 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=null, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,351 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=element, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,351 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=concertSinger_KEY, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,352 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concertSinger_KEY', referencedColumn='null', mappedBy='null'}
2022-07-04 23:14:23,353 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='singer'}
2022-07-04 23:14:23,353 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='singer'}
2022-07-04 23:14:23,354 DEBUG (CollectionBinder.java:449) - Collection role: concert.model.entity.Singer.concertSinger
2022-07-04 23:14:23,355 DEBUG (PropertyBinder.java:266) - Building property concertSinger
2022-07-04 23:14:23,356 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=detail, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,356 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property detail with lazy=false
2022-07-04 23:14:23,357 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Singer:detail]
2022-07-04 23:14:23,358 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for detail
2022-07-04 23:14:23,358 DEBUG (PropertyBinder.java:266) - Building property detail
2022-07-04 23:14:23,359 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=singer_name, insertable=true, updatable=true, unique=false}
2022-07-04 23:14:23,359 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property singerName with lazy=false
2022-07-04 23:14:23,360 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Singer:singerName]
2022-07-04 23:14:23,361 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for singerName
2022-07-04 23:14:23,361 DEBUG (PropertyBinder.java:266) - Building property singerName
2022-07-04 23:14:23,365 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertId
2022-07-04 23:14:23,367 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertName
2022-07-04 23:14:23,367 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for contents
2022-07-04 23:14:23,368 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for date
2022-07-04 23:14:23,369 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for location
2022-07-04 23:14:23,369 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for maxSeats
2022-07-04 23:14:23,369 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for orderId
2022-07-04 23:14:23,370 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for amount
2022-07-04 23:14:23,370 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concert_id
2022-07-04 23:14:23,371 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for customerEmail
2022-07-04 23:14:23,372 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for customerName
2022-07-04 23:14:23,372 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertSingerId
2022-07-04 23:14:23,372 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertId
2022-07-04 23:14:23,372 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for singerId
2022-07-04 23:14:23,374 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for singerId
2022-07-04 23:14:23,374 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for detail
2022-07-04 23:14:23,374 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for singerName
2022-07-04 23:14:23,392 DEBUG (PrimaryKey.java:35) - Forcing column [concert_id] to be non-null as it is part of the primary key for table [concert]
2022-07-04 23:14:23,393 DEBUG (PrimaryKey.java:35) - Forcing column [order_id] to be non-null as it is part of the primary key for table [orders]
2022-07-04 23:14:23,394 DEBUG (PrimaryKey.java:35) - Forcing column [concert_singer_id] to be non-null as it is part of the primary key for table [concert_singer]
2022-07-04 23:14:23,394 DEBUG (PrimaryKey.java:35) - Forcing column [singer_id] to be non-null as it is part of the primary key for table [singer]
2022-07-04 23:14:23,395 DEBUG (CollectionSecondPass.java:51) - Second pass for collection: concert.model.entity.Concert.concertSinger
2022-07-04 23:14:23,398 DEBUG (CollectionBinder.java:898) - Binding a OneToMany: concert.model.entity.Concert.concertSinger through a foreign key
2022-07-04 23:14:23,401 DEBUG (CollectionBinder.java:936) - Mapping collection: concert.model.entity.Concert.concertSinger -> concert_singer
2022-07-04 23:14:23,404 DEBUG (TableBinder.java:565) - Retrieving property concert.model.entity.ConcertSinger.concert
2022-07-04 23:14:23,405 DEBUG (CollectionSecondPass.java:68) - Mapped collection key: concert_id, one-to-many: concert.model.entity.ConcertSinger
2022-07-04 23:14:23,406 DEBUG (CollectionSecondPass.java:51) - Second pass for collection: concert.model.entity.Concert.order
2022-07-04 23:14:23,406 DEBUG (CollectionBinder.java:898) - Binding a OneToMany: concert.model.entity.Concert.order through a foreign key
2022-07-04 23:14:23,407 DEBUG (CollectionBinder.java:936) - Mapping collection: concert.model.entity.Concert.order -> Orders
2022-07-04 23:14:23,407 DEBUG (TableBinder.java:565) - Retrieving property concert.model.entity.Orders.concert
2022-07-04 23:14:23,412 DEBUG (CollectionSecondPass.java:68) - Mapped collection key: concert_id, one-to-many: concert.model.entity.Orders
2022-07-04 23:14:23,413 DEBUG (CollectionSecondPass.java:51) - Second pass for collection: concert.model.entity.Singer.concertSinger
2022-07-04 23:14:23,414 DEBUG (CollectionBinder.java:898) - Binding a OneToMany: concert.model.entity.Singer.concertSinger through a foreign key
2022-07-04 23:14:23,414 DEBUG (CollectionBinder.java:936) - Mapping collection: concert.model.entity.Singer.concertSinger -> concert_singer
2022-07-04 23:14:23,414 DEBUG (TableBinder.java:565) - Retrieving property concert.model.entity.ConcertSinger.singer
2022-07-04 23:14:23,416 DEBUG (CollectionSecondPass.java:68) - Mapped collection key: singer_id, one-to-many: concert.model.entity.ConcertSinger
2022-07-04 23:14:23,416 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 23:14:23,423 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Singer
2022-07-04 23:14:23,424 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 23:14:23,429 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 23:14:23,430 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Singer
2022-07-04 23:14:23,430 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 23:14:23,533 DEBUG (SessionFactoryImpl.java:196) - Building session factory
2022-07-04 23:14:23,535 DEBUG (Settings.java:70) - SessionFactory name : null
2022-07-04 23:14:23,536 DEBUG (Settings.java:71) - Automatic flush during beforeCompletion(): enabled
2022-07-04 23:14:23,537 DEBUG (Settings.java:72) - Automatic session close at end of transaction: disabled
2022-07-04 23:14:23,537 DEBUG (Settings.java:74) - Statistics: disabled
2022-07-04 23:14:23,537 DEBUG (Settings.java:76) - Deleted entity synthetic identifier rollback: disabled
2022-07-04 23:14:23,538 DEBUG (Settings.java:77) - Default entity-mode: pojo
2022-07-04 23:14:23,538 DEBUG (Settings.java:78) - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2022-07-04 23:14:23,538 DEBUG (Settings.java:79) - Allow initialization of lazy state outside session : disabled
2022-07-04 23:14:23,539 DEBUG (Settings.java:81) - Using BatchFetchStyle : LEGACY
2022-07-04 23:14:23,539 DEBUG (Settings.java:82) - Default batch fetch size: -1
2022-07-04 23:14:23,539 DEBUG (Settings.java:83) - Maximum outer join fetch depth: 2
2022-07-04 23:14:23,540 DEBUG (Settings.java:84) - Default null ordering: NONE
2022-07-04 23:14:23,540 DEBUG (Settings.java:85) - Order SQL updates by primary key: disabled
2022-07-04 23:14:23,540 DEBUG (Settings.java:86) - Order SQL inserts for batching: disabled
2022-07-04 23:14:23,541 DEBUG (Settings.java:88) - multi-tenancy strategy : NONE
2022-07-04 23:14:23,542 DEBUG (Settings.java:90) - JTA Track by Thread: enabled
2022-07-04 23:14:23,542 DEBUG (Settings.java:92) - Query language substitutions: {}
2022-07-04 23:14:23,542 DEBUG (Settings.java:93) - Named query checking : enabled
2022-07-04 23:14:23,543 DEBUG (Settings.java:95) - Second-level cache: disabled
2022-07-04 23:14:23,543 DEBUG (Settings.java:96) - Second-level query cache: disabled
2022-07-04 23:14:23,543 DEBUG (Settings.java:97) - Second-level query cache factory: null
2022-07-04 23:14:23,544 DEBUG (Settings.java:98) - Second-level cache region prefix: null
2022-07-04 23:14:23,544 DEBUG (Settings.java:99) - Optimize second-level cache for minimal puts: disabled
2022-07-04 23:14:23,544 DEBUG (Settings.java:100) - Structured second-level cache entries: disabled
2022-07-04 23:14:23,544 DEBUG (Settings.java:101) - Second-level cache direct-reference entries: disabled
2022-07-04 23:14:23,545 DEBUG (Settings.java:102) - Automatic eviction of collection cache: disabled
2022-07-04 23:14:23,545 DEBUG (Settings.java:104) - JDBC batch size: 15
2022-07-04 23:14:23,545 DEBUG (Settings.java:105) - JDBC batch updates for versioned data: enabled
2022-07-04 23:14:23,545 DEBUG (Settings.java:106) - Scrollable result sets: enabled
2022-07-04 23:14:23,545 DEBUG (Settings.java:107) - Wrap result sets: disabled
2022-07-04 23:14:23,546 DEBUG (Settings.java:108) - JDBC3 getGeneratedKeys(): enabled
2022-07-04 23:14:23,546 DEBUG (Settings.java:109) - JDBC result set fetch size: null
2022-07-04 23:14:23,546 DEBUG (Settings.java:110) - Connection release mode: AFTER_TRANSACTION
2022-07-04 23:14:23,546 DEBUG (Settings.java:111) - Generate SQL with comments: disabled
2022-07-04 23:14:23,546 DEBUG (Settings.java:113) - JPA compliance - query : 
2022-07-04 23:14:23,547 DEBUG (Settings.java:114) - JPA compliance - closed-handling : 
2022-07-04 23:14:23,547 DEBUG (Settings.java:115) - JPA compliance - lists : 
2022-07-04 23:14:23,547 DEBUG (Settings.java:116) - JPA compliance - transactions : 
2022-07-04 23:14:23,767 DEBUG (SessionFactoryImpl.java:251) - Session factory constructed with filter configurations : {}
2022-07-04 23:14:23,768 DEBUG (SessionFactoryImpl.java:252) - Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, hibernate.format_sql=true, java.specification.version=11, sun.cpu.isalist=amd64, sun.jnu.encoding=MS949, hibernate.dialect=org.hibernate.dialect.MySQL8Dialect, java.class.path=C:\Users\신동혁\playdata\20220509_lab\03.web\concertProject\concert\target\classes;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\annotations-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-ant.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-ha.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-ssi.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-storeconfig.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-tribes.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\ecj-4.20.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\el-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jasper-el.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jasper.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jaspic-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jsp-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\servlet-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-coyote.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-dbcp.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-cs.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-de.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-es.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-fr.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-ja.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-ko.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-pt-BR.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-ru.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-zh-CN.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-jdbc.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-jni.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-util-scan.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-util.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-websocket.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\websocket-api.jar;C:\Users\신동혁\.m2\repository\javax\persistence\javax.persistence-api\2.2\javax.persistence-api-2.2.jar;C:\Users\신동혁\.m2\repository\org\hibernate\hibernate-entitymanager\5.4.2.Final\hibernate-entitymanager-5.4.2.Final.jar;C:\Users\신동혁\.m2\repository\org\jboss\logging\jboss-logging\3.3.2.Final\jboss-logging-3.3.2.Final.jar;C:\Users\신동혁\.m2\repository\org\hibernate\hibernate-core\5.4.2.Final\hibernate-core-5.4.2.Final.jar;C:\Users\신동혁\.m2\repository\org\javassist\javassist\3.24.0-GA\javassist-3.24.0-GA.jar;C:\Users\신동혁\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\신동혁\.m2\repository\org\jboss\jandex\2.0.5.Final\jandex-2.0.5.Final.jar;C:\Users\신동혁\.m2\repository\com\fasterxml\classmate\1.3.4\classmate-1.3.4.jar;C:\Users\신동혁\.m2\repository\javax\activation\javax.activation-api\1.2.0\javax.activation-api-1.2.0.jar;C:\Users\신동혁\.m2\repository\javax\xml\bind\jaxb-api\2.3.1\jaxb-api-2.3.1.jar;C:\Users\신동혁\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.1\jaxb-runtime-2.3.1.jar;C:\Users\신동혁\.m2\repository\org\glassfish\jaxb\txw2\2.3.1\txw2-2.3.1.jar;C:\Users\신동혁\.m2\repository\com\sun\istack\istack-commons-runtime\3.0.7\istack-commons-runtime-3.0.7.jar;C:\Users\신동혁\.m2\repository\org\jvnet\staxex\stax-ex\1.8\stax-ex-1.8.jar;C:\Users\신동혁\.m2\repository\com\sun\xml\fastinfoset\FastInfoset\1.2.15\FastInfoset-1.2.15.jar;C:\Users\신동혁\.m2\repository\org\dom4j\dom4j\2.1.1\dom4j-2.1.1.jar;C:\Users\신동혁\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.1.0.Final\hibernate-commons-annotations-5.1.0.Final.jar;C:\Users\신동혁\.m2\repository\net\bytebuddy\byte-buddy\1.9.10\byte-buddy-1.9.10.jar;C:\Users\신동혁\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.1.1.Final\jboss-transaction-api_1.2_spec-1.1.1.Final.jar;C:\Users\신동혁\.m2\repository\junit\junit\4.13.2\junit-4.13.2.jar;C:\Users\신동혁\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\신동혁\.m2\repository\org\projectlombok\lombok\1.18.24\lombok-1.18.24.jar;C:\Users\신동혁\.m2\repository\com\jslsolucoes\ojdbc6\11.2.0.1.0\ojdbc6-11.2.0.1.0.jar;C:\Users\신동혁\.m2\repository\mysql\mysql-connector-java\8.0.29\mysql-connector-java-8.0.29.jar;C:\Users\신동혁\.m2\repository\com\google\protobuf\protobuf-java\3.19.4\protobuf-java-3.19.4.jar;C:\Users\신동혁\.m2\repository\org\slf4j\slf4j-api\1.7.5\slf4j-api-1.7.5.jar;C:\Users\신동혁\.m2\repository\org\slf4j\slf4j-log4j12\1.7.5\slf4j-log4j12-1.7.5.jar;C:\Users\신동혁\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\신동혁\.m2\repository\org\modelmapper\modelmapper\2.4.0\modelmapper-2.4.0.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Asia/Seoul, javax.persistence.jdbc.url=jdbc:mysql://localhost/playdata?characterEncoding=UTF-8, javax.persistence.jdbc.user=****, os.name=Windows 10, java.vm.specification.version=11, sun.java.launcher=SUN_STANDARD, user.country=KR, sun.boot.library.path=C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11\bin, sun.java.command=cocert.model.dao.Test, jdk.debug=release, sun.cpu.endian=little, user.home=C:\Users\신동혁, user.language=ko, java.specification.vendor=Oracle Corporation, java.version.date=2018-09-25, java.home=C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11, file.separator=\, java.vm.compressedOopsMode=32-bit, line.separator=
, java.specification.name=Java Platform API Specification, java.vm.specification.vendor=Oracle Corporation, hibernate.transaction.coordinator_class=class org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, javax.persistence.jdbc.driver=com.mysql.cj.jdbc.Driver, hibernate.hbm2ddl.auto=none, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=11+28, user.name=Shin, path.separator=;, hibernate.connection.username=****, os.version=10.0, java.runtime.name=OpenJDK Runtime Environment, hibernate.connection.url=jdbc:mysql://localhost/playdata?characterEncoding=UTF-8, file.encoding=UTF-8, hibernate.ejb.persistenceUnitName=dbinfo, java.vm.name=OpenJDK 64-Bit Server VM, hibernate.show_sql=true, java.vendor.version=18.9, hibernate.connection.driver_class=com.mysql.cj.jdbc.Driver, java.vendor.url.bug=http://bugreport.java.com/bugreport/, java.io.tmpdir=C:\Users\신동혁\AppData\Local\Temp\, java.version=11, user.dir=C:\Users\신동혁\playdata\20220509_lab\03.web\concertProject\concert, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.password=****, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@2c58dcb1, java.library.path=C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Users/신동혁/playdata/20220509_lab/99.devEnv/eclipse//plugins/org.eclipse.justj.openjdk.hotspot.jre.full.win32.x86_64_16.0.1.v20210528-1205/jre/bin/server;C:/Users/신동혁/playdata/20220509_lab/99.devEnv/eclipse//plugins/org.eclipse.justj.openjdk.hotspot.jre.full.win32.x86_64_16.0.1.v20210528-1205/jre/bin;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11\bin;C:\oraclexe\app\oracle\product\11.2.0\server\bin;C:\Program Files\MySQL\MySQL Server 8.0\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\Bandizip\;C:\Program Files\Git\cmd;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\신동혁\AppData\Local\Programs\Python\Python39\Scripts\;C:\Users\신동혁\AppData\Local\Programs\Python\Python39\;C:\Users\신동혁\AppData\Local\Microsoft\WindowsApps;C:\Users\신동혁\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\eclipse;;., java.vendor=Oracle Corporation, java.vm.info=mixed mode, java.vm.version=11+28, hibernate.bytecode.use_reflection_optimizer=false, sun.io.unicode.encoding=UnicodeLittle, javax.persistence.jdbc.password=****, java.class.version=55.0}
2022-07-04 23:14:23,812 DEBUG (JaccIntegrator.java:80) - Skipping JACC integration as it was not enabled
2022-07-04 23:14:23,814 DEBUG (SessionFactoryImpl.java:291) - Instantiated session factory
2022-07-04 23:14:23,815 DEBUG (TypeConfiguration.java:157) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@340b7ef6] to SessionFactoryImpl [org.hibernate.internal.SessionFactoryImpl@5fe7f967]
2022-07-04 23:14:23,944 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Concert] is safe
2022-07-04 23:14:23,945 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Concert
2022-07-04 23:14:23,989 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Concert] is safe
2022-07-04 23:14:23,989 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Concert
2022-07-04 23:14:24,902 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Orders] is safe
2022-07-04 23:14:24,902 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Orders
2022-07-04 23:14:24,905 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Orders] is safe
2022-07-04 23:14:24,906 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Orders
2022-07-04 23:14:24,985 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.ConcertSinger] is safe
2022-07-04 23:14:24,985 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.ConcertSinger
2022-07-04 23:14:24,986 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.ConcertSinger] is safe
2022-07-04 23:14:24,987 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.ConcertSinger
2022-07-04 23:14:25,047 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Singer] is safe
2022-07-04 23:14:25,048 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Singer
2022-07-04 23:14:25,052 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Singer] is safe
2022-07-04 23:14:25,055 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Singer
2022-07-04 23:14:25,200 DEBUG (AbstractCollectionPersister.java:688) - Static SQL for collection: concert.model.entity.Singer.concertSinger
2022-07-04 23:14:25,201 DEBUG (AbstractCollectionPersister.java:690) -  Row insert: update concert_singer set singer_id=? where concert_singer_id=?
2022-07-04 23:14:25,203 DEBUG (AbstractCollectionPersister.java:693) -  Row update: update concert_singer set  where concert_singer_id=?
2022-07-04 23:14:25,204 DEBUG (AbstractCollectionPersister.java:696) -  Row delete: update concert_singer set singer_id=null where singer_id=? and concert_singer_id=?
2022-07-04 23:14:25,204 DEBUG (AbstractCollectionPersister.java:699) -  One-shot delete: update concert_singer set singer_id=null where singer_id=?
2022-07-04 23:14:25,206 DEBUG (AbstractCollectionPersister.java:688) - Static SQL for collection: concert.model.entity.Concert.order
2022-07-04 23:14:25,207 DEBUG (AbstractCollectionPersister.java:690) -  Row insert: update Orders set concert_id=? where order_id=?
2022-07-04 23:14:25,208 DEBUG (AbstractCollectionPersister.java:693) -  Row update: update Orders set  where order_id=?
2022-07-04 23:14:25,208 DEBUG (AbstractCollectionPersister.java:696) -  Row delete: update Orders set concert_id=null where concert_id=? and order_id=?
2022-07-04 23:14:25,209 DEBUG (AbstractCollectionPersister.java:699) -  One-shot delete: update Orders set concert_id=null where concert_id=?
2022-07-04 23:14:25,211 DEBUG (AbstractCollectionPersister.java:688) - Static SQL for collection: concert.model.entity.Concert.concertSinger
2022-07-04 23:14:25,213 DEBUG (AbstractCollectionPersister.java:690) -  Row insert: update concert_singer set concert_id=? where concert_singer_id=?
2022-07-04 23:14:25,214 DEBUG (AbstractCollectionPersister.java:693) -  Row update: update concert_singer set  where concert_singer_id=?
2022-07-04 23:14:25,214 DEBUG (AbstractCollectionPersister.java:696) -  Row delete: update concert_singer set concert_id=null where concert_id=? and concert_singer_id=?
2022-07-04 23:14:25,215 DEBUG (AbstractCollectionPersister.java:699) -  One-shot delete: update concert_singer set concert_id=null where concert_id=?
2022-07-04 23:14:25,233 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.Concert
2022-07-04 23:14:25,233 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select concert_id from Concert where concert_id =?
2022-07-04 23:14:25,234 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select concert_.concert_id, concert_.concert_name as concert_2_0_, concert_.contents as contents3_0_, concert_.date as date4_0_, concert_.location as location5_0_, concert_.max_seats as max_seat6_0_ from Concert concert_ where concert_.concert_id=?
2022-07-04 23:14:25,235 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Concert (concert_name, contents, date, location, max_seats, concert_id) values (?, ?, ?, ?, ?, ?)
2022-07-04 23:14:25,236 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Concert set concert_name=?, contents=?, date=?, location=?, max_seats=? where concert_id=?
2022-07-04 23:14:25,238 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Concert where concert_id=?
2022-07-04 23:14:25,238 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into Concert (concert_name, contents, date, location, max_seats) values (?, ?, ?, ?, ?)
2022-07-04 23:14:25,353 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4e642ee1]
2022-07-04 23:14:25,357 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertName
2022-07-04 23:14:25,357 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 23:14:25,371 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@751ae8a4]
2022-07-04 23:14:25,377 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7e307087]
2022-07-04 23:14:25,379 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : contents
2022-07-04 23:14:25,380 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : date
2022-07-04 23:14:25,380 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : location
2022-07-04 23:14:25,381 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : maxSeats
2022-07-04 23:14:25,382 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : order
2022-07-04 23:14:25,383 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@4bcaa195]
2022-07-04 23:14:25,384 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@d08edc5]
2022-07-04 23:14:25,385 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:14:25,428 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:14:25,443 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Concert)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:0>, path=concert.model.entity.Concert)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Concert.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Concert.concertSinger.<elements>)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.order, querySpaceUid=<gen:3>, path=concert.model.entity.Concert.order)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.Orders, querySpaceUid=<gen:4>, path=concert.model.entity.Concert.order.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Concert)
          - SQL table alias mapping - concert0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_0_0_}

2022-07-04 23:14:25,450 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Concert [NONE]: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 23:14:25,452 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7c2924d7]
2022-07-04 23:14:25,453 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertName
2022-07-04 23:14:25,455 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 23:14:25,456 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6587305a]
2022-07-04 23:14:25,457 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@abbe000]
2022-07-04 23:14:25,458 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : contents
2022-07-04 23:14:25,458 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : date
2022-07-04 23:14:25,458 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : location
2022-07-04 23:14:25,459 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : maxSeats
2022-07-04 23:14:25,459 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : order
2022-07-04 23:14:25,460 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@3f81621c]
2022-07-04 23:14:25,461 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5b9499fe]
2022-07-04 23:14:25,462 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:14:25,463 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:14:25,465 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Concert)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:0>, path=concert.model.entity.Concert)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Concert.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Concert.concertSinger.<elements>)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.order, querySpaceUid=<gen:3>, path=concert.model.entity.Concert.order)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.Orders, querySpaceUid=<gen:4>, path=concert.model.entity.Concert.order.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Concert)
          - SQL table alias mapping - concert0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_0_0_}

2022-07-04 23:14:25,465 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Concert [READ]: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 23:14:25,506 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.Concert: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 23:14:25,508 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.Concert: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 23:14:25,509 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.Orders
2022-07-04 23:14:25,509 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select order_id from Orders where order_id =?
2022-07-04 23:14:25,510 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select orders_.order_id, orders_.amount as amount2_2_, orders_.concert_id as concert_3_2_, orders_.customer_email as customer4_2_, orders_.customer_name as customer5_2_ from Orders orders_ where orders_.order_id=?
2022-07-04 23:14:25,511 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Orders (amount, concert_id, customer_email, customer_name, order_id) values (?, ?, ?, ?, ?)
2022-07-04 23:14:25,514 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Orders set amount=?, concert_id=?, customer_email=?, customer_name=? where order_id=?
2022-07-04 23:14:25,514 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Orders where order_id=?
2022-07-04 23:14:25,515 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into Orders (amount, concert_id, customer_email, customer_name) values (?, ?, ?, ?)
2022-07-04 23:14:25,515 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@38cedb7d]
2022-07-04 23:14:25,517 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : amount
2022-07-04 23:14:25,517 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:14:25,519 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2acdcce8]
2022-07-04 23:14:25,520 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert_id
2022-07-04 23:14:25,521 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerEmail
2022-07-04 23:14:25,522 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerName
2022-07-04 23:14:25,522 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:14:25,522 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:14:25,524 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Orders)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Orders, querySpaceUid=<gen:0>, path=concert.model.entity.Orders)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.Orders.concert)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {order_id1_2_0_}

2022-07-04 23:14:25,525 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Orders [NONE]: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 23:14:25,525 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@d5bb1c4]
2022-07-04 23:14:25,526 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : amount
2022-07-04 23:14:25,526 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:14:25,528 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@465b38e6]
2022-07-04 23:14:25,528 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert_id
2022-07-04 23:14:25,529 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerEmail
2022-07-04 23:14:25,529 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerName
2022-07-04 23:14:25,530 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:14:25,530 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:14:25,532 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Orders)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Orders, querySpaceUid=<gen:0>, path=concert.model.entity.Orders)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.Orders.concert)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {order_id1_2_0_}

2022-07-04 23:14:25,533 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Orders [READ]: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 23:14:25,535 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.Orders: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 23:14:25,536 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.Orders: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 23:14:25,538 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.ConcertSinger
2022-07-04 23:14:25,538 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select concert_singer_id from concert_singer where concert_singer_id =?
2022-07-04 23:14:25,539 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select concertsin_.concert_singer_id, concertsin_.concert_id as concert_2_1_, concertsin_.singer_id as singer_i3_1_ from concert_singer concertsin_ where concertsin_.concert_singer_id=?
2022-07-04 23:14:25,539 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into concert_singer (concert_id, singer_id, concert_singer_id) values (?, ?, ?)
2022-07-04 23:14:25,539 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update concert_singer set concert_id=?, singer_id=? where concert_singer_id=?
2022-07-04 23:14:25,540 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from concert_singer where concert_singer_id=?
2022-07-04 23:14:25,540 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into concert_singer (concert_id, singer_id) values (?, ?)
2022-07-04 23:14:25,540 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4b960b5b]
2022-07-04 23:14:25,542 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:14:25,544 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7bd96822]
2022-07-04 23:14:25,545 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 23:14:25,546 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 23:14:25,547 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@64dae3b7]
2022-07-04 23:14:25,547 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 23:14:25,548 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:14:25,549 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:14:25,550 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.ConcertSinger)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:0>, path=concert.model.entity.ConcertSinger)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.ConcertSinger.concert)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:2>, path=concert.model.entity.ConcertSinger.singer)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.ConcertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_1_0_}

2022-07-04 23:14:25,553 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.ConcertSinger [NONE]: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 23:14:25,553 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1fedf0a4]
2022-07-04 23:14:25,553 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:14:25,555 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2ee48610]
2022-07-04 23:14:25,556 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 23:14:25,557 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 23:14:25,557 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1d901f20]
2022-07-04 23:14:25,558 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 23:14:25,558 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:14:25,559 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:14:25,561 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.ConcertSinger)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:0>, path=concert.model.entity.ConcertSinger)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.ConcertSinger.concert)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:2>, path=concert.model.entity.ConcertSinger.singer)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.ConcertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_1_0_}

2022-07-04 23:14:25,561 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.ConcertSinger [READ]: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 23:14:25,563 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.ConcertSinger: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 23:14:25,564 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.ConcertSinger: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 23:14:25,565 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.Singer
2022-07-04 23:14:25,566 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select singer_id from Singer where singer_id =?
2022-07-04 23:14:25,566 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select singer_.singer_id, singer_.detail as detail2_3_, singer_.singer_name as singer_n3_3_ from Singer singer_ where singer_.singer_id=?
2022-07-04 23:14:25,567 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Singer (detail, singer_name, singer_id) values (?, ?, ?)
2022-07-04 23:14:25,570 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Singer set detail=?, singer_name=? where singer_id=?
2022-07-04 23:14:25,571 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Singer where singer_id=?
2022-07-04 23:14:25,571 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into Singer (detail, singer_name) values (?, ?)
2022-07-04 23:14:25,573 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6d08b4e6]
2022-07-04 23:14:25,573 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 23:14:25,573 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1acb74ad]
2022-07-04 23:14:25,574 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7bf01cb]
2022-07-04 23:14:25,575 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : detail
2022-07-04 23:14:25,576 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerName
2022-07-04 23:14:25,576 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:14:25,578 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:14:25,579 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Singer)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:0>, path=concert.model.entity.Singer)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Singer.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Singer.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Singer.concertSinger.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Singer)
          - SQL table alias mapping - singer0_
          - alias suffix - 0_
          - suffixed key columns - {singer_i1_3_0_}

2022-07-04 23:14:25,580 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Singer [NONE]: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 23:14:25,580 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2f382a5e]
2022-07-04 23:14:25,581 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 23:14:25,581 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@539a138b]
2022-07-04 23:14:25,582 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2cd4e16a]
2022-07-04 23:14:25,583 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : detail
2022-07-04 23:14:25,583 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerName
2022-07-04 23:14:25,584 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:14:25,585 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:14:25,586 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Singer)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:0>, path=concert.model.entity.Singer)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Singer.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Singer.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Singer.concertSinger.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Singer)
          - SQL table alias mapping - singer0_
          - alias suffix - 0_
          - suffixed key columns - {singer_i1_3_0_}

2022-07-04 23:14:25,588 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Singer [READ]: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 23:14:25,589 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.Singer: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 23:14:25,590 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.Singer: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 23:14:25,608 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@7affc159]
2022-07-04 23:14:25,608 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1682c08c]
2022-07-04 23:14:25,618 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:14:25,619 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2f14b0f6]
2022-07-04 23:14:25,619 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 23:14:25,620 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 23:14:25,620 DEBUG (MetamodelGraphWalker.java:154) - Property path deemed to be circular : singer
2022-07-04 23:14:25,620 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 23:14:25,621 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:14:25,633 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:14:25,635 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(collection=concert.model.entity.Singer.concertSinger)
    - Returns
       - CollectionReturnImpl(collection=concert.model.entity.Singer.concertSinger, querySpaceUid=<gen:0>, path=[concert.model.entity.Singer.concertSinger])
          - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:1>, path=[concert.model.entity.Singer.concertSinger].<elements>)
             - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:2>, path=[concert.model.entity.Singer.concertSinger].<elements>.concert)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=concert.model.entity.Singer.concertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {singer_i3_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - concert_1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=concert.model.entity.ConcertSinger)
                - SQL table alias mapping - concertsin0_
                - alias suffix - 1_
                - suffixed key columns - {concert_1_1_1_}

2022-07-04 23:14:25,637 DEBUG (CollectionLoader.java:83) - Static select for collection concert.model.entity.Singer.concertSinger: select concertsin0_.singer_id as singer_i3_1_0_, concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_singer_id as concert_1_1_1_, concertsin0_.concert_id as concert_2_1_1_, concertsin0_.singer_id as singer_i3_1_1_ from concert_singer concertsin0_ where concertsin0_.singer_id=?
2022-07-04 23:14:25,638 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@273a5a8a]
2022-07-04 23:14:25,638 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1823b9c4]
2022-07-04 23:14:25,639 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : amount
2022-07-04 23:14:25,640 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:14:25,640 DEBUG (MetamodelGraphWalker.java:154) - Property path deemed to be circular : concert
2022-07-04 23:14:25,640 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert_id
2022-07-04 23:14:25,642 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerEmail
2022-07-04 23:14:25,642 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerName
2022-07-04 23:14:25,642 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:14:25,643 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:14:25,644 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(collection=concert.model.entity.Concert.order)
    - Returns
       - CollectionReturnImpl(collection=concert.model.entity.Concert.order, querySpaceUid=<gen:0>, path=[concert.model.entity.Concert.order])
          - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.Orders, querySpaceUid=<gen:1>, path=[concert.model.entity.Concert.order].<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=concert.model.entity.Concert.order)
          - SQL table alias mapping - order0_
          - alias suffix - 0_
          - suffixed key columns - {concert_3_2_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - order_id1_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=concert.model.entity.Orders)
                - SQL table alias mapping - order0_
                - alias suffix - 1_
                - suffixed key columns - {order_id1_2_1_}

2022-07-04 23:14:25,644 DEBUG (CollectionLoader.java:83) - Static select for collection concert.model.entity.Concert.order: select order0_.concert_id as concert_3_2_0_, order0_.order_id as order_id1_2_0_, order0_.order_id as order_id1_2_1_, order0_.amount as amount2_2_1_, order0_.concert_id as concert_3_2_1_, order0_.customer_email as customer4_2_1_, order0_.customer_name as customer5_2_1_ from Orders order0_ where order0_.concert_id=?
2022-07-04 23:14:25,645 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@adcfad9]
2022-07-04 23:14:25,645 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@fb49fdf]
2022-07-04 23:14:25,645 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:14:25,646 DEBUG (MetamodelGraphWalker.java:154) - Property path deemed to be circular : concert
2022-07-04 23:14:25,647 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 23:14:25,647 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 23:14:25,648 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@10c47c79]
2022-07-04 23:14:25,649 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 23:14:25,649 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:14:25,650 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:14:25,651 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(collection=concert.model.entity.Concert.concertSinger)
    - Returns
       - CollectionReturnImpl(collection=concert.model.entity.Concert.concertSinger, querySpaceUid=<gen:0>, path=[concert.model.entity.Concert.concertSinger])
          - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:1>, path=[concert.model.entity.Concert.concertSinger].<elements>)
             - EntityAttributeFetchImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:2>, path=[concert.model.entity.Concert.concertSinger].<elements>.singer)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=concert.model.entity.Concert.concertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {concert_2_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - concert_1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=concert.model.entity.ConcertSinger)
                - SQL table alias mapping - concertsin0_
                - alias suffix - 1_
                - suffixed key columns - {concert_1_1_1_}

2022-07-04 23:14:25,652 DEBUG (CollectionLoader.java:83) - Static select for collection concert.model.entity.Concert.concertSinger: select concertsin0_.concert_id as concert_2_1_0_, concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_singer_id as concert_1_1_1_, concertsin0_.concert_id as concert_2_1_1_, concertsin0_.singer_id as singer_i3_1_1_ from concert_singer concertsin0_ where concertsin0_.concert_id=?
2022-07-04 23:14:25,742 DEBUG (SchemaManagementToolCoordinator.java:57) - No actions specified; doing nothing
2022-07-04 23:14:25,743 DEBUG (JtaPlatformInitiator.java:43) - No JtaPlatform was specified, checking resolver
2022-07-04 23:14:25,744 DEBUG (JtaPlatformResolverInitiator.java:33) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2022-07-04 23:14:25,758 DEBUG (StandardJtaPlatformResolver.java:137) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2022-07-04 23:14:25,759  INFO (JtaPlatformInitiator.java:52) - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2022-07-04 23:14:25,763 DEBUG (NamedQueryRepository.java:151) - Checking 0 named HQL queries
2022-07-04 23:14:25,764 DEBUG (NamedQueryRepository.java:167) - Checking 0 named SQL queries
2022-07-04 23:14:25,767 DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@787508ca
2022-07-04 23:14:25,771 DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: a9942fdc-c0de-4fed-8a34-c9ad9402d6b2 (<unnamed>)
2022-07-04 23:14:25,772 DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2022-07-04 23:14:25,989 DEBUG (StatisticsInitiator.java:101) - Statistics initialized [enabled=false]
2022-07-04 23:14:26,013 DEBUG (TransactionImpl.java:56) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2022-07-04 23:14:26,014 DEBUG (TransactionImpl.java:84) - begin
2022-07-04 23:14:26,054 DEBUG (SqlStatementLogger.java:94) - 
    select
        concert0_.concert_id as concert_1_0_0_,
        concert0_.concert_name as concert_2_0_0_,
        concert0_.contents as contents3_0_0_,
        concert0_.date as date4_0_0_,
        concert0_.location as location5_0_0_,
        concert0_.max_seats as max_seat6_0_0_ 
    from
        Concert concert0_ 
    where
        concert0_.concert_id=?
2022-07-04 23:14:26,098 DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2022-07-04 23:14:26,100 DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2022-07-04 23:14:26,125 DEBUG (TwoPhaseLoad.java:145) - Resolving associations for [concert.model.entity.Concert#1]
2022-07-04 23:14:26,142 DEBUG (TwoPhaseLoad.java:288) - Done materializing entity [concert.model.entity.Concert#1]
2022-07-04 23:14:26,144 DEBUG (ResourceRegistryStandardImpl.java:87) - HHH000387: ResultSet's statement was not registered
2022-07-04 23:14:26,145 DEBUG (AbstractLoadPlanBasedEntityLoader.java:219) - Done entity load : concert.model.entity.Concert#1
2022-07-04 23:14:26,147 DEBUG (TransactionImpl.java:56) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2022-07-04 23:14:26,147 DEBUG (TransactionImpl.java:84) - begin
2022-07-04 23:14:26,298 DEBUG (SqlStatementLogger.java:94) - 
    SELECT
        * 
    FROM
        Concert c
2022-07-04 23:14:26,319 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 0
2022-07-04 23:14:26,320 DEBUG (Loader.java:1538) - Result row: 
2022-07-04 23:14:26,321 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 1
2022-07-04 23:14:26,321 DEBUG (Loader.java:1538) - Result row: 
2022-07-04 23:14:26,322 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 2
2022-07-04 23:14:26,323 DEBUG (Loader.java:1538) - Result row: 
2022-07-04 23:14:26,324 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 3
2022-07-04 23:14:26,324 DEBUG (Loader.java:1538) - Result row: 
2022-07-04 23:14:26,325 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 4
2022-07-04 23:14:26,325 DEBUG (Loader.java:1538) - Result row: 
2022-07-04 23:14:26,326 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 5
2022-07-04 23:14:26,326 DEBUG (Loader.java:1538) - Result row: 
2022-07-04 23:14:26,327 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 6
2022-07-04 23:14:26,327 DEBUG (Loader.java:1538) - Result row: 
2022-07-04 23:14:26,333 DEBUG (TransactionImpl.java:142) - rolling back
2022-07-04 23:14:26,336 DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2022-07-04 23:14:26,340 DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2022-07-04 23:15:39,631 DEBUG (HibernatePersistenceProvider.java:38) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2022-07-04 23:15:40,041 DEBUG (HibernatePersistenceProvider.java:88) - Located and parsed 1 persistence units; checking each
2022-07-04 23:15:40,046 DEBUG (HibernatePersistenceProvider.java:96) - Checking persistence-unit [name=dbinfo, explicit-provider=null] against incoming persistence unit name [dbinfo]
2022-07-04 23:15:40,049 DEBUG (ProviderChecker.java:95) - No PersistenceProvider explicitly requested, assuming Hibernate
2022-07-04 23:15:40,070 DEBUG (LogHelper.java:102) - PersistenceUnitInfo [
	name: dbinfo
	persistence provider classname: null
	classloader: null
	excludeUnlistedClasses: false
	JTA datasource: null
	Non JTA datasource: null
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/%ec%8b%a0%eb%8f%99%ed%98%81/playdata/20220509_lab/03.web/concertProject/concert/target/classes
	Shared Cache Mode: null
	Validation Mode: null
	Jar files URLs []
	Managed classes names [
		concert.model.entity.Concert
		concert.model.entity.ConcertSinger
		concert.model.entity.Orders
		concert.model.entity.Singer]
	Mapping files names []
	Properties [
		javax.persistence.jdbc.driver: com.mysql.cj.jdbc.Driver
		javax.persistence.jdbc.password: playdata
		hibernate.dialect: org.hibernate.dialect.MySQL8Dialect
		javax.persistence.jdbc.url: jdbc:mysql://localhost/playdata?characterEncoding=UTF-8
		hibernate.show_sql: true
		hibernate.hbm2ddl.auto: none
		hibernate.format_sql: true
		javax.persistence.jdbc.user: root]
2022-07-04 23:15:40,086 DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2022-07-04 23:15:40,094 DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2022-07-04 23:15:40,107 DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2022-07-04 23:15:40,280  INFO (Version.java:46) - HHH000412: Hibernate Core {5.4.2.Final}
2022-07-04 23:15:40,286 DEBUG (Environment.java:199) - HHH000206: hibernate.properties not found
2022-07-04 23:15:40,616 DEBUG (ServiceBinding.java:68) - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
2022-07-04 23:15:40,685 DEBUG (RegionFactoryInitiator.java:118) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2022-07-04 23:15:40,689 DEBUG (RegionFactoryInitiator.java:49) - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2022-07-04 23:15:40,754  INFO (JavaReflectionManager.java:49) - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2022-07-04 23:15:41,830 DEBUG (BasicTypeRegistry.java:156) - Adding type registration boolean -> org.hibernate.type.BooleanType@19b93fa8
2022-07-04 23:15:41,831 DEBUG (BasicTypeRegistry.java:156) - Adding type registration boolean -> org.hibernate.type.BooleanType@19b93fa8
2022-07-04 23:15:41,835 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@19b93fa8
2022-07-04 23:15:41,836 DEBUG (BasicTypeRegistry.java:156) - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@8ad6665
2022-07-04 23:15:41,837 DEBUG (BasicTypeRegistry.java:156) - Adding type registration true_false -> org.hibernate.type.TrueFalseType@bcef303
2022-07-04 23:15:41,838 DEBUG (BasicTypeRegistry.java:156) - Adding type registration yes_no -> org.hibernate.type.YesNoType@4f9a2c08
2022-07-04 23:15:41,841 DEBUG (BasicTypeRegistry.java:156) - Adding type registration byte -> org.hibernate.type.ByteType@386f0da3
2022-07-04 23:15:41,841 DEBUG (BasicTypeRegistry.java:156) - Adding type registration byte -> org.hibernate.type.ByteType@386f0da3
2022-07-04 23:15:41,841 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@386f0da3
2022-07-04 23:15:41,843 DEBUG (BasicTypeRegistry.java:156) - Adding type registration character -> org.hibernate.type.CharacterType@344f4dea
2022-07-04 23:15:41,843 DEBUG (BasicTypeRegistry.java:156) - Adding type registration char -> org.hibernate.type.CharacterType@344f4dea
2022-07-04 23:15:41,844 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@344f4dea
2022-07-04 23:15:41,846 DEBUG (BasicTypeRegistry.java:156) - Adding type registration short -> org.hibernate.type.ShortType@6c0d9d86
2022-07-04 23:15:41,846 DEBUG (BasicTypeRegistry.java:156) - Adding type registration short -> org.hibernate.type.ShortType@6c0d9d86
2022-07-04 23:15:41,846 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@6c0d9d86
2022-07-04 23:15:41,848 DEBUG (BasicTypeRegistry.java:156) - Adding type registration integer -> org.hibernate.type.IntegerType@16ce702d
2022-07-04 23:15:41,849 DEBUG (BasicTypeRegistry.java:156) - Adding type registration int -> org.hibernate.type.IntegerType@16ce702d
2022-07-04 23:15:41,850 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@16ce702d
2022-07-04 23:15:41,852 DEBUG (BasicTypeRegistry.java:156) - Adding type registration long -> org.hibernate.type.LongType@2ea6e30c
2022-07-04 23:15:41,853 DEBUG (BasicTypeRegistry.java:156) - Adding type registration long -> org.hibernate.type.LongType@2ea6e30c
2022-07-04 23:15:41,853 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Long -> org.hibernate.type.LongType@2ea6e30c
2022-07-04 23:15:41,855 DEBUG (BasicTypeRegistry.java:156) - Adding type registration float -> org.hibernate.type.FloatType@531f4093
2022-07-04 23:15:41,855 DEBUG (BasicTypeRegistry.java:156) - Adding type registration float -> org.hibernate.type.FloatType@531f4093
2022-07-04 23:15:41,857 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@531f4093
2022-07-04 23:15:41,859 DEBUG (BasicTypeRegistry.java:156) - Adding type registration double -> org.hibernate.type.DoubleType@16fdec90
2022-07-04 23:15:41,859 DEBUG (BasicTypeRegistry.java:156) - Adding type registration double -> org.hibernate.type.DoubleType@16fdec90
2022-07-04 23:15:41,859 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@16fdec90
2022-07-04 23:15:41,862 DEBUG (BasicTypeRegistry.java:156) - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@6a55299e
2022-07-04 23:15:41,863 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@6a55299e
2022-07-04 23:15:41,865 DEBUG (BasicTypeRegistry.java:156) - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@5a18cd76
2022-07-04 23:15:41,866 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@5a18cd76
2022-07-04 23:15:41,867 DEBUG (BasicTypeRegistry.java:156) - Adding type registration string -> org.hibernate.type.StringType@77825085
2022-07-04 23:15:41,868 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.String -> org.hibernate.type.StringType@77825085
2022-07-04 23:15:41,869 DEBUG (BasicTypeRegistry.java:156) - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@5b1ebf56
2022-07-04 23:15:41,870 DEBUG (BasicTypeRegistry.java:156) - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@3549bca9
2022-07-04 23:15:41,876 DEBUG (BasicTypeRegistry.java:156) - Adding type registration url -> org.hibernate.type.UrlType@46dffdc3
2022-07-04 23:15:41,877 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.net.URL -> org.hibernate.type.UrlType@46dffdc3
2022-07-04 23:15:41,879 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Duration -> org.hibernate.type.DurationType@4748a0f9
2022-07-04 23:15:41,879 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@4748a0f9
2022-07-04 23:15:41,894 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Instant -> org.hibernate.type.InstantType@46944ca9
2022-07-04 23:15:41,894 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@46944ca9
2022-07-04 23:15:41,897 DEBUG (BasicTypeRegistry.java:156) - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@2a448449
2022-07-04 23:15:41,897 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@2a448449
2022-07-04 23:15:41,899 DEBUG (BasicTypeRegistry.java:156) - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@517566b
2022-07-04 23:15:41,899 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@517566b
2022-07-04 23:15:41,902 DEBUG (BasicTypeRegistry.java:156) - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@55322aab
2022-07-04 23:15:41,902 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@55322aab
2022-07-04 23:15:41,904 DEBUG (BasicTypeRegistry.java:156) - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@126945f9
2022-07-04 23:15:41,904 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@126945f9
2022-07-04 23:15:41,906 DEBUG (BasicTypeRegistry.java:156) - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@4879dfad
2022-07-04 23:15:41,906 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@4879dfad
2022-07-04 23:15:41,909 DEBUG (BasicTypeRegistry.java:156) - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@737a135b
2022-07-04 23:15:41,909 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@737a135b
2022-07-04 23:15:41,913 DEBUG (BasicTypeRegistry.java:156) - Adding type registration date -> org.hibernate.type.DateType@6127a7e
2022-07-04 23:15:41,913 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Date -> org.hibernate.type.DateType@6127a7e
2022-07-04 23:15:41,916 DEBUG (BasicTypeRegistry.java:156) - Adding type registration time -> org.hibernate.type.TimeType@7a1a3478
2022-07-04 23:15:41,917 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@7a1a3478
2022-07-04 23:15:41,921 DEBUG (BasicTypeRegistry.java:156) - Adding type registration timestamp -> org.hibernate.type.TimestampType@4b6690c0
2022-07-04 23:15:41,922 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@4b6690c0
2022-07-04 23:15:41,922 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@4b6690c0
2022-07-04 23:15:41,924 DEBUG (BasicTypeRegistry.java:156) - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@eda25e5
2022-07-04 23:15:41,926 DEBUG (BasicTypeRegistry.java:156) - Adding type registration calendar -> org.hibernate.type.CalendarType@35f26e72
2022-07-04 23:15:41,927 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@35f26e72
2022-07-04 23:15:41,927 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@35f26e72
2022-07-04 23:15:41,928 DEBUG (BasicTypeRegistry.java:156) - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@79351f41
2022-07-04 23:15:41,930 DEBUG (BasicTypeRegistry.java:156) - Adding type registration locale -> org.hibernate.type.LocaleType@1e0f9063
2022-07-04 23:15:41,930 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@1e0f9063
2022-07-04 23:15:41,932 DEBUG (BasicTypeRegistry.java:156) - Adding type registration currency -> org.hibernate.type.CurrencyType@3ed242a4
2022-07-04 23:15:41,933 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@3ed242a4
2022-07-04 23:15:41,935 DEBUG (BasicTypeRegistry.java:156) - Adding type registration timezone -> org.hibernate.type.TimeZoneType@13f95696
2022-07-04 23:15:41,935 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@13f95696
2022-07-04 23:15:41,937 DEBUG (BasicTypeRegistry.java:156) - Adding type registration class -> org.hibernate.type.ClassType@ebaa6cb
2022-07-04 23:15:41,937 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@ebaa6cb
2022-07-04 23:15:41,939 DEBUG (BasicTypeRegistry.java:156) - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@66fdec9
2022-07-04 23:15:41,939 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@66fdec9
2022-07-04 23:15:41,940 DEBUG (BasicTypeRegistry.java:156) - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@52851b44
2022-07-04 23:15:41,944 DEBUG (BasicTypeRegistry.java:156) - Adding type registration binary -> org.hibernate.type.BinaryType@5ef6ae06
2022-07-04 23:15:41,944 DEBUG (BasicTypeRegistry.java:156) - Adding type registration byte[] -> org.hibernate.type.BinaryType@5ef6ae06
2022-07-04 23:15:41,944 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [B -> org.hibernate.type.BinaryType@5ef6ae06
2022-07-04 23:15:41,946 DEBUG (BasicTypeRegistry.java:156) - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@604f2bd2
2022-07-04 23:15:41,947 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@604f2bd2
2022-07-04 23:15:41,947 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@604f2bd2
2022-07-04 23:15:41,951 DEBUG (BasicTypeRegistry.java:156) - Adding type registration row_version -> org.hibernate.type.RowVersionType@366ac49b
2022-07-04 23:15:41,953 DEBUG (BasicTypeRegistry.java:156) - Adding type registration image -> org.hibernate.type.ImageType@2cc44ad
2022-07-04 23:15:41,955 DEBUG (BasicTypeRegistry.java:156) - Adding type registration characters -> org.hibernate.type.CharArrayType@33b1c5c5
2022-07-04 23:15:41,955 DEBUG (BasicTypeRegistry.java:156) - Adding type registration char[] -> org.hibernate.type.CharArrayType@33b1c5c5
2022-07-04 23:15:41,955 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [C -> org.hibernate.type.CharArrayType@33b1c5c5
2022-07-04 23:15:41,957 DEBUG (BasicTypeRegistry.java:156) - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@4535b6d5
2022-07-04 23:15:41,957 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@4535b6d5
2022-07-04 23:15:41,958 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@4535b6d5
2022-07-04 23:15:41,959 DEBUG (BasicTypeRegistry.java:156) - Adding type registration text -> org.hibernate.type.TextType@4b41e4dd
2022-07-04 23:15:41,960 DEBUG (BasicTypeRegistry.java:156) - Adding type registration ntext -> org.hibernate.type.NTextType@40844aab
2022-07-04 23:15:41,963 DEBUG (BasicTypeRegistry.java:156) - Adding type registration blob -> org.hibernate.type.BlobType@767e20cf
2022-07-04 23:15:41,964 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@767e20cf
2022-07-04 23:15:41,964 DEBUG (BasicTypeRegistry.java:156) - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@10ded6a9
2022-07-04 23:15:41,968 DEBUG (BasicTypeRegistry.java:156) - Adding type registration clob -> org.hibernate.type.ClobType@189aa67a
2022-07-04 23:15:41,968 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@189aa67a
2022-07-04 23:15:41,970 DEBUG (BasicTypeRegistry.java:156) - Adding type registration nclob -> org.hibernate.type.NClobType@542e560f
2022-07-04 23:15:41,970 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@542e560f
2022-07-04 23:15:41,972 DEBUG (BasicTypeRegistry.java:156) - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@3bcbb589
2022-07-04 23:15:41,973 DEBUG (BasicTypeRegistry.java:156) - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@53d102a2
2022-07-04 23:15:41,975 DEBUG (BasicTypeRegistry.java:156) - Adding type registration serializable -> org.hibernate.type.SerializableType@67c2e933
2022-07-04 23:15:41,984 DEBUG (BasicTypeRegistry.java:156) - Adding type registration object -> org.hibernate.type.ObjectType@5911e990
2022-07-04 23:15:41,985 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@5911e990
2022-07-04 23:15:41,986 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@54c62d71
2022-07-04 23:15:41,987 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@65045a87
2022-07-04 23:15:41,987 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@47f4e407
2022-07-04 23:15:41,987 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@2d1dee39
2022-07-04 23:15:41,988 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@48d5f34e
2022-07-04 23:15:41,988 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@fc258b1
2022-07-04 23:15:41,988 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@6ff65192
2022-07-04 23:15:41,988 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@2dd80673
2022-07-04 23:15:42,012 DEBUG (BootstrapContextImpl.java:272) - Injecting ScanEnvironment [org.hibernate.jpa.boot.internal.StandardJpaScanEnvironmentImpl@26bab2f1] into BootstrapContext; was [null]
2022-07-04 23:15:42,012 DEBUG (BootstrapContextImpl.java:267) - Injecting ScanOptions [org.hibernate.boot.archive.scan.internal.StandardScanOptions@3724af13] into BootstrapContext; was [org.hibernate.boot.archive.scan.internal.StandardScanOptions@68ead359]
2022-07-04 23:15:42,150 DEBUG (BootstrapContextImpl.java:262) - Injecting JPA temp ClassLoader [null] into BootstrapContext; was [null]
2022-07-04 23:15:42,150 DEBUG (ClassLoaderAccessImpl.java:45) - ClassLoaderAccessImpl#injectTempClassLoader(null) [was null]
2022-07-04 23:15:42,178 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2022-07-04 23:15:42,180 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2022-07-04 23:15:42,182 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2022-07-04 23:15:42,183 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2022-07-04 23:15:42,184 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2022-07-04 23:15:42,187 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2022-07-04 23:15:42,188 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2022-07-04 23:15:42,191 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2022-07-04 23:15:42,194 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2022-07-04 23:15:42,195 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2022-07-04 23:15:42,197 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2022-07-04 23:15:42,197 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2022-07-04 23:15:42,198 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2022-07-04 23:15:42,200 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2022-07-04 23:15:42,211  WARN (DriverManagerConnectionProviderImpl.java:72) - HHH10001002: Using Hibernate built-in connection pool (not for production use!)
2022-07-04 23:15:42,234  INFO (DriverManagerConnectionProviderImpl.java:115) - HHH10001005: using driver [com.mysql.cj.jdbc.Driver] at URL [jdbc:mysql://localhost/playdata?characterEncoding=UTF-8]
2022-07-04 23:15:42,235  INFO (DriverManagerConnectionProviderImpl.java:121) - HHH10001001: Connection properties: {password=playdata, user=root}
2022-07-04 23:15:42,236  INFO (DriverManagerConnectionProviderImpl.java:129) - HHH10001003: Autocommit mode: false
2022-07-04 23:15:42,245 DEBUG (DelegatingBasicLogger.java:384) - Initializing Connection pool with 1 Connections
2022-07-04 23:15:42,246  INFO (DriverManagerConnectionProviderImpl.java:239) - HHH000115: Hibernate connection pool size: 20 (min=1)
2022-07-04 23:15:43,228 DEBUG (JdbcEnvironmentInitiator.java:72) - Database ->
       name : MySQL
    version : 8.0.29
      major : 8
      minor : 0
2022-07-04 23:15:43,229 DEBUG (JdbcEnvironmentInitiator.java:83) - Driver ->
       name : MySQL Connector/J
    version : mysql-connector-java-8.0.29 (Revision: dd61577595edad45c398af508cf91ad26fc4144f)
      major : 8
      minor : 0
2022-07-04 23:15:43,230 DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.2
2022-07-04 23:15:43,256  INFO (Dialect.java:158) - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2022-07-04 23:15:43,290 DEBUG (IdentifierHelperBuilder.java:117) - JDBC driver metadata reported database stores quoted identifiers in more than one case
2022-07-04 23:15:43,375 DEBUG (IdentifierHelperBuilder.java:191) - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
2022-07-04 23:15:43,445 DEBUG (Namespace.java:51) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2022-07-04 23:15:43,452 DEBUG (TypeConfiguration.java:152) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@340b7ef6] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@30404dba]
2022-07-04 23:15:43,603 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.Concert
2022-07-04 23:15:43,673 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 23:15:43,692 DEBUG (EntityBinder.java:430) - Import with entity name Concert
2022-07-04 23:15:43,707 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.Concert on table Concert
2022-07-04 23:15:43,786 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concert_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:43,795 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertId with lazy=false
2022-07-04 23:15:43,800 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:concertId]
2022-07-04 23:15:43,806 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertId
2022-07-04 23:15:43,811 DEBUG (PropertyBinder.java:266) - Building property concertId
2022-07-04 23:15:43,824 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(concert_id)]), concertId, identity, , ...)
2022-07-04 23:15:43,825 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concert_name, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:43,827 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertName with lazy=false
2022-07-04 23:15:43,827 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:concertName]
2022-07-04 23:15:43,827 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertName
2022-07-04 23:15:43,828 DEBUG (PropertyBinder.java:266) - Building property concertName
2022-07-04 23:15:43,832 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:15:43,838 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concertSinger, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:43,842 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=null, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:43,872 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=element, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:43,874 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concertSinger_KEY, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:43,875 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concertSinger_KEY', referencedColumn='null', mappedBy='null'}
2022-07-04 23:15:43,878 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:15:43,878 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:15:43,881 DEBUG (CollectionBinder.java:449) - Collection role: concert.model.entity.Concert.concertSinger
2022-07-04 23:15:43,889 DEBUG (PropertyBinder.java:266) - Building property concertSinger
2022-07-04 23:15:43,896 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=contents, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:43,897 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property contents with lazy=false
2022-07-04 23:15:43,900 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:contents]
2022-07-04 23:15:43,900 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for contents
2022-07-04 23:15:43,902 DEBUG (PropertyBinder.java:266) - Building property contents
2022-07-04 23:15:43,903 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=date, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:43,904 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property date with lazy=false
2022-07-04 23:15:43,905 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:date]
2022-07-04 23:15:43,906 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for date
2022-07-04 23:15:43,907 DEBUG (PropertyBinder.java:266) - Building property date
2022-07-04 23:15:43,908 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=location, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:43,909 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property location with lazy=false
2022-07-04 23:15:43,910 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:location]
2022-07-04 23:15:43,910 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for location
2022-07-04 23:15:43,911 DEBUG (PropertyBinder.java:266) - Building property location
2022-07-04 23:15:43,913 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=max_seats, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:43,914 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property maxSeats with lazy=false
2022-07-04 23:15:43,914 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:maxSeats]
2022-07-04 23:15:43,915 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for maxSeats
2022-07-04 23:15:43,916 DEBUG (PropertyBinder.java:266) - Building property maxSeats
2022-07-04 23:15:43,918 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:15:43,918 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=order, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:43,919 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=null, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:43,919 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=element, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:43,920 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=order_KEY, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:43,920 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='order_KEY', referencedColumn='null', mappedBy='null'}
2022-07-04 23:15:43,921 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:15:43,922 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:15:43,922 DEBUG (CollectionBinder.java:449) - Collection role: concert.model.entity.Concert.order
2022-07-04 23:15:43,923 DEBUG (PropertyBinder.java:266) - Building property order
2022-07-04 23:15:43,926 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.Orders
2022-07-04 23:15:43,927 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 23:15:43,927 DEBUG (EntityBinder.java:430) - Import with entity name Orders
2022-07-04 23:15:43,928 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.Orders on table Orders
2022-07-04 23:15:43,949 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=order_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:43,950 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property orderId with lazy=false
2022-07-04 23:15:43,950 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:orderId]
2022-07-04 23:15:43,951 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for orderId
2022-07-04 23:15:43,951 DEBUG (PropertyBinder.java:266) - Building property orderId
2022-07-04 23:15:43,952 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(order_id)]), orderId, identity, , ...)
2022-07-04 23:15:43,952 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=amount, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:43,952 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property amount with lazy=false
2022-07-04 23:15:43,954 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:amount]
2022-07-04 23:15:43,954 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for amount
2022-07-04 23:15:43,954 DEBUG (PropertyBinder.java:266) - Building property amount
2022-07-04 23:15:43,955 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concert_id', referencedColumn='', mappedBy=''}
2022-07-04 23:15:43,957 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=concert, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:43,961 DEBUG (PropertyBinder.java:266) - Building property concert
2022-07-04 23:15:43,966 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=concert_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:43,966 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concert_id with lazy=false
2022-07-04 23:15:43,967 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:concert_id]
2022-07-04 23:15:43,967 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concert_id
2022-07-04 23:15:43,968 DEBUG (PropertyBinder.java:266) - Building property concert_id
2022-07-04 23:15:43,968 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=customer_email, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:43,969 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property customerEmail with lazy=false
2022-07-04 23:15:43,969 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:customerEmail]
2022-07-04 23:15:43,970 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for customerEmail
2022-07-04 23:15:43,970 DEBUG (PropertyBinder.java:266) - Building property customerEmail
2022-07-04 23:15:43,971 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=customer_name, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:43,971 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property customerName with lazy=false
2022-07-04 23:15:43,971 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:customerName]
2022-07-04 23:15:43,972 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for customerName
2022-07-04 23:15:43,972 DEBUG (PropertyBinder.java:266) - Building property customerName
2022-07-04 23:15:43,973 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.ConcertSinger
2022-07-04 23:15:43,973 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 23:15:43,974 DEBUG (EntityBinder.java:430) - Import with entity name ConcertSinger
2022-07-04 23:15:43,974 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.ConcertSinger on table concert_singer
2022-07-04 23:15:43,979 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=concert_singer_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:43,980 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertSingerId with lazy=false
2022-07-04 23:15:43,981 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.ConcertSinger:concertSingerId]
2022-07-04 23:15:43,981 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertSingerId
2022-07-04 23:15:43,982 DEBUG (PropertyBinder.java:266) - Building property concertSingerId
2022-07-04 23:15:43,983 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(concert_singer_id)]), concertSingerId, identity, , ...)
2022-07-04 23:15:43,983 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concert_id', referencedColumn='', mappedBy=''}
2022-07-04 23:15:43,984 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=concert, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:43,985 DEBUG (PropertyBinder.java:266) - Building property concert
2022-07-04 23:15:43,985 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=concert_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:43,986 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertId with lazy=false
2022-07-04 23:15:43,986 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.ConcertSinger:concertId]
2022-07-04 23:15:43,989 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertId
2022-07-04 23:15:43,990 DEBUG (PropertyBinder.java:266) - Building property concertId
2022-07-04 23:15:43,991 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='singer_id', referencedColumn='', mappedBy=''}
2022-07-04 23:15:43,992 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=singer, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:43,993 DEBUG (PropertyBinder.java:266) - Building property singer
2022-07-04 23:15:43,993 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=singer_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:43,994 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property singerId with lazy=false
2022-07-04 23:15:43,995 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.ConcertSinger:singerId]
2022-07-04 23:15:43,995 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for singerId
2022-07-04 23:15:43,996 DEBUG (PropertyBinder.java:266) - Building property singerId
2022-07-04 23:15:43,996 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.Singer
2022-07-04 23:15:43,997 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 23:15:43,997 DEBUG (EntityBinder.java:430) - Import with entity name Singer
2022-07-04 23:15:43,998 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.Singer on table Singer
2022-07-04 23:15:44,002 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=singer_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:44,003 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property singerId with lazy=false
2022-07-04 23:15:44,003 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Singer:singerId]
2022-07-04 23:15:44,003 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for singerId
2022-07-04 23:15:44,004 DEBUG (PropertyBinder.java:266) - Building property singerId
2022-07-04 23:15:44,004 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(singer_id)]), singerId, identity, , ...)
2022-07-04 23:15:44,005 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='singer'}
2022-07-04 23:15:44,005 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=concertSinger, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:44,006 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=null, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:44,007 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=element, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:44,007 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=concertSinger_KEY, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:44,008 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concertSinger_KEY', referencedColumn='null', mappedBy='null'}
2022-07-04 23:15:44,008 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='singer'}
2022-07-04 23:15:44,008 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='singer'}
2022-07-04 23:15:44,009 DEBUG (CollectionBinder.java:449) - Collection role: concert.model.entity.Singer.concertSinger
2022-07-04 23:15:44,009 DEBUG (PropertyBinder.java:266) - Building property concertSinger
2022-07-04 23:15:44,010 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=detail, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:44,010 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property detail with lazy=false
2022-07-04 23:15:44,011 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Singer:detail]
2022-07-04 23:15:44,011 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for detail
2022-07-04 23:15:44,011 DEBUG (PropertyBinder.java:266) - Building property detail
2022-07-04 23:15:44,012 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=singer_name, insertable=true, updatable=true, unique=false}
2022-07-04 23:15:44,013 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property singerName with lazy=false
2022-07-04 23:15:44,013 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Singer:singerName]
2022-07-04 23:15:44,013 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for singerName
2022-07-04 23:15:44,014 DEBUG (PropertyBinder.java:266) - Building property singerName
2022-07-04 23:15:44,017 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertId
2022-07-04 23:15:44,018 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertName
2022-07-04 23:15:44,019 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for contents
2022-07-04 23:15:44,019 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for date
2022-07-04 23:15:44,019 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for location
2022-07-04 23:15:44,019 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for maxSeats
2022-07-04 23:15:44,020 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for orderId
2022-07-04 23:15:44,020 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for amount
2022-07-04 23:15:44,020 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concert_id
2022-07-04 23:15:44,020 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for customerEmail
2022-07-04 23:15:44,020 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for customerName
2022-07-04 23:15:44,021 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertSingerId
2022-07-04 23:15:44,021 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertId
2022-07-04 23:15:44,021 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for singerId
2022-07-04 23:15:44,021 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for singerId
2022-07-04 23:15:44,022 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for detail
2022-07-04 23:15:44,022 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for singerName
2022-07-04 23:15:44,031 DEBUG (PrimaryKey.java:35) - Forcing column [concert_id] to be non-null as it is part of the primary key for table [concert]
2022-07-04 23:15:44,031 DEBUG (PrimaryKey.java:35) - Forcing column [order_id] to be non-null as it is part of the primary key for table [orders]
2022-07-04 23:15:44,032 DEBUG (PrimaryKey.java:35) - Forcing column [concert_singer_id] to be non-null as it is part of the primary key for table [concert_singer]
2022-07-04 23:15:44,032 DEBUG (PrimaryKey.java:35) - Forcing column [singer_id] to be non-null as it is part of the primary key for table [singer]
2022-07-04 23:15:44,033 DEBUG (CollectionSecondPass.java:51) - Second pass for collection: concert.model.entity.Concert.concertSinger
2022-07-04 23:15:44,035 DEBUG (CollectionBinder.java:898) - Binding a OneToMany: concert.model.entity.Concert.concertSinger through a foreign key
2022-07-04 23:15:44,036 DEBUG (CollectionBinder.java:936) - Mapping collection: concert.model.entity.Concert.concertSinger -> concert_singer
2022-07-04 23:15:44,038 DEBUG (TableBinder.java:565) - Retrieving property concert.model.entity.ConcertSinger.concert
2022-07-04 23:15:44,039 DEBUG (CollectionSecondPass.java:68) - Mapped collection key: concert_id, one-to-many: concert.model.entity.ConcertSinger
2022-07-04 23:15:44,039 DEBUG (CollectionSecondPass.java:51) - Second pass for collection: concert.model.entity.Concert.order
2022-07-04 23:15:44,040 DEBUG (CollectionBinder.java:898) - Binding a OneToMany: concert.model.entity.Concert.order through a foreign key
2022-07-04 23:15:44,040 DEBUG (CollectionBinder.java:936) - Mapping collection: concert.model.entity.Concert.order -> Orders
2022-07-04 23:15:44,042 DEBUG (TableBinder.java:565) - Retrieving property concert.model.entity.Orders.concert
2022-07-04 23:15:44,043 DEBUG (CollectionSecondPass.java:68) - Mapped collection key: concert_id, one-to-many: concert.model.entity.Orders
2022-07-04 23:15:44,043 DEBUG (CollectionSecondPass.java:51) - Second pass for collection: concert.model.entity.Singer.concertSinger
2022-07-04 23:15:44,044 DEBUG (CollectionBinder.java:898) - Binding a OneToMany: concert.model.entity.Singer.concertSinger through a foreign key
2022-07-04 23:15:44,044 DEBUG (CollectionBinder.java:936) - Mapping collection: concert.model.entity.Singer.concertSinger -> concert_singer
2022-07-04 23:15:44,045 DEBUG (TableBinder.java:565) - Retrieving property concert.model.entity.ConcertSinger.singer
2022-07-04 23:15:44,046 DEBUG (CollectionSecondPass.java:68) - Mapped collection key: singer_id, one-to-many: concert.model.entity.ConcertSinger
2022-07-04 23:15:44,047 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 23:15:44,055 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Singer
2022-07-04 23:15:44,055 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 23:15:44,058 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 23:15:44,058 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Singer
2022-07-04 23:15:44,060 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 23:15:44,164 DEBUG (SessionFactoryImpl.java:196) - Building session factory
2022-07-04 23:15:44,166 DEBUG (Settings.java:70) - SessionFactory name : null
2022-07-04 23:15:44,167 DEBUG (Settings.java:71) - Automatic flush during beforeCompletion(): enabled
2022-07-04 23:15:44,168 DEBUG (Settings.java:72) - Automatic session close at end of transaction: disabled
2022-07-04 23:15:44,168 DEBUG (Settings.java:74) - Statistics: disabled
2022-07-04 23:15:44,169 DEBUG (Settings.java:76) - Deleted entity synthetic identifier rollback: disabled
2022-07-04 23:15:44,169 DEBUG (Settings.java:77) - Default entity-mode: pojo
2022-07-04 23:15:44,170 DEBUG (Settings.java:78) - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2022-07-04 23:15:44,170 DEBUG (Settings.java:79) - Allow initialization of lazy state outside session : disabled
2022-07-04 23:15:44,170 DEBUG (Settings.java:81) - Using BatchFetchStyle : LEGACY
2022-07-04 23:15:44,172 DEBUG (Settings.java:82) - Default batch fetch size: -1
2022-07-04 23:15:44,172 DEBUG (Settings.java:83) - Maximum outer join fetch depth: 2
2022-07-04 23:15:44,173 DEBUG (Settings.java:84) - Default null ordering: NONE
2022-07-04 23:15:44,173 DEBUG (Settings.java:85) - Order SQL updates by primary key: disabled
2022-07-04 23:15:44,174 DEBUG (Settings.java:86) - Order SQL inserts for batching: disabled
2022-07-04 23:15:44,174 DEBUG (Settings.java:88) - multi-tenancy strategy : NONE
2022-07-04 23:15:44,175 DEBUG (Settings.java:90) - JTA Track by Thread: enabled
2022-07-04 23:15:44,175 DEBUG (Settings.java:92) - Query language substitutions: {}
2022-07-04 23:15:44,176 DEBUG (Settings.java:93) - Named query checking : enabled
2022-07-04 23:15:44,176 DEBUG (Settings.java:95) - Second-level cache: disabled
2022-07-04 23:15:44,176 DEBUG (Settings.java:96) - Second-level query cache: disabled
2022-07-04 23:15:44,177 DEBUG (Settings.java:97) - Second-level query cache factory: null
2022-07-04 23:15:44,177 DEBUG (Settings.java:98) - Second-level cache region prefix: null
2022-07-04 23:15:44,177 DEBUG (Settings.java:99) - Optimize second-level cache for minimal puts: disabled
2022-07-04 23:15:44,178 DEBUG (Settings.java:100) - Structured second-level cache entries: disabled
2022-07-04 23:15:44,178 DEBUG (Settings.java:101) - Second-level cache direct-reference entries: disabled
2022-07-04 23:15:44,179 DEBUG (Settings.java:102) - Automatic eviction of collection cache: disabled
2022-07-04 23:15:44,179 DEBUG (Settings.java:104) - JDBC batch size: 15
2022-07-04 23:15:44,179 DEBUG (Settings.java:105) - JDBC batch updates for versioned data: enabled
2022-07-04 23:15:44,180 DEBUG (Settings.java:106) - Scrollable result sets: enabled
2022-07-04 23:15:44,180 DEBUG (Settings.java:107) - Wrap result sets: disabled
2022-07-04 23:15:44,180 DEBUG (Settings.java:108) - JDBC3 getGeneratedKeys(): enabled
2022-07-04 23:15:44,181 DEBUG (Settings.java:109) - JDBC result set fetch size: null
2022-07-04 23:15:44,181 DEBUG (Settings.java:110) - Connection release mode: AFTER_TRANSACTION
2022-07-04 23:15:44,182 DEBUG (Settings.java:111) - Generate SQL with comments: disabled
2022-07-04 23:15:44,182 DEBUG (Settings.java:113) - JPA compliance - query : 
2022-07-04 23:15:44,182 DEBUG (Settings.java:114) - JPA compliance - closed-handling : 
2022-07-04 23:15:44,183 DEBUG (Settings.java:115) - JPA compliance - lists : 
2022-07-04 23:15:44,183 DEBUG (Settings.java:116) - JPA compliance - transactions : 
2022-07-04 23:15:44,400 DEBUG (SessionFactoryImpl.java:251) - Session factory constructed with filter configurations : {}
2022-07-04 23:15:44,400 DEBUG (SessionFactoryImpl.java:252) - Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, hibernate.format_sql=true, java.specification.version=11, sun.cpu.isalist=amd64, sun.jnu.encoding=MS949, hibernate.dialect=org.hibernate.dialect.MySQL8Dialect, java.class.path=C:\Users\신동혁\playdata\20220509_lab\03.web\concertProject\concert\target\classes;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\annotations-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-ant.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-ha.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-ssi.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-storeconfig.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-tribes.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\ecj-4.20.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\el-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jasper-el.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jasper.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jaspic-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jsp-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\servlet-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-coyote.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-dbcp.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-cs.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-de.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-es.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-fr.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-ja.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-ko.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-pt-BR.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-ru.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-zh-CN.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-jdbc.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-jni.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-util-scan.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-util.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-websocket.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\websocket-api.jar;C:\Users\신동혁\.m2\repository\javax\persistence\javax.persistence-api\2.2\javax.persistence-api-2.2.jar;C:\Users\신동혁\.m2\repository\org\hibernate\hibernate-entitymanager\5.4.2.Final\hibernate-entitymanager-5.4.2.Final.jar;C:\Users\신동혁\.m2\repository\org\jboss\logging\jboss-logging\3.3.2.Final\jboss-logging-3.3.2.Final.jar;C:\Users\신동혁\.m2\repository\org\hibernate\hibernate-core\5.4.2.Final\hibernate-core-5.4.2.Final.jar;C:\Users\신동혁\.m2\repository\org\javassist\javassist\3.24.0-GA\javassist-3.24.0-GA.jar;C:\Users\신동혁\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\신동혁\.m2\repository\org\jboss\jandex\2.0.5.Final\jandex-2.0.5.Final.jar;C:\Users\신동혁\.m2\repository\com\fasterxml\classmate\1.3.4\classmate-1.3.4.jar;C:\Users\신동혁\.m2\repository\javax\activation\javax.activation-api\1.2.0\javax.activation-api-1.2.0.jar;C:\Users\신동혁\.m2\repository\javax\xml\bind\jaxb-api\2.3.1\jaxb-api-2.3.1.jar;C:\Users\신동혁\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.1\jaxb-runtime-2.3.1.jar;C:\Users\신동혁\.m2\repository\org\glassfish\jaxb\txw2\2.3.1\txw2-2.3.1.jar;C:\Users\신동혁\.m2\repository\com\sun\istack\istack-commons-runtime\3.0.7\istack-commons-runtime-3.0.7.jar;C:\Users\신동혁\.m2\repository\org\jvnet\staxex\stax-ex\1.8\stax-ex-1.8.jar;C:\Users\신동혁\.m2\repository\com\sun\xml\fastinfoset\FastInfoset\1.2.15\FastInfoset-1.2.15.jar;C:\Users\신동혁\.m2\repository\org\dom4j\dom4j\2.1.1\dom4j-2.1.1.jar;C:\Users\신동혁\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.1.0.Final\hibernate-commons-annotations-5.1.0.Final.jar;C:\Users\신동혁\.m2\repository\net\bytebuddy\byte-buddy\1.9.10\byte-buddy-1.9.10.jar;C:\Users\신동혁\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.1.1.Final\jboss-transaction-api_1.2_spec-1.1.1.Final.jar;C:\Users\신동혁\.m2\repository\junit\junit\4.13.2\junit-4.13.2.jar;C:\Users\신동혁\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\신동혁\.m2\repository\org\projectlombok\lombok\1.18.24\lombok-1.18.24.jar;C:\Users\신동혁\.m2\repository\com\jslsolucoes\ojdbc6\11.2.0.1.0\ojdbc6-11.2.0.1.0.jar;C:\Users\신동혁\.m2\repository\mysql\mysql-connector-java\8.0.29\mysql-connector-java-8.0.29.jar;C:\Users\신동혁\.m2\repository\com\google\protobuf\protobuf-java\3.19.4\protobuf-java-3.19.4.jar;C:\Users\신동혁\.m2\repository\org\slf4j\slf4j-api\1.7.5\slf4j-api-1.7.5.jar;C:\Users\신동혁\.m2\repository\org\slf4j\slf4j-log4j12\1.7.5\slf4j-log4j12-1.7.5.jar;C:\Users\신동혁\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\신동혁\.m2\repository\org\modelmapper\modelmapper\2.4.0\modelmapper-2.4.0.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Asia/Seoul, javax.persistence.jdbc.url=jdbc:mysql://localhost/playdata?characterEncoding=UTF-8, javax.persistence.jdbc.user=****, os.name=Windows 10, java.vm.specification.version=11, sun.java.launcher=SUN_STANDARD, user.country=KR, sun.boot.library.path=C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11\bin, sun.java.command=cocert.model.dao.Test, jdk.debug=release, sun.cpu.endian=little, user.home=C:\Users\신동혁, user.language=ko, java.specification.vendor=Oracle Corporation, java.version.date=2018-09-25, java.home=C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11, file.separator=\, java.vm.compressedOopsMode=32-bit, line.separator=
, java.specification.name=Java Platform API Specification, java.vm.specification.vendor=Oracle Corporation, hibernate.transaction.coordinator_class=class org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, javax.persistence.jdbc.driver=com.mysql.cj.jdbc.Driver, hibernate.hbm2ddl.auto=none, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=11+28, user.name=Shin, path.separator=;, hibernate.connection.username=****, os.version=10.0, java.runtime.name=OpenJDK Runtime Environment, hibernate.connection.url=jdbc:mysql://localhost/playdata?characterEncoding=UTF-8, file.encoding=UTF-8, hibernate.ejb.persistenceUnitName=dbinfo, java.vm.name=OpenJDK 64-Bit Server VM, hibernate.show_sql=true, java.vendor.version=18.9, hibernate.connection.driver_class=com.mysql.cj.jdbc.Driver, java.vendor.url.bug=http://bugreport.java.com/bugreport/, java.io.tmpdir=C:\Users\신동혁\AppData\Local\Temp\, java.version=11, user.dir=C:\Users\신동혁\playdata\20220509_lab\03.web\concertProject\concert, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.password=****, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@2c58dcb1, java.library.path=C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Users/신동혁/playdata/20220509_lab/99.devEnv/eclipse//plugins/org.eclipse.justj.openjdk.hotspot.jre.full.win32.x86_64_16.0.1.v20210528-1205/jre/bin/server;C:/Users/신동혁/playdata/20220509_lab/99.devEnv/eclipse//plugins/org.eclipse.justj.openjdk.hotspot.jre.full.win32.x86_64_16.0.1.v20210528-1205/jre/bin;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11\bin;C:\oraclexe\app\oracle\product\11.2.0\server\bin;C:\Program Files\MySQL\MySQL Server 8.0\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\Bandizip\;C:\Program Files\Git\cmd;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\신동혁\AppData\Local\Programs\Python\Python39\Scripts\;C:\Users\신동혁\AppData\Local\Programs\Python\Python39\;C:\Users\신동혁\AppData\Local\Microsoft\WindowsApps;C:\Users\신동혁\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\eclipse;;., java.vendor=Oracle Corporation, java.vm.info=mixed mode, java.vm.version=11+28, hibernate.bytecode.use_reflection_optimizer=false, sun.io.unicode.encoding=UnicodeLittle, javax.persistence.jdbc.password=****, java.class.version=55.0}
2022-07-04 23:15:44,446 DEBUG (JaccIntegrator.java:80) - Skipping JACC integration as it was not enabled
2022-07-04 23:15:44,456 DEBUG (SessionFactoryImpl.java:291) - Instantiated session factory
2022-07-04 23:15:44,458 DEBUG (TypeConfiguration.java:157) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@340b7ef6] to SessionFactoryImpl [org.hibernate.internal.SessionFactoryImpl@5fe7f967]
2022-07-04 23:15:44,664 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Concert] is safe
2022-07-04 23:15:44,666 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Concert
2022-07-04 23:15:44,729 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Concert] is safe
2022-07-04 23:15:44,730 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Concert
2022-07-04 23:15:45,634 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Orders] is safe
2022-07-04 23:15:45,635 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Orders
2022-07-04 23:15:45,636 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Orders] is safe
2022-07-04 23:15:45,637 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Orders
2022-07-04 23:15:45,695 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.ConcertSinger] is safe
2022-07-04 23:15:45,696 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.ConcertSinger
2022-07-04 23:15:45,698 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.ConcertSinger] is safe
2022-07-04 23:15:45,699 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.ConcertSinger
2022-07-04 23:15:45,749 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Singer] is safe
2022-07-04 23:15:45,749 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Singer
2022-07-04 23:15:45,751 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Singer] is safe
2022-07-04 23:15:45,751 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Singer
2022-07-04 23:15:45,823 DEBUG (AbstractCollectionPersister.java:688) - Static SQL for collection: concert.model.entity.Singer.concertSinger
2022-07-04 23:15:45,824 DEBUG (AbstractCollectionPersister.java:690) -  Row insert: update concert_singer set singer_id=? where concert_singer_id=?
2022-07-04 23:15:45,824 DEBUG (AbstractCollectionPersister.java:693) -  Row update: update concert_singer set  where concert_singer_id=?
2022-07-04 23:15:45,825 DEBUG (AbstractCollectionPersister.java:696) -  Row delete: update concert_singer set singer_id=null where singer_id=? and concert_singer_id=?
2022-07-04 23:15:45,825 DEBUG (AbstractCollectionPersister.java:699) -  One-shot delete: update concert_singer set singer_id=null where singer_id=?
2022-07-04 23:15:45,826 DEBUG (AbstractCollectionPersister.java:688) - Static SQL for collection: concert.model.entity.Concert.order
2022-07-04 23:15:45,827 DEBUG (AbstractCollectionPersister.java:690) -  Row insert: update Orders set concert_id=? where order_id=?
2022-07-04 23:15:45,827 DEBUG (AbstractCollectionPersister.java:693) -  Row update: update Orders set  where order_id=?
2022-07-04 23:15:45,828 DEBUG (AbstractCollectionPersister.java:696) -  Row delete: update Orders set concert_id=null where concert_id=? and order_id=?
2022-07-04 23:15:45,828 DEBUG (AbstractCollectionPersister.java:699) -  One-shot delete: update Orders set concert_id=null where concert_id=?
2022-07-04 23:15:45,829 DEBUG (AbstractCollectionPersister.java:688) - Static SQL for collection: concert.model.entity.Concert.concertSinger
2022-07-04 23:15:45,830 DEBUG (AbstractCollectionPersister.java:690) -  Row insert: update concert_singer set concert_id=? where concert_singer_id=?
2022-07-04 23:15:45,830 DEBUG (AbstractCollectionPersister.java:693) -  Row update: update concert_singer set  where concert_singer_id=?
2022-07-04 23:15:45,830 DEBUG (AbstractCollectionPersister.java:696) -  Row delete: update concert_singer set concert_id=null where concert_id=? and concert_singer_id=?
2022-07-04 23:15:45,831 DEBUG (AbstractCollectionPersister.java:699) -  One-shot delete: update concert_singer set concert_id=null where concert_id=?
2022-07-04 23:15:45,845 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.Concert
2022-07-04 23:15:45,845 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select concert_id from Concert where concert_id =?
2022-07-04 23:15:45,846 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select concert_.concert_id, concert_.concert_name as concert_2_0_, concert_.contents as contents3_0_, concert_.date as date4_0_, concert_.location as location5_0_, concert_.max_seats as max_seat6_0_ from Concert concert_ where concert_.concert_id=?
2022-07-04 23:15:45,846 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Concert (concert_name, contents, date, location, max_seats, concert_id) values (?, ?, ?, ?, ?, ?)
2022-07-04 23:15:45,846 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Concert set concert_name=?, contents=?, date=?, location=?, max_seats=? where concert_id=?
2022-07-04 23:15:45,847 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Concert where concert_id=?
2022-07-04 23:15:45,847 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into Concert (concert_name, contents, date, location, max_seats) values (?, ?, ?, ?, ?)
2022-07-04 23:15:45,919 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4e642ee1]
2022-07-04 23:15:45,923 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertName
2022-07-04 23:15:45,923 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 23:15:45,939 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@751ae8a4]
2022-07-04 23:15:45,942 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7e307087]
2022-07-04 23:15:45,944 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : contents
2022-07-04 23:15:45,945 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : date
2022-07-04 23:15:45,946 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : location
2022-07-04 23:15:45,946 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : maxSeats
2022-07-04 23:15:45,947 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : order
2022-07-04 23:15:45,947 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@4bcaa195]
2022-07-04 23:15:45,948 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@d08edc5]
2022-07-04 23:15:45,949 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:15:45,983 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:15:45,995 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Concert)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:0>, path=concert.model.entity.Concert)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Concert.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Concert.concertSinger.<elements>)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.order, querySpaceUid=<gen:3>, path=concert.model.entity.Concert.order)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.Orders, querySpaceUid=<gen:4>, path=concert.model.entity.Concert.order.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Concert)
          - SQL table alias mapping - concert0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_0_0_}

2022-07-04 23:15:46,001 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Concert [NONE]: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 23:15:46,002 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7c2924d7]
2022-07-04 23:15:46,002 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertName
2022-07-04 23:15:46,002 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 23:15:46,004 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6587305a]
2022-07-04 23:15:46,004 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@abbe000]
2022-07-04 23:15:46,005 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : contents
2022-07-04 23:15:46,005 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : date
2022-07-04 23:15:46,005 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : location
2022-07-04 23:15:46,006 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : maxSeats
2022-07-04 23:15:46,007 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : order
2022-07-04 23:15:46,007 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@3f81621c]
2022-07-04 23:15:46,008 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5b9499fe]
2022-07-04 23:15:46,009 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:15:46,010 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:15:46,011 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Concert)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:0>, path=concert.model.entity.Concert)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Concert.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Concert.concertSinger.<elements>)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.order, querySpaceUid=<gen:3>, path=concert.model.entity.Concert.order)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.Orders, querySpaceUid=<gen:4>, path=concert.model.entity.Concert.order.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Concert)
          - SQL table alias mapping - concert0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_0_0_}

2022-07-04 23:15:46,012 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Concert [READ]: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 23:15:46,046 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.Concert: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 23:15:46,048 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.Concert: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 23:15:46,053 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.Orders
2022-07-04 23:15:46,054 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select order_id from Orders where order_id =?
2022-07-04 23:15:46,054 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select orders_.order_id, orders_.amount as amount2_2_, orders_.concert_id as concert_3_2_, orders_.customer_email as customer4_2_, orders_.customer_name as customer5_2_ from Orders orders_ where orders_.order_id=?
2022-07-04 23:15:46,054 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Orders (amount, concert_id, customer_email, customer_name, order_id) values (?, ?, ?, ?, ?)
2022-07-04 23:15:46,054 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Orders set amount=?, concert_id=?, customer_email=?, customer_name=? where order_id=?
2022-07-04 23:15:46,054 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Orders where order_id=?
2022-07-04 23:15:46,054 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into Orders (amount, concert_id, customer_email, customer_name) values (?, ?, ?, ?)
2022-07-04 23:15:46,056 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@38cedb7d]
2022-07-04 23:15:46,057 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : amount
2022-07-04 23:15:46,057 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:15:46,058 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2acdcce8]
2022-07-04 23:15:46,060 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert_id
2022-07-04 23:15:46,060 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerEmail
2022-07-04 23:15:46,061 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerName
2022-07-04 23:15:46,061 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:15:46,063 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:15:46,064 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Orders)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Orders, querySpaceUid=<gen:0>, path=concert.model.entity.Orders)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.Orders.concert)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {order_id1_2_0_}

2022-07-04 23:15:46,064 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Orders [NONE]: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 23:15:46,065 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@d5bb1c4]
2022-07-04 23:15:46,065 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : amount
2022-07-04 23:15:46,066 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:15:46,066 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@465b38e6]
2022-07-04 23:15:46,067 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert_id
2022-07-04 23:15:46,068 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerEmail
2022-07-04 23:15:46,068 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerName
2022-07-04 23:15:46,069 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:15:46,069 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:15:46,070 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Orders)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Orders, querySpaceUid=<gen:0>, path=concert.model.entity.Orders)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.Orders.concert)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {order_id1_2_0_}

2022-07-04 23:15:46,070 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Orders [READ]: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 23:15:46,071 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.Orders: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 23:15:46,072 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.Orders: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 23:15:46,072 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.ConcertSinger
2022-07-04 23:15:46,073 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select concert_singer_id from concert_singer where concert_singer_id =?
2022-07-04 23:15:46,074 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select concertsin_.concert_singer_id, concertsin_.concert_id as concert_2_1_, concertsin_.singer_id as singer_i3_1_ from concert_singer concertsin_ where concertsin_.concert_singer_id=?
2022-07-04 23:15:46,074 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into concert_singer (concert_id, singer_id, concert_singer_id) values (?, ?, ?)
2022-07-04 23:15:46,075 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update concert_singer set concert_id=?, singer_id=? where concert_singer_id=?
2022-07-04 23:15:46,076 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from concert_singer where concert_singer_id=?
2022-07-04 23:15:46,076 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into concert_singer (concert_id, singer_id) values (?, ?)
2022-07-04 23:15:46,077 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4b960b5b]
2022-07-04 23:15:46,077 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:15:46,078 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7bd96822]
2022-07-04 23:15:46,078 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 23:15:46,078 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 23:15:46,078 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@64dae3b7]
2022-07-04 23:15:46,080 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 23:15:46,080 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:15:46,081 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:15:46,083 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.ConcertSinger)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:0>, path=concert.model.entity.ConcertSinger)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.ConcertSinger.concert)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:2>, path=concert.model.entity.ConcertSinger.singer)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.ConcertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_1_0_}

2022-07-04 23:15:46,083 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.ConcertSinger [NONE]: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 23:15:46,084 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1fedf0a4]
2022-07-04 23:15:46,084 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:15:46,085 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2ee48610]
2022-07-04 23:15:46,086 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 23:15:46,086 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 23:15:46,086 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1d901f20]
2022-07-04 23:15:46,087 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 23:15:46,087 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:15:46,089 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:15:46,090 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.ConcertSinger)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:0>, path=concert.model.entity.ConcertSinger)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.ConcertSinger.concert)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:2>, path=concert.model.entity.ConcertSinger.singer)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.ConcertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_1_0_}

2022-07-04 23:15:46,091 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.ConcertSinger [READ]: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 23:15:46,092 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.ConcertSinger: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 23:15:46,092 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.ConcertSinger: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 23:15:46,093 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.Singer
2022-07-04 23:15:46,093 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select singer_id from Singer where singer_id =?
2022-07-04 23:15:46,093 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select singer_.singer_id, singer_.detail as detail2_3_, singer_.singer_name as singer_n3_3_ from Singer singer_ where singer_.singer_id=?
2022-07-04 23:15:46,094 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Singer (detail, singer_name, singer_id) values (?, ?, ?)
2022-07-04 23:15:46,094 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Singer set detail=?, singer_name=? where singer_id=?
2022-07-04 23:15:46,095 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Singer where singer_id=?
2022-07-04 23:15:46,096 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into Singer (detail, singer_name) values (?, ?)
2022-07-04 23:15:46,096 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6d08b4e6]
2022-07-04 23:15:46,096 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 23:15:46,097 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1acb74ad]
2022-07-04 23:15:46,097 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7bf01cb]
2022-07-04 23:15:46,098 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : detail
2022-07-04 23:15:46,100 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerName
2022-07-04 23:15:46,100 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:15:46,101 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:15:46,102 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Singer)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:0>, path=concert.model.entity.Singer)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Singer.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Singer.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Singer.concertSinger.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Singer)
          - SQL table alias mapping - singer0_
          - alias suffix - 0_
          - suffixed key columns - {singer_i1_3_0_}

2022-07-04 23:15:46,103 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Singer [NONE]: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 23:15:46,103 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2f382a5e]
2022-07-04 23:15:46,104 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 23:15:46,105 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@539a138b]
2022-07-04 23:15:46,105 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2cd4e16a]
2022-07-04 23:15:46,106 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : detail
2022-07-04 23:15:46,106 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerName
2022-07-04 23:15:46,106 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:15:46,107 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:15:46,108 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Singer)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:0>, path=concert.model.entity.Singer)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Singer.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Singer.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Singer.concertSinger.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Singer)
          - SQL table alias mapping - singer0_
          - alias suffix - 0_
          - suffixed key columns - {singer_i1_3_0_}

2022-07-04 23:15:46,108 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Singer [READ]: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 23:15:46,108 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.Singer: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 23:15:46,110 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.Singer: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 23:15:46,121 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@7affc159]
2022-07-04 23:15:46,122 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1682c08c]
2022-07-04 23:15:46,129 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:15:46,130 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2f14b0f6]
2022-07-04 23:15:46,130 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 23:15:46,131 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 23:15:46,131 DEBUG (MetamodelGraphWalker.java:154) - Property path deemed to be circular : singer
2022-07-04 23:15:46,131 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 23:15:46,132 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:15:46,140 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:15:46,141 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(collection=concert.model.entity.Singer.concertSinger)
    - Returns
       - CollectionReturnImpl(collection=concert.model.entity.Singer.concertSinger, querySpaceUid=<gen:0>, path=[concert.model.entity.Singer.concertSinger])
          - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:1>, path=[concert.model.entity.Singer.concertSinger].<elements>)
             - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:2>, path=[concert.model.entity.Singer.concertSinger].<elements>.concert)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=concert.model.entity.Singer.concertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {singer_i3_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - concert_1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=concert.model.entity.ConcertSinger)
                - SQL table alias mapping - concertsin0_
                - alias suffix - 1_
                - suffixed key columns - {concert_1_1_1_}

2022-07-04 23:15:46,142 DEBUG (CollectionLoader.java:83) - Static select for collection concert.model.entity.Singer.concertSinger: select concertsin0_.singer_id as singer_i3_1_0_, concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_singer_id as concert_1_1_1_, concertsin0_.concert_id as concert_2_1_1_, concertsin0_.singer_id as singer_i3_1_1_ from concert_singer concertsin0_ where concertsin0_.singer_id=?
2022-07-04 23:15:46,144 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@273a5a8a]
2022-07-04 23:15:46,145 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1823b9c4]
2022-07-04 23:15:46,145 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : amount
2022-07-04 23:15:46,145 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:15:46,146 DEBUG (MetamodelGraphWalker.java:154) - Property path deemed to be circular : concert
2022-07-04 23:15:46,146 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert_id
2022-07-04 23:15:46,146 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerEmail
2022-07-04 23:15:46,147 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerName
2022-07-04 23:15:46,147 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:15:46,148 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:15:46,149 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(collection=concert.model.entity.Concert.order)
    - Returns
       - CollectionReturnImpl(collection=concert.model.entity.Concert.order, querySpaceUid=<gen:0>, path=[concert.model.entity.Concert.order])
          - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.Orders, querySpaceUid=<gen:1>, path=[concert.model.entity.Concert.order].<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=concert.model.entity.Concert.order)
          - SQL table alias mapping - order0_
          - alias suffix - 0_
          - suffixed key columns - {concert_3_2_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - order_id1_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=concert.model.entity.Orders)
                - SQL table alias mapping - order0_
                - alias suffix - 1_
                - suffixed key columns - {order_id1_2_1_}

2022-07-04 23:15:46,149 DEBUG (CollectionLoader.java:83) - Static select for collection concert.model.entity.Concert.order: select order0_.concert_id as concert_3_2_0_, order0_.order_id as order_id1_2_0_, order0_.order_id as order_id1_2_1_, order0_.amount as amount2_2_1_, order0_.concert_id as concert_3_2_1_, order0_.customer_email as customer4_2_1_, order0_.customer_name as customer5_2_1_ from Orders order0_ where order0_.concert_id=?
2022-07-04 23:15:46,150 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@adcfad9]
2022-07-04 23:15:46,150 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@fb49fdf]
2022-07-04 23:15:46,151 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:15:46,151 DEBUG (MetamodelGraphWalker.java:154) - Property path deemed to be circular : concert
2022-07-04 23:15:46,152 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 23:15:46,152 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 23:15:46,152 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@10c47c79]
2022-07-04 23:15:46,153 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 23:15:46,153 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:15:46,154 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:15:46,154 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(collection=concert.model.entity.Concert.concertSinger)
    - Returns
       - CollectionReturnImpl(collection=concert.model.entity.Concert.concertSinger, querySpaceUid=<gen:0>, path=[concert.model.entity.Concert.concertSinger])
          - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:1>, path=[concert.model.entity.Concert.concertSinger].<elements>)
             - EntityAttributeFetchImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:2>, path=[concert.model.entity.Concert.concertSinger].<elements>.singer)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=concert.model.entity.Concert.concertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {concert_2_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - concert_1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=concert.model.entity.ConcertSinger)
                - SQL table alias mapping - concertsin0_
                - alias suffix - 1_
                - suffixed key columns - {concert_1_1_1_}

2022-07-04 23:15:46,155 DEBUG (CollectionLoader.java:83) - Static select for collection concert.model.entity.Concert.concertSinger: select concertsin0_.concert_id as concert_2_1_0_, concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_singer_id as concert_1_1_1_, concertsin0_.concert_id as concert_2_1_1_, concertsin0_.singer_id as singer_i3_1_1_ from concert_singer concertsin0_ where concertsin0_.concert_id=?
2022-07-04 23:15:46,230 DEBUG (SchemaManagementToolCoordinator.java:57) - No actions specified; doing nothing
2022-07-04 23:15:46,230 DEBUG (JtaPlatformInitiator.java:43) - No JtaPlatform was specified, checking resolver
2022-07-04 23:15:46,232 DEBUG (JtaPlatformResolverInitiator.java:33) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2022-07-04 23:15:46,245 DEBUG (StandardJtaPlatformResolver.java:137) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2022-07-04 23:15:46,245  INFO (JtaPlatformInitiator.java:52) - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2022-07-04 23:15:46,247 DEBUG (NamedQueryRepository.java:151) - Checking 0 named HQL queries
2022-07-04 23:15:46,247 DEBUG (NamedQueryRepository.java:167) - Checking 0 named SQL queries
2022-07-04 23:15:46,250 DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@787508ca
2022-07-04 23:15:46,254 DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: d44b52cb-f456-40bb-bc8e-a724479a48d4 (<unnamed>)
2022-07-04 23:15:46,255 DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2022-07-04 23:15:46,472 DEBUG (StatisticsInitiator.java:101) - Statistics initialized [enabled=false]
2022-07-04 23:15:46,500 DEBUG (TransactionImpl.java:56) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2022-07-04 23:15:46,500 DEBUG (TransactionImpl.java:84) - begin
2022-07-04 23:15:46,538 DEBUG (SqlStatementLogger.java:94) - 
    select
        concert0_.concert_id as concert_1_0_0_,
        concert0_.concert_name as concert_2_0_0_,
        concert0_.contents as contents3_0_0_,
        concert0_.date as date4_0_0_,
        concert0_.location as location5_0_0_,
        concert0_.max_seats as max_seat6_0_0_ 
    from
        Concert concert0_ 
    where
        concert0_.concert_id=?
2022-07-04 23:15:46,590 DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2022-07-04 23:15:46,592 DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2022-07-04 23:15:46,625 DEBUG (TwoPhaseLoad.java:145) - Resolving associations for [concert.model.entity.Concert#1]
2022-07-04 23:15:46,656 DEBUG (TwoPhaseLoad.java:288) - Done materializing entity [concert.model.entity.Concert#1]
2022-07-04 23:15:46,658 DEBUG (ResourceRegistryStandardImpl.java:87) - HHH000387: ResultSet's statement was not registered
2022-07-04 23:15:46,660 DEBUG (AbstractLoadPlanBasedEntityLoader.java:219) - Done entity load : concert.model.entity.Concert#1
2022-07-04 23:15:46,665 DEBUG (TransactionImpl.java:56) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2022-07-04 23:15:46,665 DEBUG (TransactionImpl.java:84) - begin
2022-07-04 23:15:46,844 DEBUG (SqlStatementLogger.java:94) - 
    SELECT
        * 
    FROM
        Concert c
2022-07-04 23:15:46,864 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 0
2022-07-04 23:15:46,865 DEBUG (Loader.java:1538) - Result row: 
2022-07-04 23:15:46,867 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 1
2022-07-04 23:15:46,867 DEBUG (Loader.java:1538) - Result row: 
2022-07-04 23:15:46,868 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 2
2022-07-04 23:15:46,869 DEBUG (Loader.java:1538) - Result row: 
2022-07-04 23:15:46,870 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 3
2022-07-04 23:15:46,871 DEBUG (Loader.java:1538) - Result row: 
2022-07-04 23:15:46,872 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 4
2022-07-04 23:15:46,873 DEBUG (Loader.java:1538) - Result row: 
2022-07-04 23:15:46,874 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 5
2022-07-04 23:15:46,874 DEBUG (Loader.java:1538) - Result row: 
2022-07-04 23:15:46,875 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 6
2022-07-04 23:15:46,875 DEBUG (Loader.java:1538) - Result row: 
2022-07-04 23:15:46,883 DEBUG (TransactionImpl.java:142) - rolling back
2022-07-04 23:15:46,886 DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2022-07-04 23:15:46,888 DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2022-07-04 23:17:01,510 DEBUG (HibernatePersistenceProvider.java:38) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2022-07-04 23:17:02,360 DEBUG (HibernatePersistenceProvider.java:88) - Located and parsed 1 persistence units; checking each
2022-07-04 23:17:02,370 DEBUG (HibernatePersistenceProvider.java:96) - Checking persistence-unit [name=dbinfo, explicit-provider=null] against incoming persistence unit name [dbinfo]
2022-07-04 23:17:02,372 DEBUG (ProviderChecker.java:95) - No PersistenceProvider explicitly requested, assuming Hibernate
2022-07-04 23:17:02,405 DEBUG (LogHelper.java:102) - PersistenceUnitInfo [
	name: dbinfo
	persistence provider classname: null
	classloader: null
	excludeUnlistedClasses: false
	JTA datasource: null
	Non JTA datasource: null
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/%ec%8b%a0%eb%8f%99%ed%98%81/playdata/20220509_lab/03.web/concertProject/concert/target/classes
	Shared Cache Mode: null
	Validation Mode: null
	Jar files URLs []
	Managed classes names [
		concert.model.entity.Concert
		concert.model.entity.ConcertSinger
		concert.model.entity.Orders
		concert.model.entity.Singer]
	Mapping files names []
	Properties [
		javax.persistence.jdbc.driver: com.mysql.cj.jdbc.Driver
		javax.persistence.jdbc.password: playdata
		hibernate.dialect: org.hibernate.dialect.MySQL8Dialect
		javax.persistence.jdbc.url: jdbc:mysql://localhost/playdata?characterEncoding=UTF-8
		hibernate.show_sql: true
		hibernate.hbm2ddl.auto: none
		hibernate.format_sql: true
		javax.persistence.jdbc.user: root]
2022-07-04 23:17:02,424 DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2022-07-04 23:17:02,436 DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2022-07-04 23:17:02,452 DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2022-07-04 23:17:02,751  INFO (Version.java:46) - HHH000412: Hibernate Core {5.4.2.Final}
2022-07-04 23:17:02,757 DEBUG (Environment.java:199) - HHH000206: hibernate.properties not found
2022-07-04 23:17:03,308 DEBUG (ServiceBinding.java:68) - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
2022-07-04 23:17:03,400 DEBUG (RegionFactoryInitiator.java:118) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2022-07-04 23:17:03,406 DEBUG (RegionFactoryInitiator.java:49) - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2022-07-04 23:17:03,483  INFO (JavaReflectionManager.java:49) - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2022-07-04 23:17:04,923 DEBUG (BasicTypeRegistry.java:156) - Adding type registration boolean -> org.hibernate.type.BooleanType@19b93fa8
2022-07-04 23:17:04,924 DEBUG (BasicTypeRegistry.java:156) - Adding type registration boolean -> org.hibernate.type.BooleanType@19b93fa8
2022-07-04 23:17:04,928 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@19b93fa8
2022-07-04 23:17:04,930 DEBUG (BasicTypeRegistry.java:156) - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@8ad6665
2022-07-04 23:17:04,932 DEBUG (BasicTypeRegistry.java:156) - Adding type registration true_false -> org.hibernate.type.TrueFalseType@bcef303
2022-07-04 23:17:04,934 DEBUG (BasicTypeRegistry.java:156) - Adding type registration yes_no -> org.hibernate.type.YesNoType@4f9a2c08
2022-07-04 23:17:04,937 DEBUG (BasicTypeRegistry.java:156) - Adding type registration byte -> org.hibernate.type.ByteType@386f0da3
2022-07-04 23:17:04,939 DEBUG (BasicTypeRegistry.java:156) - Adding type registration byte -> org.hibernate.type.ByteType@386f0da3
2022-07-04 23:17:04,939 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@386f0da3
2022-07-04 23:17:04,943 DEBUG (BasicTypeRegistry.java:156) - Adding type registration character -> org.hibernate.type.CharacterType@344f4dea
2022-07-04 23:17:04,944 DEBUG (BasicTypeRegistry.java:156) - Adding type registration char -> org.hibernate.type.CharacterType@344f4dea
2022-07-04 23:17:04,944 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@344f4dea
2022-07-04 23:17:04,948 DEBUG (BasicTypeRegistry.java:156) - Adding type registration short -> org.hibernate.type.ShortType@6c0d9d86
2022-07-04 23:17:04,948 DEBUG (BasicTypeRegistry.java:156) - Adding type registration short -> org.hibernate.type.ShortType@6c0d9d86
2022-07-04 23:17:04,949 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@6c0d9d86
2022-07-04 23:17:04,954 DEBUG (BasicTypeRegistry.java:156) - Adding type registration integer -> org.hibernate.type.IntegerType@16ce702d
2022-07-04 23:17:04,955 DEBUG (BasicTypeRegistry.java:156) - Adding type registration int -> org.hibernate.type.IntegerType@16ce702d
2022-07-04 23:17:04,956 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@16ce702d
2022-07-04 23:17:04,961 DEBUG (BasicTypeRegistry.java:156) - Adding type registration long -> org.hibernate.type.LongType@2ea6e30c
2022-07-04 23:17:04,962 DEBUG (BasicTypeRegistry.java:156) - Adding type registration long -> org.hibernate.type.LongType@2ea6e30c
2022-07-04 23:17:04,963 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Long -> org.hibernate.type.LongType@2ea6e30c
2022-07-04 23:17:04,966 DEBUG (BasicTypeRegistry.java:156) - Adding type registration float -> org.hibernate.type.FloatType@531f4093
2022-07-04 23:17:04,966 DEBUG (BasicTypeRegistry.java:156) - Adding type registration float -> org.hibernate.type.FloatType@531f4093
2022-07-04 23:17:04,966 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@531f4093
2022-07-04 23:17:04,970 DEBUG (BasicTypeRegistry.java:156) - Adding type registration double -> org.hibernate.type.DoubleType@16fdec90
2022-07-04 23:17:04,972 DEBUG (BasicTypeRegistry.java:156) - Adding type registration double -> org.hibernate.type.DoubleType@16fdec90
2022-07-04 23:17:04,972 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@16fdec90
2022-07-04 23:17:04,976 DEBUG (BasicTypeRegistry.java:156) - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@6a55299e
2022-07-04 23:17:04,977 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@6a55299e
2022-07-04 23:17:04,987 DEBUG (BasicTypeRegistry.java:156) - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@5a18cd76
2022-07-04 23:17:04,989 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@5a18cd76
2022-07-04 23:17:04,991 DEBUG (BasicTypeRegistry.java:156) - Adding type registration string -> org.hibernate.type.StringType@77825085
2022-07-04 23:17:04,992 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.String -> org.hibernate.type.StringType@77825085
2022-07-04 23:17:04,994 DEBUG (BasicTypeRegistry.java:156) - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@5b1ebf56
2022-07-04 23:17:04,995 DEBUG (BasicTypeRegistry.java:156) - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@3549bca9
2022-07-04 23:17:05,006 DEBUG (BasicTypeRegistry.java:156) - Adding type registration url -> org.hibernate.type.UrlType@46dffdc3
2022-07-04 23:17:05,007 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.net.URL -> org.hibernate.type.UrlType@46dffdc3
2022-07-04 23:17:05,012 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Duration -> org.hibernate.type.DurationType@4748a0f9
2022-07-04 23:17:05,013 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@4748a0f9
2022-07-04 23:17:05,045 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Instant -> org.hibernate.type.InstantType@46944ca9
2022-07-04 23:17:05,046 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@46944ca9
2022-07-04 23:17:05,052 DEBUG (BasicTypeRegistry.java:156) - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@2a448449
2022-07-04 23:17:05,053 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@2a448449
2022-07-04 23:17:05,058 DEBUG (BasicTypeRegistry.java:156) - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@517566b
2022-07-04 23:17:05,060 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@517566b
2022-07-04 23:17:05,065 DEBUG (BasicTypeRegistry.java:156) - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@55322aab
2022-07-04 23:17:05,066 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@55322aab
2022-07-04 23:17:05,070 DEBUG (BasicTypeRegistry.java:156) - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@126945f9
2022-07-04 23:17:05,073 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@126945f9
2022-07-04 23:17:05,076 DEBUG (BasicTypeRegistry.java:156) - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@4879dfad
2022-07-04 23:17:05,077 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@4879dfad
2022-07-04 23:17:05,084 DEBUG (BasicTypeRegistry.java:156) - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@737a135b
2022-07-04 23:17:05,084 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@737a135b
2022-07-04 23:17:05,090 DEBUG (BasicTypeRegistry.java:156) - Adding type registration date -> org.hibernate.type.DateType@6127a7e
2022-07-04 23:17:05,091 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Date -> org.hibernate.type.DateType@6127a7e
2022-07-04 23:17:05,095 DEBUG (BasicTypeRegistry.java:156) - Adding type registration time -> org.hibernate.type.TimeType@7a1a3478
2022-07-04 23:17:05,096 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@7a1a3478
2022-07-04 23:17:05,100 DEBUG (BasicTypeRegistry.java:156) - Adding type registration timestamp -> org.hibernate.type.TimestampType@4b6690c0
2022-07-04 23:17:05,100 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@4b6690c0
2022-07-04 23:17:05,102 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@4b6690c0
2022-07-04 23:17:05,108 DEBUG (BasicTypeRegistry.java:156) - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@eda25e5
2022-07-04 23:17:05,112 DEBUG (BasicTypeRegistry.java:156) - Adding type registration calendar -> org.hibernate.type.CalendarType@35f26e72
2022-07-04 23:17:05,113 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@35f26e72
2022-07-04 23:17:05,113 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@35f26e72
2022-07-04 23:17:05,115 DEBUG (BasicTypeRegistry.java:156) - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@79351f41
2022-07-04 23:17:05,119 DEBUG (BasicTypeRegistry.java:156) - Adding type registration locale -> org.hibernate.type.LocaleType@1e0f9063
2022-07-04 23:17:05,120 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@1e0f9063
2022-07-04 23:17:05,124 DEBUG (BasicTypeRegistry.java:156) - Adding type registration currency -> org.hibernate.type.CurrencyType@3ed242a4
2022-07-04 23:17:05,124 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@3ed242a4
2022-07-04 23:17:05,126 DEBUG (BasicTypeRegistry.java:156) - Adding type registration timezone -> org.hibernate.type.TimeZoneType@13f95696
2022-07-04 23:17:05,127 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@13f95696
2022-07-04 23:17:05,130 DEBUG (BasicTypeRegistry.java:156) - Adding type registration class -> org.hibernate.type.ClassType@ebaa6cb
2022-07-04 23:17:05,131 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@ebaa6cb
2022-07-04 23:17:05,134 DEBUG (BasicTypeRegistry.java:156) - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@66fdec9
2022-07-04 23:17:05,135 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@66fdec9
2022-07-04 23:17:05,137 DEBUG (BasicTypeRegistry.java:156) - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@52851b44
2022-07-04 23:17:05,140 DEBUG (BasicTypeRegistry.java:156) - Adding type registration binary -> org.hibernate.type.BinaryType@5ef6ae06
2022-07-04 23:17:05,140 DEBUG (BasicTypeRegistry.java:156) - Adding type registration byte[] -> org.hibernate.type.BinaryType@5ef6ae06
2022-07-04 23:17:05,141 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [B -> org.hibernate.type.BinaryType@5ef6ae06
2022-07-04 23:17:05,144 DEBUG (BasicTypeRegistry.java:156) - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@604f2bd2
2022-07-04 23:17:05,144 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@604f2bd2
2022-07-04 23:17:05,145 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@604f2bd2
2022-07-04 23:17:05,148 DEBUG (BasicTypeRegistry.java:156) - Adding type registration row_version -> org.hibernate.type.RowVersionType@366ac49b
2022-07-04 23:17:05,150 DEBUG (BasicTypeRegistry.java:156) - Adding type registration image -> org.hibernate.type.ImageType@2cc44ad
2022-07-04 23:17:05,153 DEBUG (BasicTypeRegistry.java:156) - Adding type registration characters -> org.hibernate.type.CharArrayType@33b1c5c5
2022-07-04 23:17:05,153 DEBUG (BasicTypeRegistry.java:156) - Adding type registration char[] -> org.hibernate.type.CharArrayType@33b1c5c5
2022-07-04 23:17:05,153 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [C -> org.hibernate.type.CharArrayType@33b1c5c5
2022-07-04 23:17:05,156 DEBUG (BasicTypeRegistry.java:156) - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@4535b6d5
2022-07-04 23:17:05,156 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@4535b6d5
2022-07-04 23:17:05,157 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@4535b6d5
2022-07-04 23:17:05,158 DEBUG (BasicTypeRegistry.java:156) - Adding type registration text -> org.hibernate.type.TextType@4b41e4dd
2022-07-04 23:17:05,159 DEBUG (BasicTypeRegistry.java:156) - Adding type registration ntext -> org.hibernate.type.NTextType@40844aab
2022-07-04 23:17:05,163 DEBUG (BasicTypeRegistry.java:156) - Adding type registration blob -> org.hibernate.type.BlobType@767e20cf
2022-07-04 23:17:05,164 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@767e20cf
2022-07-04 23:17:05,165 DEBUG (BasicTypeRegistry.java:156) - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@10ded6a9
2022-07-04 23:17:05,169 DEBUG (BasicTypeRegistry.java:156) - Adding type registration clob -> org.hibernate.type.ClobType@189aa67a
2022-07-04 23:17:05,170 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@189aa67a
2022-07-04 23:17:05,174 DEBUG (BasicTypeRegistry.java:156) - Adding type registration nclob -> org.hibernate.type.NClobType@542e560f
2022-07-04 23:17:05,174 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@542e560f
2022-07-04 23:17:05,176 DEBUG (BasicTypeRegistry.java:156) - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@3bcbb589
2022-07-04 23:17:05,177 DEBUG (BasicTypeRegistry.java:156) - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@53d102a2
2022-07-04 23:17:05,182 DEBUG (BasicTypeRegistry.java:156) - Adding type registration serializable -> org.hibernate.type.SerializableType@67c2e933
2022-07-04 23:17:05,191 DEBUG (BasicTypeRegistry.java:156) - Adding type registration object -> org.hibernate.type.ObjectType@5911e990
2022-07-04 23:17:05,192 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@5911e990
2022-07-04 23:17:05,193 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@54c62d71
2022-07-04 23:17:05,193 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@65045a87
2022-07-04 23:17:05,194 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@47f4e407
2022-07-04 23:17:05,197 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@2d1dee39
2022-07-04 23:17:05,197 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@48d5f34e
2022-07-04 23:17:05,198 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@fc258b1
2022-07-04 23:17:05,198 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@6ff65192
2022-07-04 23:17:05,199 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@2dd80673
2022-07-04 23:17:05,230 DEBUG (BootstrapContextImpl.java:272) - Injecting ScanEnvironment [org.hibernate.jpa.boot.internal.StandardJpaScanEnvironmentImpl@26bab2f1] into BootstrapContext; was [null]
2022-07-04 23:17:05,231 DEBUG (BootstrapContextImpl.java:267) - Injecting ScanOptions [org.hibernate.boot.archive.scan.internal.StandardScanOptions@3724af13] into BootstrapContext; was [org.hibernate.boot.archive.scan.internal.StandardScanOptions@68ead359]
2022-07-04 23:17:05,390 DEBUG (BootstrapContextImpl.java:262) - Injecting JPA temp ClassLoader [null] into BootstrapContext; was [null]
2022-07-04 23:17:05,390 DEBUG (ClassLoaderAccessImpl.java:45) - ClassLoaderAccessImpl#injectTempClassLoader(null) [was null]
2022-07-04 23:17:05,415 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2022-07-04 23:17:05,417 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2022-07-04 23:17:05,419 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2022-07-04 23:17:05,420 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2022-07-04 23:17:05,420 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2022-07-04 23:17:05,424 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2022-07-04 23:17:05,426 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2022-07-04 23:17:05,430 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2022-07-04 23:17:05,433 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2022-07-04 23:17:05,434 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2022-07-04 23:17:05,435 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2022-07-04 23:17:05,435 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2022-07-04 23:17:05,436 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2022-07-04 23:17:05,438 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2022-07-04 23:17:05,451  WARN (DriverManagerConnectionProviderImpl.java:72) - HHH10001002: Using Hibernate built-in connection pool (not for production use!)
2022-07-04 23:17:05,479  INFO (DriverManagerConnectionProviderImpl.java:115) - HHH10001005: using driver [com.mysql.cj.jdbc.Driver] at URL [jdbc:mysql://localhost/playdata?characterEncoding=UTF-8]
2022-07-04 23:17:05,480  INFO (DriverManagerConnectionProviderImpl.java:121) - HHH10001001: Connection properties: {password=playdata, user=root}
2022-07-04 23:17:05,480  INFO (DriverManagerConnectionProviderImpl.java:129) - HHH10001003: Autocommit mode: false
2022-07-04 23:17:05,490 DEBUG (DelegatingBasicLogger.java:384) - Initializing Connection pool with 1 Connections
2022-07-04 23:17:05,490  INFO (DriverManagerConnectionProviderImpl.java:239) - HHH000115: Hibernate connection pool size: 20 (min=1)
2022-07-04 23:17:06,989 DEBUG (JdbcEnvironmentInitiator.java:72) - Database ->
       name : MySQL
    version : 8.0.29
      major : 8
      minor : 0
2022-07-04 23:17:06,990 DEBUG (JdbcEnvironmentInitiator.java:83) - Driver ->
       name : MySQL Connector/J
    version : mysql-connector-java-8.0.29 (Revision: dd61577595edad45c398af508cf91ad26fc4144f)
      major : 8
      minor : 0
2022-07-04 23:17:06,991 DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.2
2022-07-04 23:17:07,028  INFO (Dialect.java:158) - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2022-07-04 23:17:07,103 DEBUG (IdentifierHelperBuilder.java:117) - JDBC driver metadata reported database stores quoted identifiers in more than one case
2022-07-04 23:17:07,243 DEBUG (IdentifierHelperBuilder.java:191) - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
2022-07-04 23:17:07,458 DEBUG (Namespace.java:51) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2022-07-04 23:17:07,477 DEBUG (TypeConfiguration.java:152) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@340b7ef6] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@30404dba]
2022-07-04 23:17:07,736 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.Concert
2022-07-04 23:17:07,826 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 23:17:07,845 DEBUG (EntityBinder.java:430) - Import with entity name Concert
2022-07-04 23:17:07,867 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.Concert on table Concert
2022-07-04 23:17:07,977 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concert_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:07,994 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertId with lazy=false
2022-07-04 23:17:08,000 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:concertId]
2022-07-04 23:17:08,015 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertId
2022-07-04 23:17:08,022 DEBUG (PropertyBinder.java:266) - Building property concertId
2022-07-04 23:17:08,035 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(concert_id)]), concertId, identity, , ...)
2022-07-04 23:17:08,037 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concert_name, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,038 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertName with lazy=false
2022-07-04 23:17:08,039 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:concertName]
2022-07-04 23:17:08,039 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertName
2022-07-04 23:17:08,040 DEBUG (PropertyBinder.java:266) - Building property concertName
2022-07-04 23:17:08,045 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:17:08,049 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concertSinger, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,054 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=null, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,089 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=element, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,092 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concertSinger_KEY, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,094 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concertSinger_KEY', referencedColumn='null', mappedBy='null'}
2022-07-04 23:17:08,098 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:17:08,099 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:17:08,101 DEBUG (CollectionBinder.java:449) - Collection role: concert.model.entity.Concert.concertSinger
2022-07-04 23:17:08,107 DEBUG (PropertyBinder.java:266) - Building property concertSinger
2022-07-04 23:17:08,108 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=contents, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,109 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property contents with lazy=false
2022-07-04 23:17:08,109 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:contents]
2022-07-04 23:17:08,110 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for contents
2022-07-04 23:17:08,111 DEBUG (PropertyBinder.java:266) - Building property contents
2022-07-04 23:17:08,112 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=date, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,113 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property date with lazy=false
2022-07-04 23:17:08,115 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:date]
2022-07-04 23:17:08,116 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for date
2022-07-04 23:17:08,117 DEBUG (PropertyBinder.java:266) - Building property date
2022-07-04 23:17:08,118 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=location, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,118 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property location with lazy=false
2022-07-04 23:17:08,119 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:location]
2022-07-04 23:17:08,119 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for location
2022-07-04 23:17:08,119 DEBUG (PropertyBinder.java:266) - Building property location
2022-07-04 23:17:08,120 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=max_seats, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,120 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property maxSeats with lazy=false
2022-07-04 23:17:08,122 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:maxSeats]
2022-07-04 23:17:08,122 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for maxSeats
2022-07-04 23:17:08,123 DEBUG (PropertyBinder.java:266) - Building property maxSeats
2022-07-04 23:17:08,124 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:17:08,125 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=order, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,125 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=null, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,127 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=element, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,127 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=order_KEY, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,128 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='order_KEY', referencedColumn='null', mappedBy='null'}
2022-07-04 23:17:08,128 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:17:08,128 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:17:08,129 DEBUG (CollectionBinder.java:449) - Collection role: concert.model.entity.Concert.order
2022-07-04 23:17:08,130 DEBUG (PropertyBinder.java:266) - Building property order
2022-07-04 23:17:08,133 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.Orders
2022-07-04 23:17:08,134 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 23:17:08,134 DEBUG (EntityBinder.java:430) - Import with entity name Orders
2022-07-04 23:17:08,135 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.Orders on table Orders
2022-07-04 23:17:08,157 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=order_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,158 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property orderId with lazy=false
2022-07-04 23:17:08,159 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:orderId]
2022-07-04 23:17:08,160 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for orderId
2022-07-04 23:17:08,161 DEBUG (PropertyBinder.java:266) - Building property orderId
2022-07-04 23:17:08,162 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(order_id)]), orderId, identity, , ...)
2022-07-04 23:17:08,164 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=amount, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,164 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property amount with lazy=false
2022-07-04 23:17:08,165 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:amount]
2022-07-04 23:17:08,166 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for amount
2022-07-04 23:17:08,166 DEBUG (PropertyBinder.java:266) - Building property amount
2022-07-04 23:17:08,167 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concert_id', referencedColumn='', mappedBy=''}
2022-07-04 23:17:08,168 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=concert, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,174 DEBUG (PropertyBinder.java:266) - Building property concert
2022-07-04 23:17:08,178 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=concert_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,178 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concert_id with lazy=false
2022-07-04 23:17:08,180 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:concert_id]
2022-07-04 23:17:08,180 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concert_id
2022-07-04 23:17:08,181 DEBUG (PropertyBinder.java:266) - Building property concert_id
2022-07-04 23:17:08,182 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=customer_email, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,182 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property customerEmail with lazy=false
2022-07-04 23:17:08,183 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:customerEmail]
2022-07-04 23:17:08,183 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for customerEmail
2022-07-04 23:17:08,184 DEBUG (PropertyBinder.java:266) - Building property customerEmail
2022-07-04 23:17:08,185 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=customer_name, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,186 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property customerName with lazy=false
2022-07-04 23:17:08,187 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:customerName]
2022-07-04 23:17:08,187 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for customerName
2022-07-04 23:17:08,188 DEBUG (PropertyBinder.java:266) - Building property customerName
2022-07-04 23:17:08,193 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.ConcertSinger
2022-07-04 23:17:08,194 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 23:17:08,195 DEBUG (EntityBinder.java:430) - Import with entity name ConcertSinger
2022-07-04 23:17:08,195 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.ConcertSinger on table concert_singer
2022-07-04 23:17:08,200 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=concert_singer_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,200 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertSingerId with lazy=false
2022-07-04 23:17:08,202 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.ConcertSinger:concertSingerId]
2022-07-04 23:17:08,202 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertSingerId
2022-07-04 23:17:08,202 DEBUG (PropertyBinder.java:266) - Building property concertSingerId
2022-07-04 23:17:08,204 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(concert_singer_id)]), concertSingerId, identity, , ...)
2022-07-04 23:17:08,205 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concert_id', referencedColumn='', mappedBy=''}
2022-07-04 23:17:08,206 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=concert, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,207 DEBUG (PropertyBinder.java:266) - Building property concert
2022-07-04 23:17:08,207 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=concert_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,208 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertId with lazy=false
2022-07-04 23:17:08,209 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.ConcertSinger:concertId]
2022-07-04 23:17:08,209 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertId
2022-07-04 23:17:08,210 DEBUG (PropertyBinder.java:266) - Building property concertId
2022-07-04 23:17:08,210 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='singer_id', referencedColumn='', mappedBy=''}
2022-07-04 23:17:08,211 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=singer, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,212 DEBUG (PropertyBinder.java:266) - Building property singer
2022-07-04 23:17:08,213 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=singer_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,213 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property singerId with lazy=false
2022-07-04 23:17:08,214 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.ConcertSinger:singerId]
2022-07-04 23:17:08,214 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for singerId
2022-07-04 23:17:08,215 DEBUG (PropertyBinder.java:266) - Building property singerId
2022-07-04 23:17:08,215 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.Singer
2022-07-04 23:17:08,216 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 23:17:08,217 DEBUG (EntityBinder.java:430) - Import with entity name Singer
2022-07-04 23:17:08,218 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.Singer on table Singer
2022-07-04 23:17:08,224 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=singer_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,225 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property singerId with lazy=false
2022-07-04 23:17:08,226 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Singer:singerId]
2022-07-04 23:17:08,226 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for singerId
2022-07-04 23:17:08,227 DEBUG (PropertyBinder.java:266) - Building property singerId
2022-07-04 23:17:08,228 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(singer_id)]), singerId, identity, , ...)
2022-07-04 23:17:08,229 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='singer'}
2022-07-04 23:17:08,230 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=concertSinger, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,230 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=null, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,231 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=element, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,232 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=concertSinger_KEY, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,233 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concertSinger_KEY', referencedColumn='null', mappedBy='null'}
2022-07-04 23:17:08,233 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='singer'}
2022-07-04 23:17:08,234 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='singer'}
2022-07-04 23:17:08,235 DEBUG (CollectionBinder.java:449) - Collection role: concert.model.entity.Singer.concertSinger
2022-07-04 23:17:08,235 DEBUG (PropertyBinder.java:266) - Building property concertSinger
2022-07-04 23:17:08,237 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=detail, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,238 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property detail with lazy=false
2022-07-04 23:17:08,239 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Singer:detail]
2022-07-04 23:17:08,239 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for detail
2022-07-04 23:17:08,240 DEBUG (PropertyBinder.java:266) - Building property detail
2022-07-04 23:17:08,240 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=singer_name, insertable=true, updatable=true, unique=false}
2022-07-04 23:17:08,241 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property singerName with lazy=false
2022-07-04 23:17:08,241 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Singer:singerName]
2022-07-04 23:17:08,242 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for singerName
2022-07-04 23:17:08,243 DEBUG (PropertyBinder.java:266) - Building property singerName
2022-07-04 23:17:08,247 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertId
2022-07-04 23:17:08,248 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertName
2022-07-04 23:17:08,249 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for contents
2022-07-04 23:17:08,250 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for date
2022-07-04 23:17:08,250 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for location
2022-07-04 23:17:08,250 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for maxSeats
2022-07-04 23:17:08,251 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for orderId
2022-07-04 23:17:08,252 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for amount
2022-07-04 23:17:08,252 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concert_id
2022-07-04 23:17:08,253 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for customerEmail
2022-07-04 23:17:08,253 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for customerName
2022-07-04 23:17:08,254 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertSingerId
2022-07-04 23:17:08,255 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertId
2022-07-04 23:17:08,255 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for singerId
2022-07-04 23:17:08,256 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for singerId
2022-07-04 23:17:08,256 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for detail
2022-07-04 23:17:08,257 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for singerName
2022-07-04 23:17:08,271 DEBUG (PrimaryKey.java:35) - Forcing column [concert_id] to be non-null as it is part of the primary key for table [concert]
2022-07-04 23:17:08,274 DEBUG (PrimaryKey.java:35) - Forcing column [order_id] to be non-null as it is part of the primary key for table [orders]
2022-07-04 23:17:08,275 DEBUG (PrimaryKey.java:35) - Forcing column [concert_singer_id] to be non-null as it is part of the primary key for table [concert_singer]
2022-07-04 23:17:08,275 DEBUG (PrimaryKey.java:35) - Forcing column [singer_id] to be non-null as it is part of the primary key for table [singer]
2022-07-04 23:17:08,276 DEBUG (CollectionSecondPass.java:51) - Second pass for collection: concert.model.entity.Concert.concertSinger
2022-07-04 23:17:08,278 DEBUG (CollectionBinder.java:898) - Binding a OneToMany: concert.model.entity.Concert.concertSinger through a foreign key
2022-07-04 23:17:08,288 DEBUG (CollectionBinder.java:936) - Mapping collection: concert.model.entity.Concert.concertSinger -> concert_singer
2022-07-04 23:17:08,292 DEBUG (TableBinder.java:565) - Retrieving property concert.model.entity.ConcertSinger.concert
2022-07-04 23:17:08,293 DEBUG (CollectionSecondPass.java:68) - Mapped collection key: concert_id, one-to-many: concert.model.entity.ConcertSinger
2022-07-04 23:17:08,293 DEBUG (CollectionSecondPass.java:51) - Second pass for collection: concert.model.entity.Concert.order
2022-07-04 23:17:08,294 DEBUG (CollectionBinder.java:898) - Binding a OneToMany: concert.model.entity.Concert.order through a foreign key
2022-07-04 23:17:08,294 DEBUG (CollectionBinder.java:936) - Mapping collection: concert.model.entity.Concert.order -> Orders
2022-07-04 23:17:08,295 DEBUG (TableBinder.java:565) - Retrieving property concert.model.entity.Orders.concert
2022-07-04 23:17:08,295 DEBUG (CollectionSecondPass.java:68) - Mapped collection key: concert_id, one-to-many: concert.model.entity.Orders
2022-07-04 23:17:08,296 DEBUG (CollectionSecondPass.java:51) - Second pass for collection: concert.model.entity.Singer.concertSinger
2022-07-04 23:17:08,296 DEBUG (CollectionBinder.java:898) - Binding a OneToMany: concert.model.entity.Singer.concertSinger through a foreign key
2022-07-04 23:17:08,297 DEBUG (CollectionBinder.java:936) - Mapping collection: concert.model.entity.Singer.concertSinger -> concert_singer
2022-07-04 23:17:08,298 DEBUG (TableBinder.java:565) - Retrieving property concert.model.entity.ConcertSinger.singer
2022-07-04 23:17:08,299 DEBUG (CollectionSecondPass.java:68) - Mapped collection key: singer_id, one-to-many: concert.model.entity.ConcertSinger
2022-07-04 23:17:08,300 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 23:17:08,307 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Singer
2022-07-04 23:17:08,308 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 23:17:08,311 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 23:17:08,312 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Singer
2022-07-04 23:17:08,314 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 23:17:08,416 DEBUG (SessionFactoryImpl.java:196) - Building session factory
2022-07-04 23:17:08,418 DEBUG (Settings.java:70) - SessionFactory name : null
2022-07-04 23:17:08,419 DEBUG (Settings.java:71) - Automatic flush during beforeCompletion(): enabled
2022-07-04 23:17:08,419 DEBUG (Settings.java:72) - Automatic session close at end of transaction: disabled
2022-07-04 23:17:08,419 DEBUG (Settings.java:74) - Statistics: disabled
2022-07-04 23:17:08,420 DEBUG (Settings.java:76) - Deleted entity synthetic identifier rollback: disabled
2022-07-04 23:17:08,420 DEBUG (Settings.java:77) - Default entity-mode: pojo
2022-07-04 23:17:08,420 DEBUG (Settings.java:78) - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2022-07-04 23:17:08,420 DEBUG (Settings.java:79) - Allow initialization of lazy state outside session : disabled
2022-07-04 23:17:08,421 DEBUG (Settings.java:81) - Using BatchFetchStyle : LEGACY
2022-07-04 23:17:08,422 DEBUG (Settings.java:82) - Default batch fetch size: -1
2022-07-04 23:17:08,423 DEBUG (Settings.java:83) - Maximum outer join fetch depth: 2
2022-07-04 23:17:08,423 DEBUG (Settings.java:84) - Default null ordering: NONE
2022-07-04 23:17:08,423 DEBUG (Settings.java:85) - Order SQL updates by primary key: disabled
2022-07-04 23:17:08,423 DEBUG (Settings.java:86) - Order SQL inserts for batching: disabled
2022-07-04 23:17:08,424 DEBUG (Settings.java:88) - multi-tenancy strategy : NONE
2022-07-04 23:17:08,424 DEBUG (Settings.java:90) - JTA Track by Thread: enabled
2022-07-04 23:17:08,424 DEBUG (Settings.java:92) - Query language substitutions: {}
2022-07-04 23:17:08,425 DEBUG (Settings.java:93) - Named query checking : enabled
2022-07-04 23:17:08,425 DEBUG (Settings.java:95) - Second-level cache: disabled
2022-07-04 23:17:08,425 DEBUG (Settings.java:96) - Second-level query cache: disabled
2022-07-04 23:17:08,426 DEBUG (Settings.java:97) - Second-level query cache factory: null
2022-07-04 23:17:08,426 DEBUG (Settings.java:98) - Second-level cache region prefix: null
2022-07-04 23:17:08,426 DEBUG (Settings.java:99) - Optimize second-level cache for minimal puts: disabled
2022-07-04 23:17:08,426 DEBUG (Settings.java:100) - Structured second-level cache entries: disabled
2022-07-04 23:17:08,427 DEBUG (Settings.java:101) - Second-level cache direct-reference entries: disabled
2022-07-04 23:17:08,427 DEBUG (Settings.java:102) - Automatic eviction of collection cache: disabled
2022-07-04 23:17:08,427 DEBUG (Settings.java:104) - JDBC batch size: 15
2022-07-04 23:17:08,427 DEBUG (Settings.java:105) - JDBC batch updates for versioned data: enabled
2022-07-04 23:17:08,427 DEBUG (Settings.java:106) - Scrollable result sets: enabled
2022-07-04 23:17:08,428 DEBUG (Settings.java:107) - Wrap result sets: disabled
2022-07-04 23:17:08,428 DEBUG (Settings.java:108) - JDBC3 getGeneratedKeys(): enabled
2022-07-04 23:17:08,428 DEBUG (Settings.java:109) - JDBC result set fetch size: null
2022-07-04 23:17:08,428 DEBUG (Settings.java:110) - Connection release mode: AFTER_TRANSACTION
2022-07-04 23:17:08,428 DEBUG (Settings.java:111) - Generate SQL with comments: disabled
2022-07-04 23:17:08,429 DEBUG (Settings.java:113) - JPA compliance - query : 
2022-07-04 23:17:08,429 DEBUG (Settings.java:114) - JPA compliance - closed-handling : 
2022-07-04 23:17:08,429 DEBUG (Settings.java:115) - JPA compliance - lists : 
2022-07-04 23:17:08,430 DEBUG (Settings.java:116) - JPA compliance - transactions : 
2022-07-04 23:17:08,597 DEBUG (SessionFactoryImpl.java:251) - Session factory constructed with filter configurations : {}
2022-07-04 23:17:08,599 DEBUG (SessionFactoryImpl.java:252) - Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, hibernate.format_sql=true, java.specification.version=11, sun.cpu.isalist=amd64, sun.jnu.encoding=MS949, hibernate.dialect=org.hibernate.dialect.MySQL8Dialect, java.class.path=C:\Users\신동혁\playdata\20220509_lab\03.web\concertProject\concert\target\classes;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\annotations-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-ant.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-ha.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-ssi.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-storeconfig.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-tribes.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\ecj-4.20.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\el-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jasper-el.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jasper.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jaspic-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jsp-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\servlet-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-coyote.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-dbcp.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-cs.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-de.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-es.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-fr.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-ja.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-ko.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-pt-BR.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-ru.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-zh-CN.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-jdbc.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-jni.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-util-scan.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-util.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-websocket.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\websocket-api.jar;C:\Users\신동혁\.m2\repository\javax\persistence\javax.persistence-api\2.2\javax.persistence-api-2.2.jar;C:\Users\신동혁\.m2\repository\org\hibernate\hibernate-entitymanager\5.4.2.Final\hibernate-entitymanager-5.4.2.Final.jar;C:\Users\신동혁\.m2\repository\org\jboss\logging\jboss-logging\3.3.2.Final\jboss-logging-3.3.2.Final.jar;C:\Users\신동혁\.m2\repository\org\hibernate\hibernate-core\5.4.2.Final\hibernate-core-5.4.2.Final.jar;C:\Users\신동혁\.m2\repository\org\javassist\javassist\3.24.0-GA\javassist-3.24.0-GA.jar;C:\Users\신동혁\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\신동혁\.m2\repository\org\jboss\jandex\2.0.5.Final\jandex-2.0.5.Final.jar;C:\Users\신동혁\.m2\repository\com\fasterxml\classmate\1.3.4\classmate-1.3.4.jar;C:\Users\신동혁\.m2\repository\javax\activation\javax.activation-api\1.2.0\javax.activation-api-1.2.0.jar;C:\Users\신동혁\.m2\repository\javax\xml\bind\jaxb-api\2.3.1\jaxb-api-2.3.1.jar;C:\Users\신동혁\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.1\jaxb-runtime-2.3.1.jar;C:\Users\신동혁\.m2\repository\org\glassfish\jaxb\txw2\2.3.1\txw2-2.3.1.jar;C:\Users\신동혁\.m2\repository\com\sun\istack\istack-commons-runtime\3.0.7\istack-commons-runtime-3.0.7.jar;C:\Users\신동혁\.m2\repository\org\jvnet\staxex\stax-ex\1.8\stax-ex-1.8.jar;C:\Users\신동혁\.m2\repository\com\sun\xml\fastinfoset\FastInfoset\1.2.15\FastInfoset-1.2.15.jar;C:\Users\신동혁\.m2\repository\org\dom4j\dom4j\2.1.1\dom4j-2.1.1.jar;C:\Users\신동혁\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.1.0.Final\hibernate-commons-annotations-5.1.0.Final.jar;C:\Users\신동혁\.m2\repository\net\bytebuddy\byte-buddy\1.9.10\byte-buddy-1.9.10.jar;C:\Users\신동혁\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.1.1.Final\jboss-transaction-api_1.2_spec-1.1.1.Final.jar;C:\Users\신동혁\.m2\repository\junit\junit\4.13.2\junit-4.13.2.jar;C:\Users\신동혁\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\신동혁\.m2\repository\org\projectlombok\lombok\1.18.24\lombok-1.18.24.jar;C:\Users\신동혁\.m2\repository\com\jslsolucoes\ojdbc6\11.2.0.1.0\ojdbc6-11.2.0.1.0.jar;C:\Users\신동혁\.m2\repository\mysql\mysql-connector-java\8.0.29\mysql-connector-java-8.0.29.jar;C:\Users\신동혁\.m2\repository\com\google\protobuf\protobuf-java\3.19.4\protobuf-java-3.19.4.jar;C:\Users\신동혁\.m2\repository\org\slf4j\slf4j-api\1.7.5\slf4j-api-1.7.5.jar;C:\Users\신동혁\.m2\repository\org\slf4j\slf4j-log4j12\1.7.5\slf4j-log4j12-1.7.5.jar;C:\Users\신동혁\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\신동혁\.m2\repository\org\modelmapper\modelmapper\2.4.0\modelmapper-2.4.0.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Asia/Seoul, javax.persistence.jdbc.url=jdbc:mysql://localhost/playdata?characterEncoding=UTF-8, javax.persistence.jdbc.user=****, os.name=Windows 10, java.vm.specification.version=11, sun.java.launcher=SUN_STANDARD, user.country=KR, sun.boot.library.path=C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11\bin, sun.java.command=cocert.model.dao.Test, jdk.debug=release, sun.cpu.endian=little, user.home=C:\Users\신동혁, user.language=ko, java.specification.vendor=Oracle Corporation, java.version.date=2018-09-25, java.home=C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11, file.separator=\, java.vm.compressedOopsMode=32-bit, line.separator=
, java.specification.name=Java Platform API Specification, java.vm.specification.vendor=Oracle Corporation, hibernate.transaction.coordinator_class=class org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, javax.persistence.jdbc.driver=com.mysql.cj.jdbc.Driver, hibernate.hbm2ddl.auto=none, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=11+28, user.name=Shin, path.separator=;, hibernate.connection.username=****, os.version=10.0, java.runtime.name=OpenJDK Runtime Environment, hibernate.connection.url=jdbc:mysql://localhost/playdata?characterEncoding=UTF-8, file.encoding=UTF-8, hibernate.ejb.persistenceUnitName=dbinfo, java.vm.name=OpenJDK 64-Bit Server VM, hibernate.show_sql=true, java.vendor.version=18.9, hibernate.connection.driver_class=com.mysql.cj.jdbc.Driver, java.vendor.url.bug=http://bugreport.java.com/bugreport/, java.io.tmpdir=C:\Users\신동혁\AppData\Local\Temp\, java.version=11, user.dir=C:\Users\신동혁\playdata\20220509_lab\03.web\concertProject\concert, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.password=****, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@2c58dcb1, java.library.path=C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Users/신동혁/playdata/20220509_lab/99.devEnv/eclipse//plugins/org.eclipse.justj.openjdk.hotspot.jre.full.win32.x86_64_16.0.1.v20210528-1205/jre/bin/server;C:/Users/신동혁/playdata/20220509_lab/99.devEnv/eclipse//plugins/org.eclipse.justj.openjdk.hotspot.jre.full.win32.x86_64_16.0.1.v20210528-1205/jre/bin;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11\bin;C:\oraclexe\app\oracle\product\11.2.0\server\bin;C:\Program Files\MySQL\MySQL Server 8.0\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\Bandizip\;C:\Program Files\Git\cmd;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\신동혁\AppData\Local\Programs\Python\Python39\Scripts\;C:\Users\신동혁\AppData\Local\Programs\Python\Python39\;C:\Users\신동혁\AppData\Local\Microsoft\WindowsApps;C:\Users\신동혁\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\eclipse;;., java.vendor=Oracle Corporation, java.vm.info=mixed mode, java.vm.version=11+28, hibernate.bytecode.use_reflection_optimizer=false, sun.io.unicode.encoding=UnicodeLittle, javax.persistence.jdbc.password=****, java.class.version=55.0}
2022-07-04 23:17:08,632 DEBUG (JaccIntegrator.java:80) - Skipping JACC integration as it was not enabled
2022-07-04 23:17:08,635 DEBUG (SessionFactoryImpl.java:291) - Instantiated session factory
2022-07-04 23:17:08,636 DEBUG (TypeConfiguration.java:157) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@340b7ef6] to SessionFactoryImpl [org.hibernate.internal.SessionFactoryImpl@5fe7f967]
2022-07-04 23:17:08,726 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Concert] is safe
2022-07-04 23:17:08,726 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Concert
2022-07-04 23:17:08,758 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Concert] is safe
2022-07-04 23:17:08,759 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Concert
2022-07-04 23:17:09,555 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Orders] is safe
2022-07-04 23:17:09,556 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Orders
2022-07-04 23:17:09,557 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Orders] is safe
2022-07-04 23:17:09,557 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Orders
2022-07-04 23:17:09,597 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.ConcertSinger] is safe
2022-07-04 23:17:09,598 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.ConcertSinger
2022-07-04 23:17:09,599 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.ConcertSinger] is safe
2022-07-04 23:17:09,599 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.ConcertSinger
2022-07-04 23:17:09,656 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Singer] is safe
2022-07-04 23:17:09,657 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Singer
2022-07-04 23:17:09,658 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Singer] is safe
2022-07-04 23:17:09,658 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Singer
2022-07-04 23:17:09,752 DEBUG (AbstractCollectionPersister.java:688) - Static SQL for collection: concert.model.entity.Singer.concertSinger
2022-07-04 23:17:09,760 DEBUG (AbstractCollectionPersister.java:690) -  Row insert: update concert_singer set singer_id=? where concert_singer_id=?
2022-07-04 23:17:09,761 DEBUG (AbstractCollectionPersister.java:693) -  Row update: update concert_singer set  where concert_singer_id=?
2022-07-04 23:17:09,762 DEBUG (AbstractCollectionPersister.java:696) -  Row delete: update concert_singer set singer_id=null where singer_id=? and concert_singer_id=?
2022-07-04 23:17:09,762 DEBUG (AbstractCollectionPersister.java:699) -  One-shot delete: update concert_singer set singer_id=null where singer_id=?
2022-07-04 23:17:09,764 DEBUG (AbstractCollectionPersister.java:688) - Static SQL for collection: concert.model.entity.Concert.order
2022-07-04 23:17:09,764 DEBUG (AbstractCollectionPersister.java:690) -  Row insert: update Orders set concert_id=? where order_id=?
2022-07-04 23:17:09,765 DEBUG (AbstractCollectionPersister.java:693) -  Row update: update Orders set  where order_id=?
2022-07-04 23:17:09,765 DEBUG (AbstractCollectionPersister.java:696) -  Row delete: update Orders set concert_id=null where concert_id=? and order_id=?
2022-07-04 23:17:09,765 DEBUG (AbstractCollectionPersister.java:699) -  One-shot delete: update Orders set concert_id=null where concert_id=?
2022-07-04 23:17:09,766 DEBUG (AbstractCollectionPersister.java:688) - Static SQL for collection: concert.model.entity.Concert.concertSinger
2022-07-04 23:17:09,766 DEBUG (AbstractCollectionPersister.java:690) -  Row insert: update concert_singer set concert_id=? where concert_singer_id=?
2022-07-04 23:17:09,767 DEBUG (AbstractCollectionPersister.java:693) -  Row update: update concert_singer set  where concert_singer_id=?
2022-07-04 23:17:09,767 DEBUG (AbstractCollectionPersister.java:696) -  Row delete: update concert_singer set concert_id=null where concert_id=? and concert_singer_id=?
2022-07-04 23:17:09,767 DEBUG (AbstractCollectionPersister.java:699) -  One-shot delete: update concert_singer set concert_id=null where concert_id=?
2022-07-04 23:17:09,783 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.Concert
2022-07-04 23:17:09,784 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select concert_id from Concert where concert_id =?
2022-07-04 23:17:09,785 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select concert_.concert_id, concert_.concert_name as concert_2_0_, concert_.contents as contents3_0_, concert_.date as date4_0_, concert_.location as location5_0_, concert_.max_seats as max_seat6_0_ from Concert concert_ where concert_.concert_id=?
2022-07-04 23:17:09,785 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Concert (concert_name, contents, date, location, max_seats, concert_id) values (?, ?, ?, ?, ?, ?)
2022-07-04 23:17:09,786 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Concert set concert_name=?, contents=?, date=?, location=?, max_seats=? where concert_id=?
2022-07-04 23:17:09,786 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Concert where concert_id=?
2022-07-04 23:17:09,786 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into Concert (concert_name, contents, date, location, max_seats) values (?, ?, ?, ?, ?)
2022-07-04 23:17:09,859 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4e642ee1]
2022-07-04 23:17:09,863 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertName
2022-07-04 23:17:09,864 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 23:17:09,876 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@751ae8a4]
2022-07-04 23:17:09,881 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7e307087]
2022-07-04 23:17:09,883 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : contents
2022-07-04 23:17:09,884 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : date
2022-07-04 23:17:09,884 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : location
2022-07-04 23:17:09,885 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : maxSeats
2022-07-04 23:17:09,885 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : order
2022-07-04 23:17:09,886 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@4bcaa195]
2022-07-04 23:17:09,886 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@d08edc5]
2022-07-04 23:17:09,887 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:17:09,920 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:17:09,933 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Concert)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:0>, path=concert.model.entity.Concert)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Concert.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Concert.concertSinger.<elements>)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.order, querySpaceUid=<gen:3>, path=concert.model.entity.Concert.order)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.Orders, querySpaceUid=<gen:4>, path=concert.model.entity.Concert.order.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Concert)
          - SQL table alias mapping - concert0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_0_0_}

2022-07-04 23:17:09,938 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Concert [NONE]: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 23:17:09,939 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7c2924d7]
2022-07-04 23:17:09,939 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertName
2022-07-04 23:17:09,940 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 23:17:09,940 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6587305a]
2022-07-04 23:17:09,941 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@abbe000]
2022-07-04 23:17:09,942 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : contents
2022-07-04 23:17:09,943 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : date
2022-07-04 23:17:09,943 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : location
2022-07-04 23:17:09,943 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : maxSeats
2022-07-04 23:17:09,944 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : order
2022-07-04 23:17:09,944 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@3f81621c]
2022-07-04 23:17:09,945 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5b9499fe]
2022-07-04 23:17:09,946 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:17:09,949 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:17:09,950 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Concert)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:0>, path=concert.model.entity.Concert)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Concert.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Concert.concertSinger.<elements>)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.order, querySpaceUid=<gen:3>, path=concert.model.entity.Concert.order)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.Orders, querySpaceUid=<gen:4>, path=concert.model.entity.Concert.order.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Concert)
          - SQL table alias mapping - concert0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_0_0_}

2022-07-04 23:17:09,950 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Concert [READ]: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 23:17:09,982 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.Concert: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 23:17:09,983 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.Concert: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 23:17:09,984 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.Orders
2022-07-04 23:17:09,985 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select order_id from Orders where order_id =?
2022-07-04 23:17:09,985 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select orders_.order_id, orders_.amount as amount2_2_, orders_.concert_id as concert_3_2_, orders_.customer_email as customer4_2_, orders_.customer_name as customer5_2_ from Orders orders_ where orders_.order_id=?
2022-07-04 23:17:09,985 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Orders (amount, concert_id, customer_email, customer_name, order_id) values (?, ?, ?, ?, ?)
2022-07-04 23:17:09,986 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Orders set amount=?, concert_id=?, customer_email=?, customer_name=? where order_id=?
2022-07-04 23:17:09,986 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Orders where order_id=?
2022-07-04 23:17:09,986 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into Orders (amount, concert_id, customer_email, customer_name) values (?, ?, ?, ?)
2022-07-04 23:17:09,988 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@38cedb7d]
2022-07-04 23:17:09,989 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : amount
2022-07-04 23:17:09,989 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:17:09,990 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2acdcce8]
2022-07-04 23:17:09,992 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert_id
2022-07-04 23:17:09,992 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerEmail
2022-07-04 23:17:09,993 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerName
2022-07-04 23:17:09,993 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:17:09,994 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:17:09,995 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Orders)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Orders, querySpaceUid=<gen:0>, path=concert.model.entity.Orders)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.Orders.concert)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {order_id1_2_0_}

2022-07-04 23:17:09,995 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Orders [NONE]: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 23:17:09,995 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@d5bb1c4]
2022-07-04 23:17:09,996 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : amount
2022-07-04 23:17:09,996 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:17:09,996 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@465b38e6]
2022-07-04 23:17:09,996 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert_id
2022-07-04 23:17:09,997 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerEmail
2022-07-04 23:17:09,997 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerName
2022-07-04 23:17:09,997 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:17:09,998 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:17:09,999 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Orders)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Orders, querySpaceUid=<gen:0>, path=concert.model.entity.Orders)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.Orders.concert)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {order_id1_2_0_}

2022-07-04 23:17:10,000 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Orders [READ]: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 23:17:10,002 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.Orders: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 23:17:10,003 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.Orders: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 23:17:10,004 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.ConcertSinger
2022-07-04 23:17:10,006 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select concert_singer_id from concert_singer where concert_singer_id =?
2022-07-04 23:17:10,006 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select concertsin_.concert_singer_id, concertsin_.concert_id as concert_2_1_, concertsin_.singer_id as singer_i3_1_ from concert_singer concertsin_ where concertsin_.concert_singer_id=?
2022-07-04 23:17:10,007 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into concert_singer (concert_id, singer_id, concert_singer_id) values (?, ?, ?)
2022-07-04 23:17:10,007 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update concert_singer set concert_id=?, singer_id=? where concert_singer_id=?
2022-07-04 23:17:10,008 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from concert_singer where concert_singer_id=?
2022-07-04 23:17:10,008 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into concert_singer (concert_id, singer_id) values (?, ?)
2022-07-04 23:17:10,009 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4b960b5b]
2022-07-04 23:17:10,010 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:17:10,010 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7bd96822]
2022-07-04 23:17:10,010 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 23:17:10,011 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 23:17:10,011 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@64dae3b7]
2022-07-04 23:17:10,012 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 23:17:10,013 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:17:10,015 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:17:10,017 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.ConcertSinger)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:0>, path=concert.model.entity.ConcertSinger)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.ConcertSinger.concert)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:2>, path=concert.model.entity.ConcertSinger.singer)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.ConcertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_1_0_}

2022-07-04 23:17:10,019 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.ConcertSinger [NONE]: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 23:17:10,020 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1fedf0a4]
2022-07-04 23:17:10,020 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:17:10,020 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2ee48610]
2022-07-04 23:17:10,022 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 23:17:10,023 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 23:17:10,023 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1d901f20]
2022-07-04 23:17:10,023 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 23:17:10,023 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:17:10,025 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:17:10,025 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.ConcertSinger)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:0>, path=concert.model.entity.ConcertSinger)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.ConcertSinger.concert)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:2>, path=concert.model.entity.ConcertSinger.singer)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.ConcertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_1_0_}

2022-07-04 23:17:10,026 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.ConcertSinger [READ]: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 23:17:10,026 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.ConcertSinger: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 23:17:10,027 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.ConcertSinger: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 23:17:10,027 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.Singer
2022-07-04 23:17:10,028 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select singer_id from Singer where singer_id =?
2022-07-04 23:17:10,028 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select singer_.singer_id, singer_.detail as detail2_3_, singer_.singer_name as singer_n3_3_ from Singer singer_ where singer_.singer_id=?
2022-07-04 23:17:10,028 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Singer (detail, singer_name, singer_id) values (?, ?, ?)
2022-07-04 23:17:10,028 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Singer set detail=?, singer_name=? where singer_id=?
2022-07-04 23:17:10,028 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Singer where singer_id=?
2022-07-04 23:17:10,029 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into Singer (detail, singer_name) values (?, ?)
2022-07-04 23:17:10,029 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6d08b4e6]
2022-07-04 23:17:10,029 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 23:17:10,029 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1acb74ad]
2022-07-04 23:17:10,030 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7bf01cb]
2022-07-04 23:17:10,030 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : detail
2022-07-04 23:17:10,030 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerName
2022-07-04 23:17:10,031 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:17:10,031 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:17:10,032 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Singer)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:0>, path=concert.model.entity.Singer)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Singer.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Singer.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Singer.concertSinger.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Singer)
          - SQL table alias mapping - singer0_
          - alias suffix - 0_
          - suffixed key columns - {singer_i1_3_0_}

2022-07-04 23:17:10,032 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Singer [NONE]: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 23:17:10,033 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2f382a5e]
2022-07-04 23:17:10,035 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 23:17:10,036 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@539a138b]
2022-07-04 23:17:10,036 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2cd4e16a]
2022-07-04 23:17:10,036 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : detail
2022-07-04 23:17:10,036 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerName
2022-07-04 23:17:10,037 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:17:10,037 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:17:10,038 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Singer)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:0>, path=concert.model.entity.Singer)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Singer.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Singer.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Singer.concertSinger.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Singer)
          - SQL table alias mapping - singer0_
          - alias suffix - 0_
          - suffixed key columns - {singer_i1_3_0_}

2022-07-04 23:17:10,039 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Singer [READ]: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 23:17:10,039 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.Singer: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 23:17:10,040 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.Singer: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 23:17:10,051 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@7affc159]
2022-07-04 23:17:10,051 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1682c08c]
2022-07-04 23:17:10,054 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:17:10,055 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2f14b0f6]
2022-07-04 23:17:10,055 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 23:17:10,055 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 23:17:10,056 DEBUG (MetamodelGraphWalker.java:154) - Property path deemed to be circular : singer
2022-07-04 23:17:10,056 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 23:17:10,056 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:17:10,063 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:17:10,065 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(collection=concert.model.entity.Singer.concertSinger)
    - Returns
       - CollectionReturnImpl(collection=concert.model.entity.Singer.concertSinger, querySpaceUid=<gen:0>, path=[concert.model.entity.Singer.concertSinger])
          - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:1>, path=[concert.model.entity.Singer.concertSinger].<elements>)
             - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:2>, path=[concert.model.entity.Singer.concertSinger].<elements>.concert)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=concert.model.entity.Singer.concertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {singer_i3_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - concert_1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=concert.model.entity.ConcertSinger)
                - SQL table alias mapping - concertsin0_
                - alias suffix - 1_
                - suffixed key columns - {concert_1_1_1_}

2022-07-04 23:17:10,066 DEBUG (CollectionLoader.java:83) - Static select for collection concert.model.entity.Singer.concertSinger: select concertsin0_.singer_id as singer_i3_1_0_, concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_singer_id as concert_1_1_1_, concertsin0_.concert_id as concert_2_1_1_, concertsin0_.singer_id as singer_i3_1_1_ from concert_singer concertsin0_ where concertsin0_.singer_id=?
2022-07-04 23:17:10,067 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@273a5a8a]
2022-07-04 23:17:10,067 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1823b9c4]
2022-07-04 23:17:10,068 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : amount
2022-07-04 23:17:10,068 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:17:10,069 DEBUG (MetamodelGraphWalker.java:154) - Property path deemed to be circular : concert
2022-07-04 23:17:10,069 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert_id
2022-07-04 23:17:10,070 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerEmail
2022-07-04 23:17:10,070 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerName
2022-07-04 23:17:10,070 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:17:10,072 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:17:10,074 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(collection=concert.model.entity.Concert.order)
    - Returns
       - CollectionReturnImpl(collection=concert.model.entity.Concert.order, querySpaceUid=<gen:0>, path=[concert.model.entity.Concert.order])
          - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.Orders, querySpaceUid=<gen:1>, path=[concert.model.entity.Concert.order].<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=concert.model.entity.Concert.order)
          - SQL table alias mapping - order0_
          - alias suffix - 0_
          - suffixed key columns - {concert_3_2_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - order_id1_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=concert.model.entity.Orders)
                - SQL table alias mapping - order0_
                - alias suffix - 1_
                - suffixed key columns - {order_id1_2_1_}

2022-07-04 23:17:10,074 DEBUG (CollectionLoader.java:83) - Static select for collection concert.model.entity.Concert.order: select order0_.concert_id as concert_3_2_0_, order0_.order_id as order_id1_2_0_, order0_.order_id as order_id1_2_1_, order0_.amount as amount2_2_1_, order0_.concert_id as concert_3_2_1_, order0_.customer_email as customer4_2_1_, order0_.customer_name as customer5_2_1_ from Orders order0_ where order0_.concert_id=?
2022-07-04 23:17:10,075 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@adcfad9]
2022-07-04 23:17:10,075 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@fb49fdf]
2022-07-04 23:17:10,076 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:17:10,076 DEBUG (MetamodelGraphWalker.java:154) - Property path deemed to be circular : concert
2022-07-04 23:17:10,077 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 23:17:10,077 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 23:17:10,078 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@10c47c79]
2022-07-04 23:17:10,078 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 23:17:10,079 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:17:10,080 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:17:10,081 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(collection=concert.model.entity.Concert.concertSinger)
    - Returns
       - CollectionReturnImpl(collection=concert.model.entity.Concert.concertSinger, querySpaceUid=<gen:0>, path=[concert.model.entity.Concert.concertSinger])
          - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:1>, path=[concert.model.entity.Concert.concertSinger].<elements>)
             - EntityAttributeFetchImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:2>, path=[concert.model.entity.Concert.concertSinger].<elements>.singer)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=concert.model.entity.Concert.concertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {concert_2_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - concert_1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=concert.model.entity.ConcertSinger)
                - SQL table alias mapping - concertsin0_
                - alias suffix - 1_
                - suffixed key columns - {concert_1_1_1_}

2022-07-04 23:17:10,082 DEBUG (CollectionLoader.java:83) - Static select for collection concert.model.entity.Concert.concertSinger: select concertsin0_.concert_id as concert_2_1_0_, concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_singer_id as concert_1_1_1_, concertsin0_.concert_id as concert_2_1_1_, concertsin0_.singer_id as singer_i3_1_1_ from concert_singer concertsin0_ where concertsin0_.concert_id=?
2022-07-04 23:17:10,166 DEBUG (SchemaManagementToolCoordinator.java:57) - No actions specified; doing nothing
2022-07-04 23:17:10,167 DEBUG (JtaPlatformInitiator.java:43) - No JtaPlatform was specified, checking resolver
2022-07-04 23:17:10,168 DEBUG (JtaPlatformResolverInitiator.java:33) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2022-07-04 23:17:10,180 DEBUG (StandardJtaPlatformResolver.java:137) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2022-07-04 23:17:10,180  INFO (JtaPlatformInitiator.java:52) - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2022-07-04 23:17:10,184 DEBUG (NamedQueryRepository.java:151) - Checking 0 named HQL queries
2022-07-04 23:17:10,184 DEBUG (NamedQueryRepository.java:167) - Checking 0 named SQL queries
2022-07-04 23:17:10,188 DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@787508ca
2022-07-04 23:17:10,192 DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: 57a5275f-fd34-4ddf-ab8b-cbd60513eb31 (<unnamed>)
2022-07-04 23:17:10,192 DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2022-07-04 23:17:10,406 DEBUG (StatisticsInitiator.java:101) - Statistics initialized [enabled=false]
2022-07-04 23:17:10,430 DEBUG (TransactionImpl.java:56) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2022-07-04 23:17:10,430 DEBUG (TransactionImpl.java:84) - begin
2022-07-04 23:17:10,512 DEBUG (SqlStatementLogger.java:94) - 
    SELECT
        * 
    FROM
        Concert c
2022-07-04 23:17:10,553 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 0
2022-07-04 23:17:10,553 DEBUG (Loader.java:1538) - Result row: 
2022-07-04 23:17:10,560 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 1
2022-07-04 23:17:10,560 DEBUG (Loader.java:1538) - Result row: 
2022-07-04 23:17:10,561 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 2
2022-07-04 23:17:10,561 DEBUG (Loader.java:1538) - Result row: 
2022-07-04 23:17:10,562 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 3
2022-07-04 23:17:10,562 DEBUG (Loader.java:1538) - Result row: 
2022-07-04 23:17:10,563 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 4
2022-07-04 23:17:10,563 DEBUG (Loader.java:1538) - Result row: 
2022-07-04 23:17:10,563 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 5
2022-07-04 23:17:10,564 DEBUG (Loader.java:1538) - Result row: 
2022-07-04 23:17:10,565 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 6
2022-07-04 23:17:10,565 DEBUG (Loader.java:1538) - Result row: 
2022-07-04 23:17:10,574 DEBUG (TransactionImpl.java:142) - rolling back
2022-07-04 23:17:10,575 DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2022-07-04 23:17:10,577 DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2022-07-04 23:24:27,130 DEBUG (HibernatePersistenceProvider.java:38) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2022-07-04 23:24:27,902 DEBUG (HibernatePersistenceProvider.java:88) - Located and parsed 1 persistence units; checking each
2022-07-04 23:24:27,907 DEBUG (HibernatePersistenceProvider.java:96) - Checking persistence-unit [name=dbinfo, explicit-provider=null] against incoming persistence unit name [dbinfo]
2022-07-04 23:24:27,909 DEBUG (ProviderChecker.java:95) - No PersistenceProvider explicitly requested, assuming Hibernate
2022-07-04 23:24:27,932 DEBUG (LogHelper.java:102) - PersistenceUnitInfo [
	name: dbinfo
	persistence provider classname: null
	classloader: null
	excludeUnlistedClasses: false
	JTA datasource: null
	Non JTA datasource: null
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/%ec%8b%a0%eb%8f%99%ed%98%81/playdata/20220509_lab/03.web/concertProject/concert/target/classes
	Shared Cache Mode: null
	Validation Mode: null
	Jar files URLs []
	Managed classes names [
		concert.model.entity.Concert
		concert.model.entity.ConcertSinger
		concert.model.entity.Orders
		concert.model.entity.Singer]
	Mapping files names []
	Properties [
		javax.persistence.jdbc.driver: com.mysql.cj.jdbc.Driver
		javax.persistence.jdbc.password: playdata
		hibernate.dialect: org.hibernate.dialect.MySQL8Dialect
		javax.persistence.jdbc.url: jdbc:mysql://localhost/playdata?characterEncoding=UTF-8
		hibernate.show_sql: true
		hibernate.hbm2ddl.auto: none
		hibernate.format_sql: true
		javax.persistence.jdbc.user: root]
2022-07-04 23:24:27,955 DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2022-07-04 23:24:27,963 DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2022-07-04 23:24:27,978 DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2022-07-04 23:24:28,183  INFO (Version.java:46) - HHH000412: Hibernate Core {5.4.2.Final}
2022-07-04 23:24:28,188 DEBUG (Environment.java:199) - HHH000206: hibernate.properties not found
2022-07-04 23:24:28,577 DEBUG (ServiceBinding.java:68) - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
2022-07-04 23:24:28,636 DEBUG (RegionFactoryInitiator.java:118) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2022-07-04 23:24:28,638 DEBUG (RegionFactoryInitiator.java:49) - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2022-07-04 23:24:28,683  INFO (JavaReflectionManager.java:49) - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2022-07-04 23:24:30,088 DEBUG (BasicTypeRegistry.java:156) - Adding type registration boolean -> org.hibernate.type.BooleanType@19b93fa8
2022-07-04 23:24:30,089 DEBUG (BasicTypeRegistry.java:156) - Adding type registration boolean -> org.hibernate.type.BooleanType@19b93fa8
2022-07-04 23:24:30,093 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@19b93fa8
2022-07-04 23:24:30,096 DEBUG (BasicTypeRegistry.java:156) - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@8ad6665
2022-07-04 23:24:30,098 DEBUG (BasicTypeRegistry.java:156) - Adding type registration true_false -> org.hibernate.type.TrueFalseType@bcef303
2022-07-04 23:24:30,100 DEBUG (BasicTypeRegistry.java:156) - Adding type registration yes_no -> org.hibernate.type.YesNoType@4f9a2c08
2022-07-04 23:24:30,104 DEBUG (BasicTypeRegistry.java:156) - Adding type registration byte -> org.hibernate.type.ByteType@386f0da3
2022-07-04 23:24:30,104 DEBUG (BasicTypeRegistry.java:156) - Adding type registration byte -> org.hibernate.type.ByteType@386f0da3
2022-07-04 23:24:30,105 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@386f0da3
2022-07-04 23:24:30,107 DEBUG (BasicTypeRegistry.java:156) - Adding type registration character -> org.hibernate.type.CharacterType@344f4dea
2022-07-04 23:24:30,108 DEBUG (BasicTypeRegistry.java:156) - Adding type registration char -> org.hibernate.type.CharacterType@344f4dea
2022-07-04 23:24:30,108 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@344f4dea
2022-07-04 23:24:30,112 DEBUG (BasicTypeRegistry.java:156) - Adding type registration short -> org.hibernate.type.ShortType@6c0d9d86
2022-07-04 23:24:30,112 DEBUG (BasicTypeRegistry.java:156) - Adding type registration short -> org.hibernate.type.ShortType@6c0d9d86
2022-07-04 23:24:30,113 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@6c0d9d86
2022-07-04 23:24:30,116 DEBUG (BasicTypeRegistry.java:156) - Adding type registration integer -> org.hibernate.type.IntegerType@16ce702d
2022-07-04 23:24:30,117 DEBUG (BasicTypeRegistry.java:156) - Adding type registration int -> org.hibernate.type.IntegerType@16ce702d
2022-07-04 23:24:30,118 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@16ce702d
2022-07-04 23:24:30,122 DEBUG (BasicTypeRegistry.java:156) - Adding type registration long -> org.hibernate.type.LongType@2ea6e30c
2022-07-04 23:24:30,123 DEBUG (BasicTypeRegistry.java:156) - Adding type registration long -> org.hibernate.type.LongType@2ea6e30c
2022-07-04 23:24:30,123 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Long -> org.hibernate.type.LongType@2ea6e30c
2022-07-04 23:24:30,127 DEBUG (BasicTypeRegistry.java:156) - Adding type registration float -> org.hibernate.type.FloatType@531f4093
2022-07-04 23:24:30,128 DEBUG (BasicTypeRegistry.java:156) - Adding type registration float -> org.hibernate.type.FloatType@531f4093
2022-07-04 23:24:30,129 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@531f4093
2022-07-04 23:24:30,132 DEBUG (BasicTypeRegistry.java:156) - Adding type registration double -> org.hibernate.type.DoubleType@16fdec90
2022-07-04 23:24:30,133 DEBUG (BasicTypeRegistry.java:156) - Adding type registration double -> org.hibernate.type.DoubleType@16fdec90
2022-07-04 23:24:30,135 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@16fdec90
2022-07-04 23:24:30,139 DEBUG (BasicTypeRegistry.java:156) - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@6a55299e
2022-07-04 23:24:30,140 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@6a55299e
2022-07-04 23:24:30,145 DEBUG (BasicTypeRegistry.java:156) - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@5a18cd76
2022-07-04 23:24:30,146 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@5a18cd76
2022-07-04 23:24:30,148 DEBUG (BasicTypeRegistry.java:156) - Adding type registration string -> org.hibernate.type.StringType@77825085
2022-07-04 23:24:30,149 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.String -> org.hibernate.type.StringType@77825085
2022-07-04 23:24:30,151 DEBUG (BasicTypeRegistry.java:156) - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@5b1ebf56
2022-07-04 23:24:30,154 DEBUG (BasicTypeRegistry.java:156) - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@3549bca9
2022-07-04 23:24:30,162 DEBUG (BasicTypeRegistry.java:156) - Adding type registration url -> org.hibernate.type.UrlType@46dffdc3
2022-07-04 23:24:30,164 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.net.URL -> org.hibernate.type.UrlType@46dffdc3
2022-07-04 23:24:30,167 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Duration -> org.hibernate.type.DurationType@4748a0f9
2022-07-04 23:24:30,168 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@4748a0f9
2022-07-04 23:24:30,187 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Instant -> org.hibernate.type.InstantType@46944ca9
2022-07-04 23:24:30,188 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@46944ca9
2022-07-04 23:24:30,192 DEBUG (BasicTypeRegistry.java:156) - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@2a448449
2022-07-04 23:24:30,193 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@2a448449
2022-07-04 23:24:30,199 DEBUG (BasicTypeRegistry.java:156) - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@517566b
2022-07-04 23:24:30,200 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@517566b
2022-07-04 23:24:30,203 DEBUG (BasicTypeRegistry.java:156) - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@55322aab
2022-07-04 23:24:30,204 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@55322aab
2022-07-04 23:24:30,207 DEBUG (BasicTypeRegistry.java:156) - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@126945f9
2022-07-04 23:24:30,208 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@126945f9
2022-07-04 23:24:30,212 DEBUG (BasicTypeRegistry.java:156) - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@4879dfad
2022-07-04 23:24:30,213 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@4879dfad
2022-07-04 23:24:30,219 DEBUG (BasicTypeRegistry.java:156) - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@737a135b
2022-07-04 23:24:30,220 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@737a135b
2022-07-04 23:24:30,224 DEBUG (BasicTypeRegistry.java:156) - Adding type registration date -> org.hibernate.type.DateType@6127a7e
2022-07-04 23:24:30,225 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Date -> org.hibernate.type.DateType@6127a7e
2022-07-04 23:24:30,230 DEBUG (BasicTypeRegistry.java:156) - Adding type registration time -> org.hibernate.type.TimeType@7a1a3478
2022-07-04 23:24:30,231 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@7a1a3478
2022-07-04 23:24:30,235 DEBUG (BasicTypeRegistry.java:156) - Adding type registration timestamp -> org.hibernate.type.TimestampType@4b6690c0
2022-07-04 23:24:30,236 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@4b6690c0
2022-07-04 23:24:30,236 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@4b6690c0
2022-07-04 23:24:30,241 DEBUG (BasicTypeRegistry.java:156) - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@eda25e5
2022-07-04 23:24:30,245 DEBUG (BasicTypeRegistry.java:156) - Adding type registration calendar -> org.hibernate.type.CalendarType@35f26e72
2022-07-04 23:24:30,245 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@35f26e72
2022-07-04 23:24:30,246 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@35f26e72
2022-07-04 23:24:30,248 DEBUG (BasicTypeRegistry.java:156) - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@79351f41
2022-07-04 23:24:30,251 DEBUG (BasicTypeRegistry.java:156) - Adding type registration locale -> org.hibernate.type.LocaleType@1e0f9063
2022-07-04 23:24:30,251 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@1e0f9063
2022-07-04 23:24:30,255 DEBUG (BasicTypeRegistry.java:156) - Adding type registration currency -> org.hibernate.type.CurrencyType@3ed242a4
2022-07-04 23:24:30,255 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@3ed242a4
2022-07-04 23:24:30,258 DEBUG (BasicTypeRegistry.java:156) - Adding type registration timezone -> org.hibernate.type.TimeZoneType@13f95696
2022-07-04 23:24:30,258 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@13f95696
2022-07-04 23:24:30,260 DEBUG (BasicTypeRegistry.java:156) - Adding type registration class -> org.hibernate.type.ClassType@ebaa6cb
2022-07-04 23:24:30,260 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@ebaa6cb
2022-07-04 23:24:30,263 DEBUG (BasicTypeRegistry.java:156) - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@66fdec9
2022-07-04 23:24:30,264 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@66fdec9
2022-07-04 23:24:30,266 DEBUG (BasicTypeRegistry.java:156) - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@52851b44
2022-07-04 23:24:30,269 DEBUG (BasicTypeRegistry.java:156) - Adding type registration binary -> org.hibernate.type.BinaryType@5ef6ae06
2022-07-04 23:24:30,269 DEBUG (BasicTypeRegistry.java:156) - Adding type registration byte[] -> org.hibernate.type.BinaryType@5ef6ae06
2022-07-04 23:24:30,270 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [B -> org.hibernate.type.BinaryType@5ef6ae06
2022-07-04 23:24:30,272 DEBUG (BasicTypeRegistry.java:156) - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@604f2bd2
2022-07-04 23:24:30,273 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@604f2bd2
2022-07-04 23:24:30,274 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@604f2bd2
2022-07-04 23:24:30,276 DEBUG (BasicTypeRegistry.java:156) - Adding type registration row_version -> org.hibernate.type.RowVersionType@366ac49b
2022-07-04 23:24:30,277 DEBUG (BasicTypeRegistry.java:156) - Adding type registration image -> org.hibernate.type.ImageType@2cc44ad
2022-07-04 23:24:30,279 DEBUG (BasicTypeRegistry.java:156) - Adding type registration characters -> org.hibernate.type.CharArrayType@33b1c5c5
2022-07-04 23:24:30,279 DEBUG (BasicTypeRegistry.java:156) - Adding type registration char[] -> org.hibernate.type.CharArrayType@33b1c5c5
2022-07-04 23:24:30,280 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [C -> org.hibernate.type.CharArrayType@33b1c5c5
2022-07-04 23:24:30,281 DEBUG (BasicTypeRegistry.java:156) - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@4535b6d5
2022-07-04 23:24:30,281 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@4535b6d5
2022-07-04 23:24:30,283 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@4535b6d5
2022-07-04 23:24:30,284 DEBUG (BasicTypeRegistry.java:156) - Adding type registration text -> org.hibernate.type.TextType@4b41e4dd
2022-07-04 23:24:30,285 DEBUG (BasicTypeRegistry.java:156) - Adding type registration ntext -> org.hibernate.type.NTextType@40844aab
2022-07-04 23:24:30,289 DEBUG (BasicTypeRegistry.java:156) - Adding type registration blob -> org.hibernate.type.BlobType@767e20cf
2022-07-04 23:24:30,290 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@767e20cf
2022-07-04 23:24:30,292 DEBUG (BasicTypeRegistry.java:156) - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@10ded6a9
2022-07-04 23:24:30,295 DEBUG (BasicTypeRegistry.java:156) - Adding type registration clob -> org.hibernate.type.ClobType@189aa67a
2022-07-04 23:24:30,296 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@189aa67a
2022-07-04 23:24:30,299 DEBUG (BasicTypeRegistry.java:156) - Adding type registration nclob -> org.hibernate.type.NClobType@542e560f
2022-07-04 23:24:30,300 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@542e560f
2022-07-04 23:24:30,301 DEBUG (BasicTypeRegistry.java:156) - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@3bcbb589
2022-07-04 23:24:30,302 DEBUG (BasicTypeRegistry.java:156) - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@53d102a2
2022-07-04 23:24:30,308 DEBUG (BasicTypeRegistry.java:156) - Adding type registration serializable -> org.hibernate.type.SerializableType@67c2e933
2022-07-04 23:24:30,316 DEBUG (BasicTypeRegistry.java:156) - Adding type registration object -> org.hibernate.type.ObjectType@5911e990
2022-07-04 23:24:30,316 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@5911e990
2022-07-04 23:24:30,318 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@54c62d71
2022-07-04 23:24:30,318 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@65045a87
2022-07-04 23:24:30,318 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@47f4e407
2022-07-04 23:24:30,319 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@2d1dee39
2022-07-04 23:24:30,320 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@48d5f34e
2022-07-04 23:24:30,321 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@fc258b1
2022-07-04 23:24:30,321 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@6ff65192
2022-07-04 23:24:30,322 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@2dd80673
2022-07-04 23:24:30,349 DEBUG (BootstrapContextImpl.java:272) - Injecting ScanEnvironment [org.hibernate.jpa.boot.internal.StandardJpaScanEnvironmentImpl@26bab2f1] into BootstrapContext; was [null]
2022-07-04 23:24:30,349 DEBUG (BootstrapContextImpl.java:267) - Injecting ScanOptions [org.hibernate.boot.archive.scan.internal.StandardScanOptions@3724af13] into BootstrapContext; was [org.hibernate.boot.archive.scan.internal.StandardScanOptions@68ead359]
2022-07-04 23:24:30,502 DEBUG (BootstrapContextImpl.java:262) - Injecting JPA temp ClassLoader [null] into BootstrapContext; was [null]
2022-07-04 23:24:30,503 DEBUG (ClassLoaderAccessImpl.java:45) - ClassLoaderAccessImpl#injectTempClassLoader(null) [was null]
2022-07-04 23:24:30,528 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2022-07-04 23:24:30,529 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2022-07-04 23:24:30,531 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2022-07-04 23:24:30,533 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2022-07-04 23:24:30,535 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2022-07-04 23:24:30,537 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2022-07-04 23:24:30,538 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2022-07-04 23:24:30,542 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2022-07-04 23:24:30,545 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2022-07-04 23:24:30,546 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2022-07-04 23:24:30,547 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2022-07-04 23:24:30,549 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2022-07-04 23:24:30,550 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2022-07-04 23:24:30,553 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2022-07-04 23:24:30,565  WARN (DriverManagerConnectionProviderImpl.java:72) - HHH10001002: Using Hibernate built-in connection pool (not for production use!)
2022-07-04 23:24:30,589  INFO (DriverManagerConnectionProviderImpl.java:115) - HHH10001005: using driver [com.mysql.cj.jdbc.Driver] at URL [jdbc:mysql://localhost/playdata?characterEncoding=UTF-8]
2022-07-04 23:24:30,590  INFO (DriverManagerConnectionProviderImpl.java:121) - HHH10001001: Connection properties: {password=playdata, user=root}
2022-07-04 23:24:30,591  INFO (DriverManagerConnectionProviderImpl.java:129) - HHH10001003: Autocommit mode: false
2022-07-04 23:24:30,600 DEBUG (DelegatingBasicLogger.java:384) - Initializing Connection pool with 1 Connections
2022-07-04 23:24:30,601  INFO (DriverManagerConnectionProviderImpl.java:239) - HHH000115: Hibernate connection pool size: 20 (min=1)
2022-07-04 23:24:32,017 DEBUG (JdbcEnvironmentInitiator.java:72) - Database ->
       name : MySQL
    version : 8.0.29
      major : 8
      minor : 0
2022-07-04 23:24:32,018 DEBUG (JdbcEnvironmentInitiator.java:83) - Driver ->
       name : MySQL Connector/J
    version : mysql-connector-java-8.0.29 (Revision: dd61577595edad45c398af508cf91ad26fc4144f)
      major : 8
      minor : 0
2022-07-04 23:24:32,018 DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.2
2022-07-04 23:24:32,059  INFO (Dialect.java:158) - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2022-07-04 23:24:32,111 DEBUG (IdentifierHelperBuilder.java:117) - JDBC driver metadata reported database stores quoted identifiers in more than one case
2022-07-04 23:24:32,234 DEBUG (IdentifierHelperBuilder.java:191) - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
2022-07-04 23:24:32,346 DEBUG (Namespace.java:51) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2022-07-04 23:24:32,357 DEBUG (TypeConfiguration.java:152) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@340b7ef6] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@30404dba]
2022-07-04 23:24:32,617 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.Concert
2022-07-04 23:24:32,693 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 23:24:32,721 DEBUG (EntityBinder.java:430) - Import with entity name Concert
2022-07-04 23:24:32,744 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.Concert on table Concert
2022-07-04 23:24:32,872 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concert_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:32,885 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertId with lazy=false
2022-07-04 23:24:32,889 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:concertId]
2022-07-04 23:24:32,896 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertId
2022-07-04 23:24:32,902 DEBUG (PropertyBinder.java:266) - Building property concertId
2022-07-04 23:24:32,921 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(concert_id)]), concertId, identity, , ...)
2022-07-04 23:24:32,923 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concert_name, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:32,923 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertName with lazy=false
2022-07-04 23:24:32,925 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:concertName]
2022-07-04 23:24:32,925 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertName
2022-07-04 23:24:32,925 DEBUG (PropertyBinder.java:266) - Building property concertName
2022-07-04 23:24:32,932 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:24:32,937 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concertSinger, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:32,943 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=null, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:32,976 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=element, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:32,979 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concertSinger_KEY, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:32,980 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concertSinger_KEY', referencedColumn='null', mappedBy='null'}
2022-07-04 23:24:32,983 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:24:32,984 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:24:32,988 DEBUG (CollectionBinder.java:449) - Collection role: concert.model.entity.Concert.concertSinger
2022-07-04 23:24:32,998 DEBUG (PropertyBinder.java:266) - Building property concertSinger
2022-07-04 23:24:33,002 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=contents, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:33,004 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property contents with lazy=false
2022-07-04 23:24:33,004 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:contents]
2022-07-04 23:24:33,005 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for contents
2022-07-04 23:24:33,006 DEBUG (PropertyBinder.java:266) - Building property contents
2022-07-04 23:24:33,007 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=date, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:33,009 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property date with lazy=false
2022-07-04 23:24:33,010 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:date]
2022-07-04 23:24:33,012 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for date
2022-07-04 23:24:33,012 DEBUG (PropertyBinder.java:266) - Building property date
2022-07-04 23:24:33,014 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=location, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:33,015 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property location with lazy=false
2022-07-04 23:24:33,015 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:location]
2022-07-04 23:24:33,017 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for location
2022-07-04 23:24:33,018 DEBUG (PropertyBinder.java:266) - Building property location
2022-07-04 23:24:33,020 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=max_seats, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:33,021 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property maxSeats with lazy=false
2022-07-04 23:24:33,022 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:maxSeats]
2022-07-04 23:24:33,023 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for maxSeats
2022-07-04 23:24:33,023 DEBUG (PropertyBinder.java:266) - Building property maxSeats
2022-07-04 23:24:33,023 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:24:33,024 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=order, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:33,025 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=null, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:33,026 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=element, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:33,027 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=order_KEY, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:33,027 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='order_KEY', referencedColumn='null', mappedBy='null'}
2022-07-04 23:24:33,028 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:24:33,029 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:24:33,029 DEBUG (CollectionBinder.java:449) - Collection role: concert.model.entity.Concert.order
2022-07-04 23:24:33,030 DEBUG (PropertyBinder.java:266) - Building property order
2022-07-04 23:24:33,035 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.Orders
2022-07-04 23:24:33,036 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 23:24:33,036 DEBUG (EntityBinder.java:430) - Import with entity name Orders
2022-07-04 23:24:33,037 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.Orders on table Orders
2022-07-04 23:24:33,060 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=order_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:33,061 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property orderId with lazy=false
2022-07-04 23:24:33,063 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:orderId]
2022-07-04 23:24:33,064 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for orderId
2022-07-04 23:24:33,064 DEBUG (PropertyBinder.java:266) - Building property orderId
2022-07-04 23:24:33,064 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(order_id)]), orderId, identity, , ...)
2022-07-04 23:24:33,065 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=amount, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:33,066 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property amount with lazy=false
2022-07-04 23:24:33,066 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:amount]
2022-07-04 23:24:33,067 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for amount
2022-07-04 23:24:33,067 DEBUG (PropertyBinder.java:266) - Building property amount
2022-07-04 23:24:33,068 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concert_id', referencedColumn='', mappedBy=''}
2022-07-04 23:24:33,069 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=concert, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:33,075 DEBUG (PropertyBinder.java:266) - Building property concert
2022-07-04 23:24:33,079 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=concert_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:33,080 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concert_id with lazy=false
2022-07-04 23:24:33,080 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:concert_id]
2022-07-04 23:24:33,080 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concert_id
2022-07-04 23:24:33,082 DEBUG (PropertyBinder.java:266) - Building property concert_id
2022-07-04 23:24:33,082 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=customer_email, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:33,083 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property customerEmail with lazy=false
2022-07-04 23:24:33,084 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:customerEmail]
2022-07-04 23:24:33,085 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for customerEmail
2022-07-04 23:24:33,086 DEBUG (PropertyBinder.java:266) - Building property customerEmail
2022-07-04 23:24:33,086 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=customer_name, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:33,087 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property customerName with lazy=false
2022-07-04 23:24:33,088 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:customerName]
2022-07-04 23:24:33,088 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for customerName
2022-07-04 23:24:33,089 DEBUG (PropertyBinder.java:266) - Building property customerName
2022-07-04 23:24:33,089 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.ConcertSinger
2022-07-04 23:24:33,090 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 23:24:33,091 DEBUG (EntityBinder.java:430) - Import with entity name ConcertSinger
2022-07-04 23:24:33,091 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.ConcertSinger on table concert_singer
2022-07-04 23:24:33,097 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=concert_singer_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:33,098 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertSingerId with lazy=false
2022-07-04 23:24:33,099 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.ConcertSinger:concertSingerId]
2022-07-04 23:24:33,099 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertSingerId
2022-07-04 23:24:33,100 DEBUG (PropertyBinder.java:266) - Building property concertSingerId
2022-07-04 23:24:33,101 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(concert_singer_id)]), concertSingerId, identity, , ...)
2022-07-04 23:24:33,101 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concert_id', referencedColumn='', mappedBy=''}
2022-07-04 23:24:33,102 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=concert, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:33,102 DEBUG (PropertyBinder.java:266) - Building property concert
2022-07-04 23:24:33,103 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=concert_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:33,104 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertId with lazy=false
2022-07-04 23:24:33,104 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.ConcertSinger:concertId]
2022-07-04 23:24:33,105 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertId
2022-07-04 23:24:33,106 DEBUG (PropertyBinder.java:266) - Building property concertId
2022-07-04 23:24:33,106 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='singer_id', referencedColumn='', mappedBy=''}
2022-07-04 23:24:33,107 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=singer, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:33,108 DEBUG (PropertyBinder.java:266) - Building property singer
2022-07-04 23:24:33,109 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=singer_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:33,109 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property singerId with lazy=false
2022-07-04 23:24:33,110 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.ConcertSinger:singerId]
2022-07-04 23:24:33,110 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for singerId
2022-07-04 23:24:33,112 DEBUG (PropertyBinder.java:266) - Building property singerId
2022-07-04 23:24:33,113 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.Singer
2022-07-04 23:24:33,115 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 23:24:33,116 DEBUG (EntityBinder.java:430) - Import with entity name Singer
2022-07-04 23:24:33,116 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.Singer on table Singer
2022-07-04 23:24:33,122 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=singer_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:33,123 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property singerId with lazy=false
2022-07-04 23:24:33,124 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Singer:singerId]
2022-07-04 23:24:33,124 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for singerId
2022-07-04 23:24:33,124 DEBUG (PropertyBinder.java:266) - Building property singerId
2022-07-04 23:24:33,126 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(singer_id)]), singerId, identity, , ...)
2022-07-04 23:24:33,126 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='singer'}
2022-07-04 23:24:33,127 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=concertSinger, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:33,128 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=null, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:33,128 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=element, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:33,130 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=concertSinger_KEY, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:33,130 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concertSinger_KEY', referencedColumn='null', mappedBy='null'}
2022-07-04 23:24:33,131 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='singer'}
2022-07-04 23:24:33,131 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='singer'}
2022-07-04 23:24:33,132 DEBUG (CollectionBinder.java:449) - Collection role: concert.model.entity.Singer.concertSinger
2022-07-04 23:24:33,133 DEBUG (PropertyBinder.java:266) - Building property concertSinger
2022-07-04 23:24:33,134 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=detail, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:33,134 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property detail with lazy=false
2022-07-04 23:24:33,135 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Singer:detail]
2022-07-04 23:24:33,136 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for detail
2022-07-04 23:24:33,137 DEBUG (PropertyBinder.java:266) - Building property detail
2022-07-04 23:24:33,143 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=singer_name, insertable=true, updatable=true, unique=false}
2022-07-04 23:24:33,144 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property singerName with lazy=false
2022-07-04 23:24:33,144 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Singer:singerName]
2022-07-04 23:24:33,145 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for singerName
2022-07-04 23:24:33,146 DEBUG (PropertyBinder.java:266) - Building property singerName
2022-07-04 23:24:33,150 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertId
2022-07-04 23:24:33,151 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertName
2022-07-04 23:24:33,155 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for contents
2022-07-04 23:24:33,155 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for date
2022-07-04 23:24:33,156 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for location
2022-07-04 23:24:33,156 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for maxSeats
2022-07-04 23:24:33,157 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for orderId
2022-07-04 23:24:33,157 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for amount
2022-07-04 23:24:33,157 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concert_id
2022-07-04 23:24:33,158 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for customerEmail
2022-07-04 23:24:33,158 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for customerName
2022-07-04 23:24:33,159 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertSingerId
2022-07-04 23:24:33,159 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertId
2022-07-04 23:24:33,160 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for singerId
2022-07-04 23:24:33,160 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for singerId
2022-07-04 23:24:33,160 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for detail
2022-07-04 23:24:33,161 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for singerName
2022-07-04 23:24:33,176 DEBUG (PrimaryKey.java:35) - Forcing column [concert_id] to be non-null as it is part of the primary key for table [concert]
2022-07-04 23:24:33,177 DEBUG (PrimaryKey.java:35) - Forcing column [order_id] to be non-null as it is part of the primary key for table [orders]
2022-07-04 23:24:33,177 DEBUG (PrimaryKey.java:35) - Forcing column [concert_singer_id] to be non-null as it is part of the primary key for table [concert_singer]
2022-07-04 23:24:33,178 DEBUG (PrimaryKey.java:35) - Forcing column [singer_id] to be non-null as it is part of the primary key for table [singer]
2022-07-04 23:24:33,179 DEBUG (CollectionSecondPass.java:51) - Second pass for collection: concert.model.entity.Concert.concertSinger
2022-07-04 23:24:33,181 DEBUG (CollectionBinder.java:898) - Binding a OneToMany: concert.model.entity.Concert.concertSinger through a foreign key
2022-07-04 23:24:33,185 DEBUG (CollectionBinder.java:936) - Mapping collection: concert.model.entity.Concert.concertSinger -> concert_singer
2022-07-04 23:24:33,189 DEBUG (TableBinder.java:565) - Retrieving property concert.model.entity.ConcertSinger.concert
2022-07-04 23:24:33,190 DEBUG (CollectionSecondPass.java:68) - Mapped collection key: concert_id, one-to-many: concert.model.entity.ConcertSinger
2022-07-04 23:24:33,191 DEBUG (CollectionSecondPass.java:51) - Second pass for collection: concert.model.entity.Concert.order
2022-07-04 23:24:33,192 DEBUG (CollectionBinder.java:898) - Binding a OneToMany: concert.model.entity.Concert.order through a foreign key
2022-07-04 23:24:33,192 DEBUG (CollectionBinder.java:936) - Mapping collection: concert.model.entity.Concert.order -> Orders
2022-07-04 23:24:33,193 DEBUG (TableBinder.java:565) - Retrieving property concert.model.entity.Orders.concert
2022-07-04 23:24:33,201 DEBUG (CollectionSecondPass.java:68) - Mapped collection key: concert_id, one-to-many: concert.model.entity.Orders
2022-07-04 23:24:33,202 DEBUG (CollectionSecondPass.java:51) - Second pass for collection: concert.model.entity.Singer.concertSinger
2022-07-04 23:24:33,202 DEBUG (CollectionBinder.java:898) - Binding a OneToMany: concert.model.entity.Singer.concertSinger through a foreign key
2022-07-04 23:24:33,202 DEBUG (CollectionBinder.java:936) - Mapping collection: concert.model.entity.Singer.concertSinger -> concert_singer
2022-07-04 23:24:33,204 DEBUG (TableBinder.java:565) - Retrieving property concert.model.entity.ConcertSinger.singer
2022-07-04 23:24:33,204 DEBUG (CollectionSecondPass.java:68) - Mapped collection key: singer_id, one-to-many: concert.model.entity.ConcertSinger
2022-07-04 23:24:33,205 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 23:24:33,211 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Singer
2022-07-04 23:24:33,212 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 23:24:33,220 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 23:24:33,221 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Singer
2022-07-04 23:24:33,222 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 23:24:33,324 DEBUG (SessionFactoryImpl.java:196) - Building session factory
2022-07-04 23:24:33,328 DEBUG (Settings.java:70) - SessionFactory name : null
2022-07-04 23:24:33,328 DEBUG (Settings.java:71) - Automatic flush during beforeCompletion(): enabled
2022-07-04 23:24:33,330 DEBUG (Settings.java:72) - Automatic session close at end of transaction: disabled
2022-07-04 23:24:33,330 DEBUG (Settings.java:74) - Statistics: disabled
2022-07-04 23:24:33,330 DEBUG (Settings.java:76) - Deleted entity synthetic identifier rollback: disabled
2022-07-04 23:24:33,331 DEBUG (Settings.java:77) - Default entity-mode: pojo
2022-07-04 23:24:33,333 DEBUG (Settings.java:78) - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2022-07-04 23:24:33,333 DEBUG (Settings.java:79) - Allow initialization of lazy state outside session : disabled
2022-07-04 23:24:33,334 DEBUG (Settings.java:81) - Using BatchFetchStyle : LEGACY
2022-07-04 23:24:33,334 DEBUG (Settings.java:82) - Default batch fetch size: -1
2022-07-04 23:24:33,334 DEBUG (Settings.java:83) - Maximum outer join fetch depth: 2
2022-07-04 23:24:33,335 DEBUG (Settings.java:84) - Default null ordering: NONE
2022-07-04 23:24:33,335 DEBUG (Settings.java:85) - Order SQL updates by primary key: disabled
2022-07-04 23:24:33,336 DEBUG (Settings.java:86) - Order SQL inserts for batching: disabled
2022-07-04 23:24:33,338 DEBUG (Settings.java:88) - multi-tenancy strategy : NONE
2022-07-04 23:24:33,338 DEBUG (Settings.java:90) - JTA Track by Thread: enabled
2022-07-04 23:24:33,339 DEBUG (Settings.java:92) - Query language substitutions: {}
2022-07-04 23:24:33,339 DEBUG (Settings.java:93) - Named query checking : enabled
2022-07-04 23:24:33,340 DEBUG (Settings.java:95) - Second-level cache: disabled
2022-07-04 23:24:33,340 DEBUG (Settings.java:96) - Second-level query cache: disabled
2022-07-04 23:24:33,341 DEBUG (Settings.java:97) - Second-level query cache factory: null
2022-07-04 23:24:33,342 DEBUG (Settings.java:98) - Second-level cache region prefix: null
2022-07-04 23:24:33,342 DEBUG (Settings.java:99) - Optimize second-level cache for minimal puts: disabled
2022-07-04 23:24:33,343 DEBUG (Settings.java:100) - Structured second-level cache entries: disabled
2022-07-04 23:24:33,343 DEBUG (Settings.java:101) - Second-level cache direct-reference entries: disabled
2022-07-04 23:24:33,343 DEBUG (Settings.java:102) - Automatic eviction of collection cache: disabled
2022-07-04 23:24:33,344 DEBUG (Settings.java:104) - JDBC batch size: 15
2022-07-04 23:24:33,344 DEBUG (Settings.java:105) - JDBC batch updates for versioned data: enabled
2022-07-04 23:24:33,345 DEBUG (Settings.java:106) - Scrollable result sets: enabled
2022-07-04 23:24:33,345 DEBUG (Settings.java:107) - Wrap result sets: disabled
2022-07-04 23:24:33,346 DEBUG (Settings.java:108) - JDBC3 getGeneratedKeys(): enabled
2022-07-04 23:24:33,346 DEBUG (Settings.java:109) - JDBC result set fetch size: null
2022-07-04 23:24:33,347 DEBUG (Settings.java:110) - Connection release mode: AFTER_TRANSACTION
2022-07-04 23:24:33,347 DEBUG (Settings.java:111) - Generate SQL with comments: disabled
2022-07-04 23:24:33,347 DEBUG (Settings.java:113) - JPA compliance - query : 
2022-07-04 23:24:33,348 DEBUG (Settings.java:114) - JPA compliance - closed-handling : 
2022-07-04 23:24:33,348 DEBUG (Settings.java:115) - JPA compliance - lists : 
2022-07-04 23:24:33,348 DEBUG (Settings.java:116) - JPA compliance - transactions : 
2022-07-04 23:24:33,548 DEBUG (SessionFactoryImpl.java:251) - Session factory constructed with filter configurations : {}
2022-07-04 23:24:33,550 DEBUG (SessionFactoryImpl.java:252) - Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, hibernate.format_sql=true, java.specification.version=11, sun.cpu.isalist=amd64, sun.jnu.encoding=MS949, hibernate.dialect=org.hibernate.dialect.MySQL8Dialect, java.class.path=C:\Users\신동혁\playdata\20220509_lab\03.web\concertProject\concert\target\classes;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\annotations-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-ant.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-ha.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-ssi.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-storeconfig.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-tribes.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\ecj-4.20.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\el-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jasper-el.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jasper.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jaspic-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jsp-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\servlet-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-coyote.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-dbcp.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-cs.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-de.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-es.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-fr.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-ja.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-ko.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-pt-BR.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-ru.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-zh-CN.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-jdbc.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-jni.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-util-scan.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-util.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-websocket.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\websocket-api.jar;C:\Users\신동혁\.m2\repository\javax\persistence\javax.persistence-api\2.2\javax.persistence-api-2.2.jar;C:\Users\신동혁\.m2\repository\org\hibernate\hibernate-entitymanager\5.4.2.Final\hibernate-entitymanager-5.4.2.Final.jar;C:\Users\신동혁\.m2\repository\org\jboss\logging\jboss-logging\3.3.2.Final\jboss-logging-3.3.2.Final.jar;C:\Users\신동혁\.m2\repository\org\hibernate\hibernate-core\5.4.2.Final\hibernate-core-5.4.2.Final.jar;C:\Users\신동혁\.m2\repository\org\javassist\javassist\3.24.0-GA\javassist-3.24.0-GA.jar;C:\Users\신동혁\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\신동혁\.m2\repository\org\jboss\jandex\2.0.5.Final\jandex-2.0.5.Final.jar;C:\Users\신동혁\.m2\repository\com\fasterxml\classmate\1.3.4\classmate-1.3.4.jar;C:\Users\신동혁\.m2\repository\javax\activation\javax.activation-api\1.2.0\javax.activation-api-1.2.0.jar;C:\Users\신동혁\.m2\repository\javax\xml\bind\jaxb-api\2.3.1\jaxb-api-2.3.1.jar;C:\Users\신동혁\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.1\jaxb-runtime-2.3.1.jar;C:\Users\신동혁\.m2\repository\org\glassfish\jaxb\txw2\2.3.1\txw2-2.3.1.jar;C:\Users\신동혁\.m2\repository\com\sun\istack\istack-commons-runtime\3.0.7\istack-commons-runtime-3.0.7.jar;C:\Users\신동혁\.m2\repository\org\jvnet\staxex\stax-ex\1.8\stax-ex-1.8.jar;C:\Users\신동혁\.m2\repository\com\sun\xml\fastinfoset\FastInfoset\1.2.15\FastInfoset-1.2.15.jar;C:\Users\신동혁\.m2\repository\org\dom4j\dom4j\2.1.1\dom4j-2.1.1.jar;C:\Users\신동혁\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.1.0.Final\hibernate-commons-annotations-5.1.0.Final.jar;C:\Users\신동혁\.m2\repository\net\bytebuddy\byte-buddy\1.9.10\byte-buddy-1.9.10.jar;C:\Users\신동혁\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.1.1.Final\jboss-transaction-api_1.2_spec-1.1.1.Final.jar;C:\Users\신동혁\.m2\repository\junit\junit\4.13.2\junit-4.13.2.jar;C:\Users\신동혁\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\신동혁\.m2\repository\org\projectlombok\lombok\1.18.24\lombok-1.18.24.jar;C:\Users\신동혁\.m2\repository\com\jslsolucoes\ojdbc6\11.2.0.1.0\ojdbc6-11.2.0.1.0.jar;C:\Users\신동혁\.m2\repository\mysql\mysql-connector-java\8.0.29\mysql-connector-java-8.0.29.jar;C:\Users\신동혁\.m2\repository\com\google\protobuf\protobuf-java\3.19.4\protobuf-java-3.19.4.jar;C:\Users\신동혁\.m2\repository\org\slf4j\slf4j-api\1.7.5\slf4j-api-1.7.5.jar;C:\Users\신동혁\.m2\repository\org\slf4j\slf4j-log4j12\1.7.5\slf4j-log4j12-1.7.5.jar;C:\Users\신동혁\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\신동혁\.m2\repository\org\modelmapper\modelmapper\2.4.0\modelmapper-2.4.0.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Asia/Seoul, javax.persistence.jdbc.url=jdbc:mysql://localhost/playdata?characterEncoding=UTF-8, javax.persistence.jdbc.user=****, os.name=Windows 10, java.vm.specification.version=11, sun.java.launcher=SUN_STANDARD, user.country=KR, sun.boot.library.path=C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11\bin, sun.java.command=cocert.model.dao.Test, jdk.debug=release, sun.cpu.endian=little, user.home=C:\Users\신동혁, user.language=ko, java.specification.vendor=Oracle Corporation, java.version.date=2018-09-25, java.home=C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11, file.separator=\, java.vm.compressedOopsMode=32-bit, line.separator=
, java.specification.name=Java Platform API Specification, java.vm.specification.vendor=Oracle Corporation, hibernate.transaction.coordinator_class=class org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, javax.persistence.jdbc.driver=com.mysql.cj.jdbc.Driver, hibernate.hbm2ddl.auto=none, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=11+28, user.name=Shin, path.separator=;, hibernate.connection.username=****, os.version=10.0, java.runtime.name=OpenJDK Runtime Environment, hibernate.connection.url=jdbc:mysql://localhost/playdata?characterEncoding=UTF-8, file.encoding=UTF-8, hibernate.ejb.persistenceUnitName=dbinfo, java.vm.name=OpenJDK 64-Bit Server VM, hibernate.show_sql=true, java.vendor.version=18.9, hibernate.connection.driver_class=com.mysql.cj.jdbc.Driver, java.vendor.url.bug=http://bugreport.java.com/bugreport/, java.io.tmpdir=C:\Users\신동혁\AppData\Local\Temp\, java.version=11, user.dir=C:\Users\신동혁\playdata\20220509_lab\03.web\concertProject\concert, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.password=****, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@2c58dcb1, java.library.path=C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Users/신동혁/playdata/20220509_lab/99.devEnv/eclipse//plugins/org.eclipse.justj.openjdk.hotspot.jre.full.win32.x86_64_16.0.1.v20210528-1205/jre/bin/server;C:/Users/신동혁/playdata/20220509_lab/99.devEnv/eclipse//plugins/org.eclipse.justj.openjdk.hotspot.jre.full.win32.x86_64_16.0.1.v20210528-1205/jre/bin;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11\bin;C:\oraclexe\app\oracle\product\11.2.0\server\bin;C:\Program Files\MySQL\MySQL Server 8.0\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\Bandizip\;C:\Program Files\Git\cmd;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\신동혁\AppData\Local\Programs\Python\Python39\Scripts\;C:\Users\신동혁\AppData\Local\Programs\Python\Python39\;C:\Users\신동혁\AppData\Local\Microsoft\WindowsApps;C:\Users\신동혁\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\eclipse;;., java.vendor=Oracle Corporation, java.vm.info=mixed mode, java.vm.version=11+28, hibernate.bytecode.use_reflection_optimizer=false, sun.io.unicode.encoding=UnicodeLittle, javax.persistence.jdbc.password=****, java.class.version=55.0}
2022-07-04 23:24:33,589 DEBUG (JaccIntegrator.java:80) - Skipping JACC integration as it was not enabled
2022-07-04 23:24:33,592 DEBUG (SessionFactoryImpl.java:291) - Instantiated session factory
2022-07-04 23:24:33,592 DEBUG (TypeConfiguration.java:157) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@340b7ef6] to SessionFactoryImpl [org.hibernate.internal.SessionFactoryImpl@5fe7f967]
2022-07-04 23:24:33,715 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Concert] is safe
2022-07-04 23:24:33,715 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Concert
2022-07-04 23:24:33,764 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Concert] is safe
2022-07-04 23:24:33,764 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Concert
2022-07-04 23:24:34,396 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Orders] is safe
2022-07-04 23:24:34,398 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Orders
2022-07-04 23:24:34,398 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Orders] is safe
2022-07-04 23:24:34,399 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Orders
2022-07-04 23:24:34,445 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.ConcertSinger] is safe
2022-07-04 23:24:34,445 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.ConcertSinger
2022-07-04 23:24:34,446 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.ConcertSinger] is safe
2022-07-04 23:24:34,446 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.ConcertSinger
2022-07-04 23:24:34,496 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Singer] is safe
2022-07-04 23:24:34,496 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Singer
2022-07-04 23:24:34,498 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Singer] is safe
2022-07-04 23:24:34,498 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Singer
2022-07-04 23:24:34,583 DEBUG (AbstractCollectionPersister.java:688) - Static SQL for collection: concert.model.entity.Singer.concertSinger
2022-07-04 23:24:34,584 DEBUG (AbstractCollectionPersister.java:690) -  Row insert: update concert_singer set singer_id=? where concert_singer_id=?
2022-07-04 23:24:34,584 DEBUG (AbstractCollectionPersister.java:693) -  Row update: update concert_singer set  where concert_singer_id=?
2022-07-04 23:24:34,584 DEBUG (AbstractCollectionPersister.java:696) -  Row delete: update concert_singer set singer_id=null where singer_id=? and concert_singer_id=?
2022-07-04 23:24:34,585 DEBUG (AbstractCollectionPersister.java:699) -  One-shot delete: update concert_singer set singer_id=null where singer_id=?
2022-07-04 23:24:34,586 DEBUG (AbstractCollectionPersister.java:688) - Static SQL for collection: concert.model.entity.Concert.order
2022-07-04 23:24:34,587 DEBUG (AbstractCollectionPersister.java:690) -  Row insert: update Orders set concert_id=? where order_id=?
2022-07-04 23:24:34,587 DEBUG (AbstractCollectionPersister.java:693) -  Row update: update Orders set  where order_id=?
2022-07-04 23:24:34,588 DEBUG (AbstractCollectionPersister.java:696) -  Row delete: update Orders set concert_id=null where concert_id=? and order_id=?
2022-07-04 23:24:34,589 DEBUG (AbstractCollectionPersister.java:699) -  One-shot delete: update Orders set concert_id=null where concert_id=?
2022-07-04 23:24:34,590 DEBUG (AbstractCollectionPersister.java:688) - Static SQL for collection: concert.model.entity.Concert.concertSinger
2022-07-04 23:24:34,590 DEBUG (AbstractCollectionPersister.java:690) -  Row insert: update concert_singer set concert_id=? where concert_singer_id=?
2022-07-04 23:24:34,590 DEBUG (AbstractCollectionPersister.java:693) -  Row update: update concert_singer set  where concert_singer_id=?
2022-07-04 23:24:34,591 DEBUG (AbstractCollectionPersister.java:696) -  Row delete: update concert_singer set concert_id=null where concert_id=? and concert_singer_id=?
2022-07-04 23:24:34,591 DEBUG (AbstractCollectionPersister.java:699) -  One-shot delete: update concert_singer set concert_id=null where concert_id=?
2022-07-04 23:24:34,608 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.Concert
2022-07-04 23:24:34,608 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select concert_id from Concert where concert_id =?
2022-07-04 23:24:34,609 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select concert_.concert_id, concert_.concert_name as concert_2_0_, concert_.contents as contents3_0_, concert_.date as date4_0_, concert_.location as location5_0_, concert_.max_seats as max_seat6_0_ from Concert concert_ where concert_.concert_id=?
2022-07-04 23:24:34,609 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Concert (concert_name, contents, date, location, max_seats, concert_id) values (?, ?, ?, ?, ?, ?)
2022-07-04 23:24:34,609 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Concert set concert_name=?, contents=?, date=?, location=?, max_seats=? where concert_id=?
2022-07-04 23:24:34,610 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Concert where concert_id=?
2022-07-04 23:24:34,610 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into Concert (concert_name, contents, date, location, max_seats) values (?, ?, ?, ?, ?)
2022-07-04 23:24:34,674 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4e642ee1]
2022-07-04 23:24:34,679 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertName
2022-07-04 23:24:34,680 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 23:24:34,696 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@751ae8a4]
2022-07-04 23:24:34,701 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7e307087]
2022-07-04 23:24:34,703 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : contents
2022-07-04 23:24:34,704 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : date
2022-07-04 23:24:34,704 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : location
2022-07-04 23:24:34,705 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : maxSeats
2022-07-04 23:24:34,705 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : order
2022-07-04 23:24:34,706 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@4bcaa195]
2022-07-04 23:24:34,707 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@d08edc5]
2022-07-04 23:24:34,707 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:24:34,746 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:24:34,758 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Concert)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:0>, path=concert.model.entity.Concert)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Concert.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Concert.concertSinger.<elements>)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.order, querySpaceUid=<gen:3>, path=concert.model.entity.Concert.order)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.Orders, querySpaceUid=<gen:4>, path=concert.model.entity.Concert.order.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Concert)
          - SQL table alias mapping - concert0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_0_0_}

2022-07-04 23:24:34,764 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Concert [NONE]: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 23:24:34,765 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7c2924d7]
2022-07-04 23:24:34,766 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertName
2022-07-04 23:24:34,767 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 23:24:34,768 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6587305a]
2022-07-04 23:24:34,769 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@abbe000]
2022-07-04 23:24:34,770 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : contents
2022-07-04 23:24:34,770 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : date
2022-07-04 23:24:34,770 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : location
2022-07-04 23:24:34,771 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : maxSeats
2022-07-04 23:24:34,771 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : order
2022-07-04 23:24:34,771 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@3f81621c]
2022-07-04 23:24:34,772 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5b9499fe]
2022-07-04 23:24:34,773 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:24:34,773 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:24:34,775 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Concert)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:0>, path=concert.model.entity.Concert)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Concert.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Concert.concertSinger.<elements>)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.order, querySpaceUid=<gen:3>, path=concert.model.entity.Concert.order)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.Orders, querySpaceUid=<gen:4>, path=concert.model.entity.Concert.order.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Concert)
          - SQL table alias mapping - concert0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_0_0_}

2022-07-04 23:24:34,775 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Concert [READ]: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 23:24:34,823 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.Concert: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 23:24:34,824 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.Concert: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 23:24:34,825 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.Orders
2022-07-04 23:24:34,826 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select order_id from Orders where order_id =?
2022-07-04 23:24:34,826 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select orders_.order_id, orders_.amount as amount2_2_, orders_.concert_id as concert_3_2_, orders_.customer_email as customer4_2_, orders_.customer_name as customer5_2_ from Orders orders_ where orders_.order_id=?
2022-07-04 23:24:34,827 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Orders (amount, concert_id, customer_email, customer_name, order_id) values (?, ?, ?, ?, ?)
2022-07-04 23:24:34,827 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Orders set amount=?, concert_id=?, customer_email=?, customer_name=? where order_id=?
2022-07-04 23:24:34,827 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Orders where order_id=?
2022-07-04 23:24:34,828 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into Orders (amount, concert_id, customer_email, customer_name) values (?, ?, ?, ?)
2022-07-04 23:24:34,828 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@38cedb7d]
2022-07-04 23:24:34,829 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : amount
2022-07-04 23:24:34,829 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:24:34,831 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2acdcce8]
2022-07-04 23:24:34,833 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert_id
2022-07-04 23:24:34,834 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerEmail
2022-07-04 23:24:34,834 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerName
2022-07-04 23:24:34,835 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:24:34,836 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:24:34,837 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Orders)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Orders, querySpaceUid=<gen:0>, path=concert.model.entity.Orders)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.Orders.concert)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {order_id1_2_0_}

2022-07-04 23:24:34,838 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Orders [NONE]: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 23:24:34,839 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@d5bb1c4]
2022-07-04 23:24:34,840 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : amount
2022-07-04 23:24:34,840 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:24:34,840 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@465b38e6]
2022-07-04 23:24:34,841 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert_id
2022-07-04 23:24:34,842 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerEmail
2022-07-04 23:24:34,842 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerName
2022-07-04 23:24:34,843 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:24:34,845 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:24:34,846 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Orders)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Orders, querySpaceUid=<gen:0>, path=concert.model.entity.Orders)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.Orders.concert)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {order_id1_2_0_}

2022-07-04 23:24:34,847 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Orders [READ]: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 23:24:34,848 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.Orders: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 23:24:34,850 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.Orders: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 23:24:34,850 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.ConcertSinger
2022-07-04 23:24:34,851 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select concert_singer_id from concert_singer where concert_singer_id =?
2022-07-04 23:24:34,851 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select concertsin_.concert_singer_id, concertsin_.concert_id as concert_2_1_, concertsin_.singer_id as singer_i3_1_ from concert_singer concertsin_ where concertsin_.concert_singer_id=?
2022-07-04 23:24:34,852 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into concert_singer (concert_id, singer_id, concert_singer_id) values (?, ?, ?)
2022-07-04 23:24:34,852 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update concert_singer set concert_id=?, singer_id=? where concert_singer_id=?
2022-07-04 23:24:34,853 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from concert_singer where concert_singer_id=?
2022-07-04 23:24:34,853 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into concert_singer (concert_id, singer_id) values (?, ?)
2022-07-04 23:24:34,854 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4b960b5b]
2022-07-04 23:24:34,854 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:24:34,855 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7bd96822]
2022-07-04 23:24:34,855 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 23:24:34,856 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 23:24:34,856 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@64dae3b7]
2022-07-04 23:24:34,858 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 23:24:34,858 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:24:34,859 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:24:34,860 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.ConcertSinger)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:0>, path=concert.model.entity.ConcertSinger)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.ConcertSinger.concert)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:2>, path=concert.model.entity.ConcertSinger.singer)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.ConcertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_1_0_}

2022-07-04 23:24:34,861 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.ConcertSinger [NONE]: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 23:24:34,862 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1fedf0a4]
2022-07-04 23:24:34,863 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:24:34,863 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2ee48610]
2022-07-04 23:24:34,864 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 23:24:34,865 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 23:24:34,865 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1d901f20]
2022-07-04 23:24:34,866 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 23:24:34,866 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:24:34,867 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:24:34,867 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.ConcertSinger)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:0>, path=concert.model.entity.ConcertSinger)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.ConcertSinger.concert)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:2>, path=concert.model.entity.ConcertSinger.singer)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.ConcertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_1_0_}

2022-07-04 23:24:34,867 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.ConcertSinger [READ]: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 23:24:34,869 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.ConcertSinger: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 23:24:34,870 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.ConcertSinger: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 23:24:34,871 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.Singer
2022-07-04 23:24:34,871 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select singer_id from Singer where singer_id =?
2022-07-04 23:24:34,872 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select singer_.singer_id, singer_.detail as detail2_3_, singer_.singer_name as singer_n3_3_ from Singer singer_ where singer_.singer_id=?
2022-07-04 23:24:34,872 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Singer (detail, singer_name, singer_id) values (?, ?, ?)
2022-07-04 23:24:34,872 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Singer set detail=?, singer_name=? where singer_id=?
2022-07-04 23:24:34,872 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Singer where singer_id=?
2022-07-04 23:24:34,872 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into Singer (detail, singer_name) values (?, ?)
2022-07-04 23:24:34,872 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6d08b4e6]
2022-07-04 23:24:34,874 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 23:24:34,875 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1acb74ad]
2022-07-04 23:24:34,876 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7bf01cb]
2022-07-04 23:24:34,877 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : detail
2022-07-04 23:24:34,878 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerName
2022-07-04 23:24:34,879 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:24:34,880 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:24:34,881 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Singer)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:0>, path=concert.model.entity.Singer)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Singer.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Singer.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Singer.concertSinger.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Singer)
          - SQL table alias mapping - singer0_
          - alias suffix - 0_
          - suffixed key columns - {singer_i1_3_0_}

2022-07-04 23:24:34,882 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Singer [NONE]: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 23:24:34,882 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2f382a5e]
2022-07-04 23:24:34,883 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 23:24:34,884 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@539a138b]
2022-07-04 23:24:34,884 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2cd4e16a]
2022-07-04 23:24:34,885 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : detail
2022-07-04 23:24:34,885 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerName
2022-07-04 23:24:34,885 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:24:34,886 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:24:34,887 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Singer)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:0>, path=concert.model.entity.Singer)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Singer.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Singer.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Singer.concertSinger.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Singer)
          - SQL table alias mapping - singer0_
          - alias suffix - 0_
          - suffixed key columns - {singer_i1_3_0_}

2022-07-04 23:24:34,888 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Singer [READ]: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 23:24:34,890 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.Singer: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 23:24:34,890 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.Singer: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 23:24:34,903 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@7affc159]
2022-07-04 23:24:34,904 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1682c08c]
2022-07-04 23:24:34,910 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:24:34,910 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2f14b0f6]
2022-07-04 23:24:34,911 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 23:24:34,911 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 23:24:34,912 DEBUG (MetamodelGraphWalker.java:154) - Property path deemed to be circular : singer
2022-07-04 23:24:34,912 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 23:24:34,914 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:24:34,924 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:24:34,925 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(collection=concert.model.entity.Singer.concertSinger)
    - Returns
       - CollectionReturnImpl(collection=concert.model.entity.Singer.concertSinger, querySpaceUid=<gen:0>, path=[concert.model.entity.Singer.concertSinger])
          - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:1>, path=[concert.model.entity.Singer.concertSinger].<elements>)
             - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:2>, path=[concert.model.entity.Singer.concertSinger].<elements>.concert)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=concert.model.entity.Singer.concertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {singer_i3_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - concert_1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=concert.model.entity.ConcertSinger)
                - SQL table alias mapping - concertsin0_
                - alias suffix - 1_
                - suffixed key columns - {concert_1_1_1_}

2022-07-04 23:24:34,926 DEBUG (CollectionLoader.java:83) - Static select for collection concert.model.entity.Singer.concertSinger: select concertsin0_.singer_id as singer_i3_1_0_, concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_singer_id as concert_1_1_1_, concertsin0_.concert_id as concert_2_1_1_, concertsin0_.singer_id as singer_i3_1_1_ from concert_singer concertsin0_ where concertsin0_.singer_id=?
2022-07-04 23:24:34,927 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@273a5a8a]
2022-07-04 23:24:34,927 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1823b9c4]
2022-07-04 23:24:34,928 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : amount
2022-07-04 23:24:34,928 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:24:34,929 DEBUG (MetamodelGraphWalker.java:154) - Property path deemed to be circular : concert
2022-07-04 23:24:34,929 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert_id
2022-07-04 23:24:34,930 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerEmail
2022-07-04 23:24:34,930 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerName
2022-07-04 23:24:34,931 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:24:34,932 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:24:34,933 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(collection=concert.model.entity.Concert.order)
    - Returns
       - CollectionReturnImpl(collection=concert.model.entity.Concert.order, querySpaceUid=<gen:0>, path=[concert.model.entity.Concert.order])
          - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.Orders, querySpaceUid=<gen:1>, path=[concert.model.entity.Concert.order].<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=concert.model.entity.Concert.order)
          - SQL table alias mapping - order0_
          - alias suffix - 0_
          - suffixed key columns - {concert_3_2_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - order_id1_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=concert.model.entity.Orders)
                - SQL table alias mapping - order0_
                - alias suffix - 1_
                - suffixed key columns - {order_id1_2_1_}

2022-07-04 23:24:34,935 DEBUG (CollectionLoader.java:83) - Static select for collection concert.model.entity.Concert.order: select order0_.concert_id as concert_3_2_0_, order0_.order_id as order_id1_2_0_, order0_.order_id as order_id1_2_1_, order0_.amount as amount2_2_1_, order0_.concert_id as concert_3_2_1_, order0_.customer_email as customer4_2_1_, order0_.customer_name as customer5_2_1_ from Orders order0_ where order0_.concert_id=?
2022-07-04 23:24:34,935 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@adcfad9]
2022-07-04 23:24:34,936 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@fb49fdf]
2022-07-04 23:24:34,936 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:24:34,936 DEBUG (MetamodelGraphWalker.java:154) - Property path deemed to be circular : concert
2022-07-04 23:24:34,936 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 23:24:34,937 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 23:24:34,937 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@10c47c79]
2022-07-04 23:24:34,938 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 23:24:34,938 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:24:34,939 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:24:34,940 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(collection=concert.model.entity.Concert.concertSinger)
    - Returns
       - CollectionReturnImpl(collection=concert.model.entity.Concert.concertSinger, querySpaceUid=<gen:0>, path=[concert.model.entity.Concert.concertSinger])
          - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:1>, path=[concert.model.entity.Concert.concertSinger].<elements>)
             - EntityAttributeFetchImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:2>, path=[concert.model.entity.Concert.concertSinger].<elements>.singer)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=concert.model.entity.Concert.concertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {concert_2_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - concert_1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=concert.model.entity.ConcertSinger)
                - SQL table alias mapping - concertsin0_
                - alias suffix - 1_
                - suffixed key columns - {concert_1_1_1_}

2022-07-04 23:24:34,940 DEBUG (CollectionLoader.java:83) - Static select for collection concert.model.entity.Concert.concertSinger: select concertsin0_.concert_id as concert_2_1_0_, concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_singer_id as concert_1_1_1_, concertsin0_.concert_id as concert_2_1_1_, concertsin0_.singer_id as singer_i3_1_1_ from concert_singer concertsin0_ where concertsin0_.concert_id=?
2022-07-04 23:24:35,029 DEBUG (SchemaManagementToolCoordinator.java:57) - No actions specified; doing nothing
2022-07-04 23:24:35,029 DEBUG (JtaPlatformInitiator.java:43) - No JtaPlatform was specified, checking resolver
2022-07-04 23:24:35,032 DEBUG (JtaPlatformResolverInitiator.java:33) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2022-07-04 23:24:35,043 DEBUG (StandardJtaPlatformResolver.java:137) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2022-07-04 23:24:35,044  INFO (JtaPlatformInitiator.java:52) - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2022-07-04 23:24:35,047 DEBUG (NamedQueryRepository.java:151) - Checking 0 named HQL queries
2022-07-04 23:24:35,047 DEBUG (NamedQueryRepository.java:167) - Checking 0 named SQL queries
2022-07-04 23:24:35,052 DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@787508ca
2022-07-04 23:24:35,056 DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: f5366c8f-e55d-4693-8cdb-097ba695c473 (<unnamed>)
2022-07-04 23:24:35,056 DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2022-07-04 23:24:35,215 DEBUG (StatisticsInitiator.java:101) - Statistics initialized [enabled=false]
2022-07-04 23:24:35,232 DEBUG (TransactionImpl.java:56) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2022-07-04 23:24:35,233 DEBUG (TransactionImpl.java:84) - begin
2022-07-04 23:24:35,271 DEBUG (QueryTranslatorFactoryInitiator.java:45) - QueryTranslatorFactory: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@5e230fc6
2022-07-04 23:24:35,327 DEBUG (QueryTranslatorImpl.java:288) - parse() - HQL: select c from concert.model.entity.Concert c
2022-07-04 23:24:35,336 DEBUG (ErrorTracker.java:97) - throwQueryException() : no errors
2022-07-04 23:24:35,352 DEBUG (QueryTranslatorImpl.java:309) - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'concert'
       |     |  |  |  \-[IDENT] Node: 'model'
       |     |  |  \-[IDENT] Node: 'entity'
       |     |  \-[IDENT] Node: 'Concert'
       |     \-[ALIAS] Node: 'c'
       \-[SELECT] Node: 'select'
          \-[IDENT] Node: 'c'

2022-07-04 23:24:35,397 DEBUG (HqlSqlBaseWalker.java:124) - select << begin [level=1, statement=select]
2022-07-04 23:24:35,448 DEBUG (FromElement.java:146) - FromClause{level=1} : concert.model.entity.Concert (c) -> concert0_
2022-07-04 23:24:35,450 DEBUG (FromReferenceNode.java:60) - Resolved : c -> concert0_.concert_id
2022-07-04 23:24:35,455 DEBUG (HqlSqlBaseWalker.java:128) - select : finishing up [level=1, statement=select]
2022-07-04 23:24:35,455 DEBUG (HqlSqlWalker.java:752) - processQuery() :  ( SELECT ( {select clause} concert0_.concert_id ) ( FromClause{level=1} Concert concert0_ ) )
2022-07-04 23:24:35,480 DEBUG (JoinProcessor.java:192) - Using FROM fragment [Concert concert0_]
2022-07-04 23:24:35,481 DEBUG (HqlSqlBaseWalker.java:132) - select >> end [level=1, statement=select]
2022-07-04 23:24:35,482 DEBUG (QueryTranslatorImpl.java:275) - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Concert)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'concert0_.concert_id as concert_1_0_' {alias=c, className=concert.model.entity.Concert, tableAlias=concert0_}
    |  \-[SQL_TOKEN] SqlFragment: 'concert0_.concert_name as concert_2_0_, concert0_.contents as contents3_0_, concert0_.date as date4_0_, concert0_.location as location5_0_, concert0_.max_seats as max_seat6_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[c], fromElementByTableAlias=[concert0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Concert concert0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=c,role=null,tableName=Concert,tableAlias=concert0_,origin=null,columns={,className=concert.model.entity.Concert}}

2022-07-04 23:24:35,483 DEBUG (ErrorTracker.java:97) - throwQueryException() : no errors
2022-07-04 23:24:35,499 DEBUG (QueryTranslatorImpl.java:254) - HQL: select c from concert.model.entity.Concert c
2022-07-04 23:24:35,499 DEBUG (QueryTranslatorImpl.java:255) - SQL: select concert0_.concert_id as concert_1_0_, concert0_.concert_name as concert_2_0_, concert0_.contents as contents3_0_, concert0_.date as date4_0_, concert0_.location as location5_0_, concert0_.max_seats as max_seat6_0_ from Concert concert0_
2022-07-04 23:24:35,500 DEBUG (ErrorTracker.java:97) - throwQueryException() : no errors
2022-07-04 23:24:35,535 DEBUG (SqlStatementLogger.java:94) - 
    select
        concert0_.concert_id as concert_1_0_,
        concert0_.concert_name as concert_2_0_,
        concert0_.contents as contents3_0_,
        concert0_.date as date4_0_,
        concert0_.location as location5_0_,
        concert0_.max_seats as max_seat6_0_ 
    from
        Concert concert0_
2022-07-04 23:24:35,576 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 0
2022-07-04 23:24:35,585 DEBUG (Loader.java:1538) - Result row: EntityKey[concert.model.entity.Concert#1]
2022-07-04 23:24:35,605 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 1
2022-07-04 23:24:35,606 DEBUG (Loader.java:1538) - Result row: EntityKey[concert.model.entity.Concert#2]
2022-07-04 23:24:35,607 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 2
2022-07-04 23:24:35,608 DEBUG (Loader.java:1538) - Result row: EntityKey[concert.model.entity.Concert#3]
2022-07-04 23:24:35,609 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 3
2022-07-04 23:24:35,610 DEBUG (Loader.java:1538) - Result row: EntityKey[concert.model.entity.Concert#4]
2022-07-04 23:24:35,610 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 4
2022-07-04 23:24:35,611 DEBUG (Loader.java:1538) - Result row: EntityKey[concert.model.entity.Concert#5]
2022-07-04 23:24:35,612 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 5
2022-07-04 23:24:35,613 DEBUG (Loader.java:1538) - Result row: EntityKey[concert.model.entity.Concert#6]
2022-07-04 23:24:35,614 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 6
2022-07-04 23:24:35,614 DEBUG (Loader.java:1538) - Result row: EntityKey[concert.model.entity.Concert#7]
2022-07-04 23:24:35,618 DEBUG (TwoPhaseLoad.java:145) - Resolving associations for [concert.model.entity.Concert#1]
2022-07-04 23:24:35,638 DEBUG (TwoPhaseLoad.java:288) - Done materializing entity [concert.model.entity.Concert#1]
2022-07-04 23:24:35,638 DEBUG (TwoPhaseLoad.java:145) - Resolving associations for [concert.model.entity.Concert#2]
2022-07-04 23:24:35,639 DEBUG (TwoPhaseLoad.java:288) - Done materializing entity [concert.model.entity.Concert#2]
2022-07-04 23:24:35,639 DEBUG (TwoPhaseLoad.java:145) - Resolving associations for [concert.model.entity.Concert#3]
2022-07-04 23:24:35,640 DEBUG (TwoPhaseLoad.java:288) - Done materializing entity [concert.model.entity.Concert#3]
2022-07-04 23:24:35,640 DEBUG (TwoPhaseLoad.java:145) - Resolving associations for [concert.model.entity.Concert#4]
2022-07-04 23:24:35,642 DEBUG (TwoPhaseLoad.java:288) - Done materializing entity [concert.model.entity.Concert#4]
2022-07-04 23:24:35,643 DEBUG (TwoPhaseLoad.java:145) - Resolving associations for [concert.model.entity.Concert#5]
2022-07-04 23:24:35,644 DEBUG (TwoPhaseLoad.java:288) - Done materializing entity [concert.model.entity.Concert#5]
2022-07-04 23:24:35,644 DEBUG (TwoPhaseLoad.java:145) - Resolving associations for [concert.model.entity.Concert#6]
2022-07-04 23:24:35,644 DEBUG (TwoPhaseLoad.java:288) - Done materializing entity [concert.model.entity.Concert#6]
2022-07-04 23:24:35,646 DEBUG (TwoPhaseLoad.java:145) - Resolving associations for [concert.model.entity.Concert#7]
2022-07-04 23:24:35,648 DEBUG (TwoPhaseLoad.java:288) - Done materializing entity [concert.model.entity.Concert#7]
2022-07-04 23:24:35,888 DEBUG (TransactionImpl.java:142) - rolling back
2022-07-04 23:24:35,891 DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2022-07-04 23:24:35,892 DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2022-07-04 23:26:17,757 DEBUG (HibernatePersistenceProvider.java:38) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2022-07-04 23:26:18,652 DEBUG (HibernatePersistenceProvider.java:88) - Located and parsed 1 persistence units; checking each
2022-07-04 23:26:18,659 DEBUG (HibernatePersistenceProvider.java:96) - Checking persistence-unit [name=dbinfo, explicit-provider=null] against incoming persistence unit name [dbinfo]
2022-07-04 23:26:18,661 DEBUG (ProviderChecker.java:95) - No PersistenceProvider explicitly requested, assuming Hibernate
2022-07-04 23:26:18,703 DEBUG (LogHelper.java:102) - PersistenceUnitInfo [
	name: dbinfo
	persistence provider classname: null
	classloader: null
	excludeUnlistedClasses: false
	JTA datasource: null
	Non JTA datasource: null
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/%ec%8b%a0%eb%8f%99%ed%98%81/playdata/20220509_lab/03.web/concertProject/concert/target/classes
	Shared Cache Mode: null
	Validation Mode: null
	Jar files URLs []
	Managed classes names [
		concert.model.entity.Concert
		concert.model.entity.ConcertSinger
		concert.model.entity.Orders
		concert.model.entity.Singer]
	Mapping files names []
	Properties [
		javax.persistence.jdbc.driver: com.mysql.cj.jdbc.Driver
		javax.persistence.jdbc.password: playdata
		hibernate.dialect: org.hibernate.dialect.MySQL8Dialect
		javax.persistence.jdbc.url: jdbc:mysql://localhost/playdata?characterEncoding=UTF-8
		hibernate.show_sql: true
		hibernate.hbm2ddl.auto: none
		hibernate.format_sql: true
		javax.persistence.jdbc.user: root]
2022-07-04 23:26:18,728 DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2022-07-04 23:26:18,741 DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2022-07-04 23:26:18,772 DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2022-07-04 23:26:19,098  INFO (Version.java:46) - HHH000412: Hibernate Core {5.4.2.Final}
2022-07-04 23:26:19,107 DEBUG (Environment.java:199) - HHH000206: hibernate.properties not found
2022-07-04 23:26:19,907 DEBUG (ServiceBinding.java:68) - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
2022-07-04 23:26:20,060 DEBUG (RegionFactoryInitiator.java:118) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2022-07-04 23:26:20,065 DEBUG (RegionFactoryInitiator.java:49) - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2022-07-04 23:26:20,154  INFO (JavaReflectionManager.java:49) - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2022-07-04 23:26:22,260 DEBUG (BasicTypeRegistry.java:156) - Adding type registration boolean -> org.hibernate.type.BooleanType@19b93fa8
2022-07-04 23:26:22,261 DEBUG (BasicTypeRegistry.java:156) - Adding type registration boolean -> org.hibernate.type.BooleanType@19b93fa8
2022-07-04 23:26:22,265 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@19b93fa8
2022-07-04 23:26:22,266 DEBUG (BasicTypeRegistry.java:156) - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@8ad6665
2022-07-04 23:26:22,268 DEBUG (BasicTypeRegistry.java:156) - Adding type registration true_false -> org.hibernate.type.TrueFalseType@bcef303
2022-07-04 23:26:22,270 DEBUG (BasicTypeRegistry.java:156) - Adding type registration yes_no -> org.hibernate.type.YesNoType@4f9a2c08
2022-07-04 23:26:22,276 DEBUG (BasicTypeRegistry.java:156) - Adding type registration byte -> org.hibernate.type.ByteType@386f0da3
2022-07-04 23:26:22,279 DEBUG (BasicTypeRegistry.java:156) - Adding type registration byte -> org.hibernate.type.ByteType@386f0da3
2022-07-04 23:26:22,282 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@386f0da3
2022-07-04 23:26:22,296 DEBUG (BasicTypeRegistry.java:156) - Adding type registration character -> org.hibernate.type.CharacterType@344f4dea
2022-07-04 23:26:22,297 DEBUG (BasicTypeRegistry.java:156) - Adding type registration char -> org.hibernate.type.CharacterType@344f4dea
2022-07-04 23:26:22,297 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@344f4dea
2022-07-04 23:26:22,302 DEBUG (BasicTypeRegistry.java:156) - Adding type registration short -> org.hibernate.type.ShortType@6c0d9d86
2022-07-04 23:26:22,303 DEBUG (BasicTypeRegistry.java:156) - Adding type registration short -> org.hibernate.type.ShortType@6c0d9d86
2022-07-04 23:26:22,303 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@6c0d9d86
2022-07-04 23:26:22,306 DEBUG (BasicTypeRegistry.java:156) - Adding type registration integer -> org.hibernate.type.IntegerType@16ce702d
2022-07-04 23:26:22,307 DEBUG (BasicTypeRegistry.java:156) - Adding type registration int -> org.hibernate.type.IntegerType@16ce702d
2022-07-04 23:26:22,307 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@16ce702d
2022-07-04 23:26:22,309 DEBUG (BasicTypeRegistry.java:156) - Adding type registration long -> org.hibernate.type.LongType@2ea6e30c
2022-07-04 23:26:22,310 DEBUG (BasicTypeRegistry.java:156) - Adding type registration long -> org.hibernate.type.LongType@2ea6e30c
2022-07-04 23:26:22,310 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Long -> org.hibernate.type.LongType@2ea6e30c
2022-07-04 23:26:22,313 DEBUG (BasicTypeRegistry.java:156) - Adding type registration float -> org.hibernate.type.FloatType@531f4093
2022-07-04 23:26:22,313 DEBUG (BasicTypeRegistry.java:156) - Adding type registration float -> org.hibernate.type.FloatType@531f4093
2022-07-04 23:26:22,314 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@531f4093
2022-07-04 23:26:22,318 DEBUG (BasicTypeRegistry.java:156) - Adding type registration double -> org.hibernate.type.DoubleType@16fdec90
2022-07-04 23:26:22,319 DEBUG (BasicTypeRegistry.java:156) - Adding type registration double -> org.hibernate.type.DoubleType@16fdec90
2022-07-04 23:26:22,320 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@16fdec90
2022-07-04 23:26:22,325 DEBUG (BasicTypeRegistry.java:156) - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@6a55299e
2022-07-04 23:26:22,326 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@6a55299e
2022-07-04 23:26:22,330 DEBUG (BasicTypeRegistry.java:156) - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@5a18cd76
2022-07-04 23:26:22,331 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@5a18cd76
2022-07-04 23:26:22,339 DEBUG (BasicTypeRegistry.java:156) - Adding type registration string -> org.hibernate.type.StringType@77825085
2022-07-04 23:26:22,346 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.String -> org.hibernate.type.StringType@77825085
2022-07-04 23:26:22,347 DEBUG (BasicTypeRegistry.java:156) - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@5b1ebf56
2022-07-04 23:26:22,349 DEBUG (BasicTypeRegistry.java:156) - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@3549bca9
2022-07-04 23:26:22,356 DEBUG (BasicTypeRegistry.java:156) - Adding type registration url -> org.hibernate.type.UrlType@46dffdc3
2022-07-04 23:26:22,357 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.net.URL -> org.hibernate.type.UrlType@46dffdc3
2022-07-04 23:26:22,360 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Duration -> org.hibernate.type.DurationType@4748a0f9
2022-07-04 23:26:22,361 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@4748a0f9
2022-07-04 23:26:22,406 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Instant -> org.hibernate.type.InstantType@46944ca9
2022-07-04 23:26:22,407 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@46944ca9
2022-07-04 23:26:22,413 DEBUG (BasicTypeRegistry.java:156) - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@2a448449
2022-07-04 23:26:22,414 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@2a448449
2022-07-04 23:26:22,418 DEBUG (BasicTypeRegistry.java:156) - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@517566b
2022-07-04 23:26:22,419 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@517566b
2022-07-04 23:26:22,424 DEBUG (BasicTypeRegistry.java:156) - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@55322aab
2022-07-04 23:26:22,425 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@55322aab
2022-07-04 23:26:22,428 DEBUG (BasicTypeRegistry.java:156) - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@126945f9
2022-07-04 23:26:22,429 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@126945f9
2022-07-04 23:26:22,433 DEBUG (BasicTypeRegistry.java:156) - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@4879dfad
2022-07-04 23:26:22,433 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@4879dfad
2022-07-04 23:26:22,440 DEBUG (BasicTypeRegistry.java:156) - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@737a135b
2022-07-04 23:26:22,444 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@737a135b
2022-07-04 23:26:22,474 DEBUG (BasicTypeRegistry.java:156) - Adding type registration date -> org.hibernate.type.DateType@6127a7e
2022-07-04 23:26:22,477 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Date -> org.hibernate.type.DateType@6127a7e
2022-07-04 23:26:22,484 DEBUG (BasicTypeRegistry.java:156) - Adding type registration time -> org.hibernate.type.TimeType@7a1a3478
2022-07-04 23:26:22,484 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@7a1a3478
2022-07-04 23:26:22,488 DEBUG (BasicTypeRegistry.java:156) - Adding type registration timestamp -> org.hibernate.type.TimestampType@4b6690c0
2022-07-04 23:26:22,489 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@4b6690c0
2022-07-04 23:26:22,490 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@4b6690c0
2022-07-04 23:26:22,496 DEBUG (BasicTypeRegistry.java:156) - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@eda25e5
2022-07-04 23:26:22,500 DEBUG (BasicTypeRegistry.java:156) - Adding type registration calendar -> org.hibernate.type.CalendarType@35f26e72
2022-07-04 23:26:22,501 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@35f26e72
2022-07-04 23:26:22,501 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@35f26e72
2022-07-04 23:26:22,504 DEBUG (BasicTypeRegistry.java:156) - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@79351f41
2022-07-04 23:26:22,507 DEBUG (BasicTypeRegistry.java:156) - Adding type registration locale -> org.hibernate.type.LocaleType@1e0f9063
2022-07-04 23:26:22,507 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@1e0f9063
2022-07-04 23:26:22,511 DEBUG (BasicTypeRegistry.java:156) - Adding type registration currency -> org.hibernate.type.CurrencyType@3ed242a4
2022-07-04 23:26:22,511 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@3ed242a4
2022-07-04 23:26:22,518 DEBUG (BasicTypeRegistry.java:156) - Adding type registration timezone -> org.hibernate.type.TimeZoneType@13f95696
2022-07-04 23:26:22,519 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@13f95696
2022-07-04 23:26:22,528 DEBUG (BasicTypeRegistry.java:156) - Adding type registration class -> org.hibernate.type.ClassType@ebaa6cb
2022-07-04 23:26:22,530 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@ebaa6cb
2022-07-04 23:26:22,537 DEBUG (BasicTypeRegistry.java:156) - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@66fdec9
2022-07-04 23:26:22,538 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@66fdec9
2022-07-04 23:26:22,539 DEBUG (BasicTypeRegistry.java:156) - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@52851b44
2022-07-04 23:26:22,542 DEBUG (BasicTypeRegistry.java:156) - Adding type registration binary -> org.hibernate.type.BinaryType@5ef6ae06
2022-07-04 23:26:22,543 DEBUG (BasicTypeRegistry.java:156) - Adding type registration byte[] -> org.hibernate.type.BinaryType@5ef6ae06
2022-07-04 23:26:22,543 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [B -> org.hibernate.type.BinaryType@5ef6ae06
2022-07-04 23:26:22,546 DEBUG (BasicTypeRegistry.java:156) - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@604f2bd2
2022-07-04 23:26:22,547 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@604f2bd2
2022-07-04 23:26:22,547 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@604f2bd2
2022-07-04 23:26:22,550 DEBUG (BasicTypeRegistry.java:156) - Adding type registration row_version -> org.hibernate.type.RowVersionType@366ac49b
2022-07-04 23:26:22,552 DEBUG (BasicTypeRegistry.java:156) - Adding type registration image -> org.hibernate.type.ImageType@2cc44ad
2022-07-04 23:26:22,554 DEBUG (BasicTypeRegistry.java:156) - Adding type registration characters -> org.hibernate.type.CharArrayType@33b1c5c5
2022-07-04 23:26:22,554 DEBUG (BasicTypeRegistry.java:156) - Adding type registration char[] -> org.hibernate.type.CharArrayType@33b1c5c5
2022-07-04 23:26:22,554 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [C -> org.hibernate.type.CharArrayType@33b1c5c5
2022-07-04 23:26:22,556 DEBUG (BasicTypeRegistry.java:156) - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@4535b6d5
2022-07-04 23:26:22,557 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@4535b6d5
2022-07-04 23:26:22,557 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@4535b6d5
2022-07-04 23:26:22,558 DEBUG (BasicTypeRegistry.java:156) - Adding type registration text -> org.hibernate.type.TextType@4b41e4dd
2022-07-04 23:26:22,560 DEBUG (BasicTypeRegistry.java:156) - Adding type registration ntext -> org.hibernate.type.NTextType@40844aab
2022-07-04 23:26:22,566 DEBUG (BasicTypeRegistry.java:156) - Adding type registration blob -> org.hibernate.type.BlobType@767e20cf
2022-07-04 23:26:22,567 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@767e20cf
2022-07-04 23:26:22,568 DEBUG (BasicTypeRegistry.java:156) - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@10ded6a9
2022-07-04 23:26:22,571 DEBUG (BasicTypeRegistry.java:156) - Adding type registration clob -> org.hibernate.type.ClobType@189aa67a
2022-07-04 23:26:22,571 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@189aa67a
2022-07-04 23:26:22,589 DEBUG (BasicTypeRegistry.java:156) - Adding type registration nclob -> org.hibernate.type.NClobType@542e560f
2022-07-04 23:26:22,591 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@542e560f
2022-07-04 23:26:22,598 DEBUG (BasicTypeRegistry.java:156) - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@3bcbb589
2022-07-04 23:26:22,601 DEBUG (BasicTypeRegistry.java:156) - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@53d102a2
2022-07-04 23:26:22,606 DEBUG (BasicTypeRegistry.java:156) - Adding type registration serializable -> org.hibernate.type.SerializableType@67c2e933
2022-07-04 23:26:22,618 DEBUG (BasicTypeRegistry.java:156) - Adding type registration object -> org.hibernate.type.ObjectType@5911e990
2022-07-04 23:26:22,619 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@5911e990
2022-07-04 23:26:22,621 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@54c62d71
2022-07-04 23:26:22,622 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@65045a87
2022-07-04 23:26:22,623 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@47f4e407
2022-07-04 23:26:22,623 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@2d1dee39
2022-07-04 23:26:22,624 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@48d5f34e
2022-07-04 23:26:22,624 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@fc258b1
2022-07-04 23:26:22,624 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@6ff65192
2022-07-04 23:26:22,625 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@2dd80673
2022-07-04 23:26:22,673 DEBUG (BootstrapContextImpl.java:272) - Injecting ScanEnvironment [org.hibernate.jpa.boot.internal.StandardJpaScanEnvironmentImpl@26bab2f1] into BootstrapContext; was [null]
2022-07-04 23:26:22,673 DEBUG (BootstrapContextImpl.java:267) - Injecting ScanOptions [org.hibernate.boot.archive.scan.internal.StandardScanOptions@3724af13] into BootstrapContext; was [org.hibernate.boot.archive.scan.internal.StandardScanOptions@68ead359]
2022-07-04 23:26:22,899 DEBUG (BootstrapContextImpl.java:262) - Injecting JPA temp ClassLoader [null] into BootstrapContext; was [null]
2022-07-04 23:26:22,899 DEBUG (ClassLoaderAccessImpl.java:45) - ClassLoaderAccessImpl#injectTempClassLoader(null) [was null]
2022-07-04 23:26:22,946 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2022-07-04 23:26:22,950 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2022-07-04 23:26:22,953 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2022-07-04 23:26:22,954 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2022-07-04 23:26:22,955 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2022-07-04 23:26:22,957 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2022-07-04 23:26:22,958 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2022-07-04 23:26:22,961 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2022-07-04 23:26:22,964 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2022-07-04 23:26:22,966 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2022-07-04 23:26:22,968 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2022-07-04 23:26:22,970 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2022-07-04 23:26:22,971 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2022-07-04 23:26:22,975 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2022-07-04 23:26:22,999  WARN (DriverManagerConnectionProviderImpl.java:72) - HHH10001002: Using Hibernate built-in connection pool (not for production use!)
2022-07-04 23:26:23,048  INFO (DriverManagerConnectionProviderImpl.java:115) - HHH10001005: using driver [com.mysql.cj.jdbc.Driver] at URL [jdbc:mysql://localhost/playdata?characterEncoding=UTF-8]
2022-07-04 23:26:23,049  INFO (DriverManagerConnectionProviderImpl.java:121) - HHH10001001: Connection properties: {password=playdata, user=root}
2022-07-04 23:26:23,050  INFO (DriverManagerConnectionProviderImpl.java:129) - HHH10001003: Autocommit mode: false
2022-07-04 23:26:23,065 DEBUG (DelegatingBasicLogger.java:384) - Initializing Connection pool with 1 Connections
2022-07-04 23:26:23,066  INFO (DriverManagerConnectionProviderImpl.java:239) - HHH000115: Hibernate connection pool size: 20 (min=1)
2022-07-04 23:26:24,717 DEBUG (JdbcEnvironmentInitiator.java:72) - Database ->
       name : MySQL
    version : 8.0.29
      major : 8
      minor : 0
2022-07-04 23:26:24,719 DEBUG (JdbcEnvironmentInitiator.java:83) - Driver ->
       name : MySQL Connector/J
    version : mysql-connector-java-8.0.29 (Revision: dd61577595edad45c398af508cf91ad26fc4144f)
      major : 8
      minor : 0
2022-07-04 23:26:24,720 DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.2
2022-07-04 23:26:24,769  INFO (Dialect.java:158) - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2022-07-04 23:26:24,830 DEBUG (IdentifierHelperBuilder.java:117) - JDBC driver metadata reported database stores quoted identifiers in more than one case
2022-07-04 23:26:24,963 DEBUG (IdentifierHelperBuilder.java:191) - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
2022-07-04 23:26:25,084 DEBUG (Namespace.java:51) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2022-07-04 23:26:25,091 DEBUG (TypeConfiguration.java:152) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@340b7ef6] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@30404dba]
2022-07-04 23:26:25,295 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.Concert
2022-07-04 23:26:25,372 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 23:26:25,387 DEBUG (EntityBinder.java:430) - Import with entity name Concert
2022-07-04 23:26:25,423 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.Concert on table Concert
2022-07-04 23:26:25,535 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concert_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,550 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertId with lazy=false
2022-07-04 23:26:25,555 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:concertId]
2022-07-04 23:26:25,561 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertId
2022-07-04 23:26:25,574 DEBUG (PropertyBinder.java:266) - Building property concertId
2022-07-04 23:26:25,600 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(concert_id)]), concertId, identity, , ...)
2022-07-04 23:26:25,601 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concert_name, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,602 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertName with lazy=false
2022-07-04 23:26:25,602 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:concertName]
2022-07-04 23:26:25,603 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertName
2022-07-04 23:26:25,603 DEBUG (PropertyBinder.java:266) - Building property concertName
2022-07-04 23:26:25,607 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:26:25,611 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concertSinger, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,617 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=null, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,674 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=element, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,676 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concertSinger_KEY, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,677 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concertSinger_KEY', referencedColumn='null', mappedBy='null'}
2022-07-04 23:26:25,680 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:26:25,680 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:26:25,682 DEBUG (CollectionBinder.java:449) - Collection role: concert.model.entity.Concert.concertSinger
2022-07-04 23:26:25,697 DEBUG (PropertyBinder.java:266) - Building property concertSinger
2022-07-04 23:26:25,699 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=contents, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,700 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property contents with lazy=false
2022-07-04 23:26:25,700 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:contents]
2022-07-04 23:26:25,701 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for contents
2022-07-04 23:26:25,702 DEBUG (PropertyBinder.java:266) - Building property contents
2022-07-04 23:26:25,703 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=date, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,704 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property date with lazy=false
2022-07-04 23:26:25,704 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:date]
2022-07-04 23:26:25,707 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for date
2022-07-04 23:26:25,708 DEBUG (PropertyBinder.java:266) - Building property date
2022-07-04 23:26:25,712 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=location, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,713 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property location with lazy=false
2022-07-04 23:26:25,714 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:location]
2022-07-04 23:26:25,715 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for location
2022-07-04 23:26:25,716 DEBUG (PropertyBinder.java:266) - Building property location
2022-07-04 23:26:25,716 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=max_seats, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,717 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property maxSeats with lazy=false
2022-07-04 23:26:25,719 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:maxSeats]
2022-07-04 23:26:25,719 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for maxSeats
2022-07-04 23:26:25,719 DEBUG (PropertyBinder.java:266) - Building property maxSeats
2022-07-04 23:26:25,720 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:26:25,721 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=order, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,722 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=null, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,722 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=element, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,723 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=order_KEY, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,723 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='order_KEY', referencedColumn='null', mappedBy='null'}
2022-07-04 23:26:25,723 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:26:25,724 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:26:25,725 DEBUG (CollectionBinder.java:449) - Collection role: concert.model.entity.Concert.order
2022-07-04 23:26:25,725 DEBUG (PropertyBinder.java:266) - Building property order
2022-07-04 23:26:25,730 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.Orders
2022-07-04 23:26:25,731 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 23:26:25,731 DEBUG (EntityBinder.java:430) - Import with entity name Orders
2022-07-04 23:26:25,731 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.Orders on table Orders
2022-07-04 23:26:25,767 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=order_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,767 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property orderId with lazy=false
2022-07-04 23:26:25,767 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:orderId]
2022-07-04 23:26:25,768 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for orderId
2022-07-04 23:26:25,768 DEBUG (PropertyBinder.java:266) - Building property orderId
2022-07-04 23:26:25,769 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(order_id)]), orderId, identity, , ...)
2022-07-04 23:26:25,769 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=amount, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,770 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property amount with lazy=false
2022-07-04 23:26:25,770 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:amount]
2022-07-04 23:26:25,770 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for amount
2022-07-04 23:26:25,770 DEBUG (PropertyBinder.java:266) - Building property amount
2022-07-04 23:26:25,771 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concert_id', referencedColumn='', mappedBy=''}
2022-07-04 23:26:25,771 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=concert, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,777 DEBUG (PropertyBinder.java:266) - Building property concert
2022-07-04 23:26:25,780 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=concert_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,781 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concert_id with lazy=false
2022-07-04 23:26:25,781 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:concert_id]
2022-07-04 23:26:25,782 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concert_id
2022-07-04 23:26:25,783 DEBUG (PropertyBinder.java:266) - Building property concert_id
2022-07-04 23:26:25,783 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=customer_email, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,784 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property customerEmail with lazy=false
2022-07-04 23:26:25,784 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:customerEmail]
2022-07-04 23:26:25,784 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for customerEmail
2022-07-04 23:26:25,785 DEBUG (PropertyBinder.java:266) - Building property customerEmail
2022-07-04 23:26:25,785 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=customer_name, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,786 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property customerName with lazy=false
2022-07-04 23:26:25,786 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:customerName]
2022-07-04 23:26:25,787 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for customerName
2022-07-04 23:26:25,787 DEBUG (PropertyBinder.java:266) - Building property customerName
2022-07-04 23:26:25,788 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.ConcertSinger
2022-07-04 23:26:25,789 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 23:26:25,789 DEBUG (EntityBinder.java:430) - Import with entity name ConcertSinger
2022-07-04 23:26:25,790 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.ConcertSinger on table concert_singer
2022-07-04 23:26:25,814 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=concert_singer_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,816 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertSingerId with lazy=false
2022-07-04 23:26:25,818 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.ConcertSinger:concertSingerId]
2022-07-04 23:26:25,818 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertSingerId
2022-07-04 23:26:25,819 DEBUG (PropertyBinder.java:266) - Building property concertSingerId
2022-07-04 23:26:25,820 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(concert_singer_id)]), concertSingerId, identity, , ...)
2022-07-04 23:26:25,821 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concert_id', referencedColumn='', mappedBy=''}
2022-07-04 23:26:25,821 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=concert, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,822 DEBUG (PropertyBinder.java:266) - Building property concert
2022-07-04 23:26:25,823 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=concert_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,824 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertId with lazy=false
2022-07-04 23:26:25,824 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.ConcertSinger:concertId]
2022-07-04 23:26:25,826 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertId
2022-07-04 23:26:25,826 DEBUG (PropertyBinder.java:266) - Building property concertId
2022-07-04 23:26:25,827 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='singer_id', referencedColumn='', mappedBy=''}
2022-07-04 23:26:25,828 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=singer, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,829 DEBUG (PropertyBinder.java:266) - Building property singer
2022-07-04 23:26:25,830 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=singer_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,830 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property singerId with lazy=false
2022-07-04 23:26:25,831 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.ConcertSinger:singerId]
2022-07-04 23:26:25,831 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for singerId
2022-07-04 23:26:25,832 DEBUG (PropertyBinder.java:266) - Building property singerId
2022-07-04 23:26:25,833 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.Singer
2022-07-04 23:26:25,833 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 23:26:25,835 DEBUG (EntityBinder.java:430) - Import with entity name Singer
2022-07-04 23:26:25,836 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.Singer on table Singer
2022-07-04 23:26:25,844 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=singer_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,845 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property singerId with lazy=false
2022-07-04 23:26:25,846 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Singer:singerId]
2022-07-04 23:26:25,847 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for singerId
2022-07-04 23:26:25,847 DEBUG (PropertyBinder.java:266) - Building property singerId
2022-07-04 23:26:25,848 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(singer_id)]), singerId, identity, , ...)
2022-07-04 23:26:25,849 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='singer'}
2022-07-04 23:26:25,850 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=concertSinger, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,852 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=null, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,856 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=element, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,858 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=concertSinger_KEY, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,860 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concertSinger_KEY', referencedColumn='null', mappedBy='null'}
2022-07-04 23:26:25,861 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='singer'}
2022-07-04 23:26:25,863 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='singer'}
2022-07-04 23:26:25,868 DEBUG (CollectionBinder.java:449) - Collection role: concert.model.entity.Singer.concertSinger
2022-07-04 23:26:25,868 DEBUG (PropertyBinder.java:266) - Building property concertSinger
2022-07-04 23:26:25,870 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=detail, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,871 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property detail with lazy=false
2022-07-04 23:26:25,871 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Singer:detail]
2022-07-04 23:26:25,872 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for detail
2022-07-04 23:26:25,873 DEBUG (PropertyBinder.java:266) - Building property detail
2022-07-04 23:26:25,874 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=singer_name, insertable=true, updatable=true, unique=false}
2022-07-04 23:26:25,874 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property singerName with lazy=false
2022-07-04 23:26:25,875 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Singer:singerName]
2022-07-04 23:26:25,875 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for singerName
2022-07-04 23:26:25,876 DEBUG (PropertyBinder.java:266) - Building property singerName
2022-07-04 23:26:25,879 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertId
2022-07-04 23:26:25,882 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertName
2022-07-04 23:26:25,883 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for contents
2022-07-04 23:26:25,883 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for date
2022-07-04 23:26:25,883 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for location
2022-07-04 23:26:25,883 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for maxSeats
2022-07-04 23:26:25,883 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for orderId
2022-07-04 23:26:25,883 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for amount
2022-07-04 23:26:25,884 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concert_id
2022-07-04 23:26:25,884 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for customerEmail
2022-07-04 23:26:25,884 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for customerName
2022-07-04 23:26:25,885 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertSingerId
2022-07-04 23:26:25,885 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertId
2022-07-04 23:26:25,885 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for singerId
2022-07-04 23:26:25,885 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for singerId
2022-07-04 23:26:25,885 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for detail
2022-07-04 23:26:25,885 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for singerName
2022-07-04 23:26:25,894 DEBUG (PrimaryKey.java:35) - Forcing column [concert_id] to be non-null as it is part of the primary key for table [concert]
2022-07-04 23:26:25,895 DEBUG (PrimaryKey.java:35) - Forcing column [order_id] to be non-null as it is part of the primary key for table [orders]
2022-07-04 23:26:25,896 DEBUG (PrimaryKey.java:35) - Forcing column [concert_singer_id] to be non-null as it is part of the primary key for table [concert_singer]
2022-07-04 23:26:25,896 DEBUG (PrimaryKey.java:35) - Forcing column [singer_id] to be non-null as it is part of the primary key for table [singer]
2022-07-04 23:26:25,897 DEBUG (CollectionSecondPass.java:51) - Second pass for collection: concert.model.entity.Concert.concertSinger
2022-07-04 23:26:25,899 DEBUG (CollectionBinder.java:898) - Binding a OneToMany: concert.model.entity.Concert.concertSinger through a foreign key
2022-07-04 23:26:25,902 DEBUG (CollectionBinder.java:936) - Mapping collection: concert.model.entity.Concert.concertSinger -> concert_singer
2022-07-04 23:26:25,910 DEBUG (TableBinder.java:565) - Retrieving property concert.model.entity.ConcertSinger.concert
2022-07-04 23:26:25,916 DEBUG (CollectionSecondPass.java:68) - Mapped collection key: concert_id, one-to-many: concert.model.entity.ConcertSinger
2022-07-04 23:26:25,918 DEBUG (CollectionSecondPass.java:51) - Second pass for collection: concert.model.entity.Concert.order
2022-07-04 23:26:25,926 DEBUG (CollectionBinder.java:898) - Binding a OneToMany: concert.model.entity.Concert.order through a foreign key
2022-07-04 23:26:25,927 DEBUG (CollectionBinder.java:936) - Mapping collection: concert.model.entity.Concert.order -> Orders
2022-07-04 23:26:25,928 DEBUG (TableBinder.java:565) - Retrieving property concert.model.entity.Orders.concert
2022-07-04 23:26:25,930 DEBUG (CollectionSecondPass.java:68) - Mapped collection key: concert_id, one-to-many: concert.model.entity.Orders
2022-07-04 23:26:25,930 DEBUG (CollectionSecondPass.java:51) - Second pass for collection: concert.model.entity.Singer.concertSinger
2022-07-04 23:26:25,931 DEBUG (CollectionBinder.java:898) - Binding a OneToMany: concert.model.entity.Singer.concertSinger through a foreign key
2022-07-04 23:26:25,932 DEBUG (CollectionBinder.java:936) - Mapping collection: concert.model.entity.Singer.concertSinger -> concert_singer
2022-07-04 23:26:25,933 DEBUG (TableBinder.java:565) - Retrieving property concert.model.entity.ConcertSinger.singer
2022-07-04 23:26:25,934 DEBUG (CollectionSecondPass.java:68) - Mapped collection key: singer_id, one-to-many: concert.model.entity.ConcertSinger
2022-07-04 23:26:25,934 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 23:26:25,941 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Singer
2022-07-04 23:26:25,942 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 23:26:25,946 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 23:26:25,947 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Singer
2022-07-04 23:26:25,947 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 23:26:26,091 DEBUG (SessionFactoryImpl.java:196) - Building session factory
2022-07-04 23:26:26,094 DEBUG (Settings.java:70) - SessionFactory name : null
2022-07-04 23:26:26,095 DEBUG (Settings.java:71) - Automatic flush during beforeCompletion(): enabled
2022-07-04 23:26:26,095 DEBUG (Settings.java:72) - Automatic session close at end of transaction: disabled
2022-07-04 23:26:26,098 DEBUG (Settings.java:74) - Statistics: disabled
2022-07-04 23:26:26,100 DEBUG (Settings.java:76) - Deleted entity synthetic identifier rollback: disabled
2022-07-04 23:26:26,101 DEBUG (Settings.java:77) - Default entity-mode: pojo
2022-07-04 23:26:26,102 DEBUG (Settings.java:78) - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2022-07-04 23:26:26,103 DEBUG (Settings.java:79) - Allow initialization of lazy state outside session : disabled
2022-07-04 23:26:26,104 DEBUG (Settings.java:81) - Using BatchFetchStyle : LEGACY
2022-07-04 23:26:26,105 DEBUG (Settings.java:82) - Default batch fetch size: -1
2022-07-04 23:26:26,106 DEBUG (Settings.java:83) - Maximum outer join fetch depth: 2
2022-07-04 23:26:26,107 DEBUG (Settings.java:84) - Default null ordering: NONE
2022-07-04 23:26:26,108 DEBUG (Settings.java:85) - Order SQL updates by primary key: disabled
2022-07-04 23:26:26,109 DEBUG (Settings.java:86) - Order SQL inserts for batching: disabled
2022-07-04 23:26:26,110 DEBUG (Settings.java:88) - multi-tenancy strategy : NONE
2022-07-04 23:26:26,110 DEBUG (Settings.java:90) - JTA Track by Thread: enabled
2022-07-04 23:26:26,111 DEBUG (Settings.java:92) - Query language substitutions: {}
2022-07-04 23:26:26,114 DEBUG (Settings.java:93) - Named query checking : enabled
2022-07-04 23:26:26,115 DEBUG (Settings.java:95) - Second-level cache: disabled
2022-07-04 23:26:26,116 DEBUG (Settings.java:96) - Second-level query cache: disabled
2022-07-04 23:26:26,117 DEBUG (Settings.java:97) - Second-level query cache factory: null
2022-07-04 23:26:26,117 DEBUG (Settings.java:98) - Second-level cache region prefix: null
2022-07-04 23:26:26,117 DEBUG (Settings.java:99) - Optimize second-level cache for minimal puts: disabled
2022-07-04 23:26:26,117 DEBUG (Settings.java:100) - Structured second-level cache entries: disabled
2022-07-04 23:26:26,118 DEBUG (Settings.java:101) - Second-level cache direct-reference entries: disabled
2022-07-04 23:26:26,118 DEBUG (Settings.java:102) - Automatic eviction of collection cache: disabled
2022-07-04 23:26:26,118 DEBUG (Settings.java:104) - JDBC batch size: 15
2022-07-04 23:26:26,118 DEBUG (Settings.java:105) - JDBC batch updates for versioned data: enabled
2022-07-04 23:26:26,118 DEBUG (Settings.java:106) - Scrollable result sets: enabled
2022-07-04 23:26:26,119 DEBUG (Settings.java:107) - Wrap result sets: disabled
2022-07-04 23:26:26,119 DEBUG (Settings.java:108) - JDBC3 getGeneratedKeys(): enabled
2022-07-04 23:26:26,119 DEBUG (Settings.java:109) - JDBC result set fetch size: null
2022-07-04 23:26:26,119 DEBUG (Settings.java:110) - Connection release mode: AFTER_TRANSACTION
2022-07-04 23:26:26,120 DEBUG (Settings.java:111) - Generate SQL with comments: disabled
2022-07-04 23:26:26,120 DEBUG (Settings.java:113) - JPA compliance - query : 
2022-07-04 23:26:26,120 DEBUG (Settings.java:114) - JPA compliance - closed-handling : 
2022-07-04 23:26:26,120 DEBUG (Settings.java:115) - JPA compliance - lists : 
2022-07-04 23:26:26,120 DEBUG (Settings.java:116) - JPA compliance - transactions : 
2022-07-04 23:26:26,382 DEBUG (SessionFactoryImpl.java:251) - Session factory constructed with filter configurations : {}
2022-07-04 23:26:26,382 DEBUG (SessionFactoryImpl.java:252) - Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, hibernate.format_sql=true, java.specification.version=11, sun.cpu.isalist=amd64, sun.jnu.encoding=MS949, hibernate.dialect=org.hibernate.dialect.MySQL8Dialect, java.class.path=C:\Users\신동혁\playdata\20220509_lab\03.web\concertProject\concert\target\classes;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\annotations-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-ant.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-ha.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-ssi.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-storeconfig.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-tribes.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\ecj-4.20.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\el-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jasper-el.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jasper.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jaspic-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jsp-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\servlet-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-coyote.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-dbcp.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-cs.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-de.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-es.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-fr.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-ja.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-ko.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-pt-BR.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-ru.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-zh-CN.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-jdbc.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-jni.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-util-scan.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-util.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-websocket.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\websocket-api.jar;C:\Users\신동혁\.m2\repository\javax\persistence\javax.persistence-api\2.2\javax.persistence-api-2.2.jar;C:\Users\신동혁\.m2\repository\org\hibernate\hibernate-entitymanager\5.4.2.Final\hibernate-entitymanager-5.4.2.Final.jar;C:\Users\신동혁\.m2\repository\org\jboss\logging\jboss-logging\3.3.2.Final\jboss-logging-3.3.2.Final.jar;C:\Users\신동혁\.m2\repository\org\hibernate\hibernate-core\5.4.2.Final\hibernate-core-5.4.2.Final.jar;C:\Users\신동혁\.m2\repository\org\javassist\javassist\3.24.0-GA\javassist-3.24.0-GA.jar;C:\Users\신동혁\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\신동혁\.m2\repository\org\jboss\jandex\2.0.5.Final\jandex-2.0.5.Final.jar;C:\Users\신동혁\.m2\repository\com\fasterxml\classmate\1.3.4\classmate-1.3.4.jar;C:\Users\신동혁\.m2\repository\javax\activation\javax.activation-api\1.2.0\javax.activation-api-1.2.0.jar;C:\Users\신동혁\.m2\repository\javax\xml\bind\jaxb-api\2.3.1\jaxb-api-2.3.1.jar;C:\Users\신동혁\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.1\jaxb-runtime-2.3.1.jar;C:\Users\신동혁\.m2\repository\org\glassfish\jaxb\txw2\2.3.1\txw2-2.3.1.jar;C:\Users\신동혁\.m2\repository\com\sun\istack\istack-commons-runtime\3.0.7\istack-commons-runtime-3.0.7.jar;C:\Users\신동혁\.m2\repository\org\jvnet\staxex\stax-ex\1.8\stax-ex-1.8.jar;C:\Users\신동혁\.m2\repository\com\sun\xml\fastinfoset\FastInfoset\1.2.15\FastInfoset-1.2.15.jar;C:\Users\신동혁\.m2\repository\org\dom4j\dom4j\2.1.1\dom4j-2.1.1.jar;C:\Users\신동혁\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.1.0.Final\hibernate-commons-annotations-5.1.0.Final.jar;C:\Users\신동혁\.m2\repository\net\bytebuddy\byte-buddy\1.9.10\byte-buddy-1.9.10.jar;C:\Users\신동혁\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.1.1.Final\jboss-transaction-api_1.2_spec-1.1.1.Final.jar;C:\Users\신동혁\.m2\repository\junit\junit\4.13.2\junit-4.13.2.jar;C:\Users\신동혁\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\신동혁\.m2\repository\org\projectlombok\lombok\1.18.24\lombok-1.18.24.jar;C:\Users\신동혁\.m2\repository\com\jslsolucoes\ojdbc6\11.2.0.1.0\ojdbc6-11.2.0.1.0.jar;C:\Users\신동혁\.m2\repository\mysql\mysql-connector-java\8.0.29\mysql-connector-java-8.0.29.jar;C:\Users\신동혁\.m2\repository\com\google\protobuf\protobuf-java\3.19.4\protobuf-java-3.19.4.jar;C:\Users\신동혁\.m2\repository\org\slf4j\slf4j-api\1.7.5\slf4j-api-1.7.5.jar;C:\Users\신동혁\.m2\repository\org\slf4j\slf4j-log4j12\1.7.5\slf4j-log4j12-1.7.5.jar;C:\Users\신동혁\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\신동혁\.m2\repository\org\modelmapper\modelmapper\2.4.0\modelmapper-2.4.0.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Asia/Seoul, javax.persistence.jdbc.url=jdbc:mysql://localhost/playdata?characterEncoding=UTF-8, javax.persistence.jdbc.user=****, os.name=Windows 10, java.vm.specification.version=11, sun.java.launcher=SUN_STANDARD, user.country=KR, sun.boot.library.path=C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11\bin, sun.java.command=cocert.model.dao.Test, jdk.debug=release, sun.cpu.endian=little, user.home=C:\Users\신동혁, user.language=ko, java.specification.vendor=Oracle Corporation, java.version.date=2018-09-25, java.home=C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11, file.separator=\, java.vm.compressedOopsMode=32-bit, line.separator=
, java.specification.name=Java Platform API Specification, java.vm.specification.vendor=Oracle Corporation, hibernate.transaction.coordinator_class=class org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, javax.persistence.jdbc.driver=com.mysql.cj.jdbc.Driver, hibernate.hbm2ddl.auto=none, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=11+28, user.name=Shin, path.separator=;, hibernate.connection.username=****, os.version=10.0, java.runtime.name=OpenJDK Runtime Environment, hibernate.connection.url=jdbc:mysql://localhost/playdata?characterEncoding=UTF-8, file.encoding=UTF-8, hibernate.ejb.persistenceUnitName=dbinfo, java.vm.name=OpenJDK 64-Bit Server VM, hibernate.show_sql=true, java.vendor.version=18.9, hibernate.connection.driver_class=com.mysql.cj.jdbc.Driver, java.vendor.url.bug=http://bugreport.java.com/bugreport/, java.io.tmpdir=C:\Users\신동혁\AppData\Local\Temp\, java.version=11, user.dir=C:\Users\신동혁\playdata\20220509_lab\03.web\concertProject\concert, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.password=****, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@2c58dcb1, java.library.path=C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Users/신동혁/playdata/20220509_lab/99.devEnv/eclipse//plugins/org.eclipse.justj.openjdk.hotspot.jre.full.win32.x86_64_16.0.1.v20210528-1205/jre/bin/server;C:/Users/신동혁/playdata/20220509_lab/99.devEnv/eclipse//plugins/org.eclipse.justj.openjdk.hotspot.jre.full.win32.x86_64_16.0.1.v20210528-1205/jre/bin;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11\bin;C:\oraclexe\app\oracle\product\11.2.0\server\bin;C:\Program Files\MySQL\MySQL Server 8.0\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\Bandizip\;C:\Program Files\Git\cmd;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\신동혁\AppData\Local\Programs\Python\Python39\Scripts\;C:\Users\신동혁\AppData\Local\Programs\Python\Python39\;C:\Users\신동혁\AppData\Local\Microsoft\WindowsApps;C:\Users\신동혁\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\eclipse;;., java.vendor=Oracle Corporation, java.vm.info=mixed mode, java.vm.version=11+28, hibernate.bytecode.use_reflection_optimizer=false, sun.io.unicode.encoding=UnicodeLittle, javax.persistence.jdbc.password=****, java.class.version=55.0}
2022-07-04 23:26:26,433 DEBUG (JaccIntegrator.java:80) - Skipping JACC integration as it was not enabled
2022-07-04 23:26:26,436 DEBUG (SessionFactoryImpl.java:291) - Instantiated session factory
2022-07-04 23:26:26,437 DEBUG (TypeConfiguration.java:157) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@340b7ef6] to SessionFactoryImpl [org.hibernate.internal.SessionFactoryImpl@5fe7f967]
2022-07-04 23:26:26,608 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Concert] is safe
2022-07-04 23:26:26,609 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Concert
2022-07-04 23:26:26,678 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Concert] is safe
2022-07-04 23:26:26,679 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Concert
2022-07-04 23:26:27,780 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Orders] is safe
2022-07-04 23:26:27,782 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Orders
2022-07-04 23:26:27,783 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Orders] is safe
2022-07-04 23:26:27,784 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Orders
2022-07-04 23:26:27,863 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.ConcertSinger] is safe
2022-07-04 23:26:27,871 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.ConcertSinger
2022-07-04 23:26:27,879 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.ConcertSinger] is safe
2022-07-04 23:26:27,884 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.ConcertSinger
2022-07-04 23:26:27,956 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Singer] is safe
2022-07-04 23:26:27,958 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Singer
2022-07-04 23:26:27,960 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Singer] is safe
2022-07-04 23:26:27,960 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Singer
2022-07-04 23:26:28,114 DEBUG (AbstractCollectionPersister.java:688) - Static SQL for collection: concert.model.entity.Singer.concertSinger
2022-07-04 23:26:28,115 DEBUG (AbstractCollectionPersister.java:690) -  Row insert: update concert_singer set singer_id=? where concert_singer_id=?
2022-07-04 23:26:28,116 DEBUG (AbstractCollectionPersister.java:693) -  Row update: update concert_singer set  where concert_singer_id=?
2022-07-04 23:26:28,116 DEBUG (AbstractCollectionPersister.java:696) -  Row delete: update concert_singer set singer_id=null where singer_id=? and concert_singer_id=?
2022-07-04 23:26:28,116 DEBUG (AbstractCollectionPersister.java:699) -  One-shot delete: update concert_singer set singer_id=null where singer_id=?
2022-07-04 23:26:28,117 DEBUG (AbstractCollectionPersister.java:688) - Static SQL for collection: concert.model.entity.Concert.order
2022-07-04 23:26:28,118 DEBUG (AbstractCollectionPersister.java:690) -  Row insert: update Orders set concert_id=? where order_id=?
2022-07-04 23:26:28,118 DEBUG (AbstractCollectionPersister.java:693) -  Row update: update Orders set  where order_id=?
2022-07-04 23:26:28,119 DEBUG (AbstractCollectionPersister.java:696) -  Row delete: update Orders set concert_id=null where concert_id=? and order_id=?
2022-07-04 23:26:28,119 DEBUG (AbstractCollectionPersister.java:699) -  One-shot delete: update Orders set concert_id=null where concert_id=?
2022-07-04 23:26:28,120 DEBUG (AbstractCollectionPersister.java:688) - Static SQL for collection: concert.model.entity.Concert.concertSinger
2022-07-04 23:26:28,120 DEBUG (AbstractCollectionPersister.java:690) -  Row insert: update concert_singer set concert_id=? where concert_singer_id=?
2022-07-04 23:26:28,120 DEBUG (AbstractCollectionPersister.java:693) -  Row update: update concert_singer set  where concert_singer_id=?
2022-07-04 23:26:28,121 DEBUG (AbstractCollectionPersister.java:696) -  Row delete: update concert_singer set concert_id=null where concert_id=? and concert_singer_id=?
2022-07-04 23:26:28,122 DEBUG (AbstractCollectionPersister.java:699) -  One-shot delete: update concert_singer set concert_id=null where concert_id=?
2022-07-04 23:26:28,164 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.Concert
2022-07-04 23:26:28,165 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select concert_id from Concert where concert_id =?
2022-07-04 23:26:28,166 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select concert_.concert_id, concert_.concert_name as concert_2_0_, concert_.contents as contents3_0_, concert_.date as date4_0_, concert_.location as location5_0_, concert_.max_seats as max_seat6_0_ from Concert concert_ where concert_.concert_id=?
2022-07-04 23:26:28,167 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Concert (concert_name, contents, date, location, max_seats, concert_id) values (?, ?, ?, ?, ?, ?)
2022-07-04 23:26:28,167 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Concert set concert_name=?, contents=?, date=?, location=?, max_seats=? where concert_id=?
2022-07-04 23:26:28,167 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Concert where concert_id=?
2022-07-04 23:26:28,168 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into Concert (concert_name, contents, date, location, max_seats) values (?, ?, ?, ?, ?)
2022-07-04 23:26:28,273 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4e642ee1]
2022-07-04 23:26:28,291 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertName
2022-07-04 23:26:28,296 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 23:26:28,309 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@751ae8a4]
2022-07-04 23:26:28,313 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7e307087]
2022-07-04 23:26:28,316 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : contents
2022-07-04 23:26:28,316 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : date
2022-07-04 23:26:28,317 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : location
2022-07-04 23:26:28,317 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : maxSeats
2022-07-04 23:26:28,317 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : order
2022-07-04 23:26:28,318 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@4bcaa195]
2022-07-04 23:26:28,318 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@d08edc5]
2022-07-04 23:26:28,319 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:26:28,374 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:26:28,386 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Concert)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:0>, path=concert.model.entity.Concert)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Concert.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Concert.concertSinger.<elements>)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.order, querySpaceUid=<gen:3>, path=concert.model.entity.Concert.order)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.Orders, querySpaceUid=<gen:4>, path=concert.model.entity.Concert.order.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Concert)
          - SQL table alias mapping - concert0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_0_0_}

2022-07-04 23:26:28,394 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Concert [NONE]: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 23:26:28,396 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7c2924d7]
2022-07-04 23:26:28,400 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertName
2022-07-04 23:26:28,403 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 23:26:28,406 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6587305a]
2022-07-04 23:26:28,406 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@abbe000]
2022-07-04 23:26:28,406 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : contents
2022-07-04 23:26:28,407 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : date
2022-07-04 23:26:28,407 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : location
2022-07-04 23:26:28,407 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : maxSeats
2022-07-04 23:26:28,407 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : order
2022-07-04 23:26:28,407 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@3f81621c]
2022-07-04 23:26:28,408 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5b9499fe]
2022-07-04 23:26:28,408 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:26:28,409 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:26:28,410 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Concert)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:0>, path=concert.model.entity.Concert)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Concert.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Concert.concertSinger.<elements>)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.order, querySpaceUid=<gen:3>, path=concert.model.entity.Concert.order)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.Orders, querySpaceUid=<gen:4>, path=concert.model.entity.Concert.order.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Concert)
          - SQL table alias mapping - concert0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_0_0_}

2022-07-04 23:26:28,412 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Concert [READ]: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 23:26:28,477 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.Concert: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 23:26:28,478 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.Concert: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 23:26:28,479 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.Orders
2022-07-04 23:26:28,479 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select order_id from Orders where order_id =?
2022-07-04 23:26:28,480 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select orders_.order_id, orders_.amount as amount2_2_, orders_.concert_id as concert_3_2_, orders_.customer_email as customer4_2_, orders_.customer_name as customer5_2_ from Orders orders_ where orders_.order_id=?
2022-07-04 23:26:28,480 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Orders (amount, concert_id, customer_email, customer_name, order_id) values (?, ?, ?, ?, ?)
2022-07-04 23:26:28,481 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Orders set amount=?, concert_id=?, customer_email=?, customer_name=? where order_id=?
2022-07-04 23:26:28,482 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Orders where order_id=?
2022-07-04 23:26:28,482 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into Orders (amount, concert_id, customer_email, customer_name) values (?, ?, ?, ?)
2022-07-04 23:26:28,482 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@38cedb7d]
2022-07-04 23:26:28,483 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : amount
2022-07-04 23:26:28,483 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:26:28,484 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2acdcce8]
2022-07-04 23:26:28,485 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert_id
2022-07-04 23:26:28,486 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerEmail
2022-07-04 23:26:28,486 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerName
2022-07-04 23:26:28,486 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:26:28,486 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:26:28,487 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Orders)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Orders, querySpaceUid=<gen:0>, path=concert.model.entity.Orders)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.Orders.concert)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {order_id1_2_0_}

2022-07-04 23:26:28,488 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Orders [NONE]: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 23:26:28,488 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@d5bb1c4]
2022-07-04 23:26:28,488 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : amount
2022-07-04 23:26:28,488 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:26:28,488 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@465b38e6]
2022-07-04 23:26:28,489 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert_id
2022-07-04 23:26:28,489 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerEmail
2022-07-04 23:26:28,489 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerName
2022-07-04 23:26:28,490 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:26:28,490 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:26:28,490 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Orders)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Orders, querySpaceUid=<gen:0>, path=concert.model.entity.Orders)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.Orders.concert)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {order_id1_2_0_}

2022-07-04 23:26:28,490 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Orders [READ]: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 23:26:28,491 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.Orders: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 23:26:28,492 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.Orders: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 23:26:28,492 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.ConcertSinger
2022-07-04 23:26:28,493 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select concert_singer_id from concert_singer where concert_singer_id =?
2022-07-04 23:26:28,494 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select concertsin_.concert_singer_id, concertsin_.concert_id as concert_2_1_, concertsin_.singer_id as singer_i3_1_ from concert_singer concertsin_ where concertsin_.concert_singer_id=?
2022-07-04 23:26:28,494 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into concert_singer (concert_id, singer_id, concert_singer_id) values (?, ?, ?)
2022-07-04 23:26:28,494 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update concert_singer set concert_id=?, singer_id=? where concert_singer_id=?
2022-07-04 23:26:28,494 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from concert_singer where concert_singer_id=?
2022-07-04 23:26:28,494 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into concert_singer (concert_id, singer_id) values (?, ?)
2022-07-04 23:26:28,495 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4b960b5b]
2022-07-04 23:26:28,496 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:26:28,496 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7bd96822]
2022-07-04 23:26:28,496 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 23:26:28,496 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 23:26:28,496 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@64dae3b7]
2022-07-04 23:26:28,497 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 23:26:28,497 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:26:28,497 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:26:28,498 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.ConcertSinger)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:0>, path=concert.model.entity.ConcertSinger)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.ConcertSinger.concert)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:2>, path=concert.model.entity.ConcertSinger.singer)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.ConcertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_1_0_}

2022-07-04 23:26:28,499 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.ConcertSinger [NONE]: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 23:26:28,500 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1fedf0a4]
2022-07-04 23:26:28,500 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:26:28,500 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2ee48610]
2022-07-04 23:26:28,501 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 23:26:28,501 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 23:26:28,502 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1d901f20]
2022-07-04 23:26:28,502 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 23:26:28,502 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:26:28,504 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:26:28,506 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.ConcertSinger)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:0>, path=concert.model.entity.ConcertSinger)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.ConcertSinger.concert)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:2>, path=concert.model.entity.ConcertSinger.singer)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.ConcertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_1_0_}

2022-07-04 23:26:28,507 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.ConcertSinger [READ]: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 23:26:28,509 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.ConcertSinger: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 23:26:28,511 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.ConcertSinger: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 23:26:28,516 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.Singer
2022-07-04 23:26:28,518 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select singer_id from Singer where singer_id =?
2022-07-04 23:26:28,519 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select singer_.singer_id, singer_.detail as detail2_3_, singer_.singer_name as singer_n3_3_ from Singer singer_ where singer_.singer_id=?
2022-07-04 23:26:28,520 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Singer (detail, singer_name, singer_id) values (?, ?, ?)
2022-07-04 23:26:28,522 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Singer set detail=?, singer_name=? where singer_id=?
2022-07-04 23:26:28,524 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Singer where singer_id=?
2022-07-04 23:26:28,526 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into Singer (detail, singer_name) values (?, ?)
2022-07-04 23:26:28,527 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6d08b4e6]
2022-07-04 23:26:28,527 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 23:26:28,528 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1acb74ad]
2022-07-04 23:26:28,529 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7bf01cb]
2022-07-04 23:26:28,529 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : detail
2022-07-04 23:26:28,529 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerName
2022-07-04 23:26:28,529 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:26:28,530 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:26:28,531 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Singer)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:0>, path=concert.model.entity.Singer)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Singer.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Singer.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Singer.concertSinger.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Singer)
          - SQL table alias mapping - singer0_
          - alias suffix - 0_
          - suffixed key columns - {singer_i1_3_0_}

2022-07-04 23:26:28,532 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Singer [NONE]: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 23:26:28,532 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2f382a5e]
2022-07-04 23:26:28,533 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 23:26:28,533 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@539a138b]
2022-07-04 23:26:28,534 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2cd4e16a]
2022-07-04 23:26:28,534 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : detail
2022-07-04 23:26:28,534 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerName
2022-07-04 23:26:28,534 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:26:28,535 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:26:28,535 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Singer)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:0>, path=concert.model.entity.Singer)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Singer.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Singer.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Singer.concertSinger.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Singer)
          - SQL table alias mapping - singer0_
          - alias suffix - 0_
          - suffixed key columns - {singer_i1_3_0_}

2022-07-04 23:26:28,536 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Singer [READ]: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 23:26:28,536 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.Singer: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 23:26:28,537 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.Singer: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 23:26:28,547 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@7affc159]
2022-07-04 23:26:28,548 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1682c08c]
2022-07-04 23:26:28,552 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:26:28,553 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2f14b0f6]
2022-07-04 23:26:28,553 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 23:26:28,554 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 23:26:28,555 DEBUG (MetamodelGraphWalker.java:154) - Property path deemed to be circular : singer
2022-07-04 23:26:28,555 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 23:26:28,556 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:26:28,575 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:26:28,578 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(collection=concert.model.entity.Singer.concertSinger)
    - Returns
       - CollectionReturnImpl(collection=concert.model.entity.Singer.concertSinger, querySpaceUid=<gen:0>, path=[concert.model.entity.Singer.concertSinger])
          - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:1>, path=[concert.model.entity.Singer.concertSinger].<elements>)
             - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:2>, path=[concert.model.entity.Singer.concertSinger].<elements>.concert)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=concert.model.entity.Singer.concertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {singer_i3_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - concert_1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=concert.model.entity.ConcertSinger)
                - SQL table alias mapping - concertsin0_
                - alias suffix - 1_
                - suffixed key columns - {concert_1_1_1_}

2022-07-04 23:26:28,581 DEBUG (CollectionLoader.java:83) - Static select for collection concert.model.entity.Singer.concertSinger: select concertsin0_.singer_id as singer_i3_1_0_, concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_singer_id as concert_1_1_1_, concertsin0_.concert_id as concert_2_1_1_, concertsin0_.singer_id as singer_i3_1_1_ from concert_singer concertsin0_ where concertsin0_.singer_id=?
2022-07-04 23:26:28,582 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@273a5a8a]
2022-07-04 23:26:28,582 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1823b9c4]
2022-07-04 23:26:28,583 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : amount
2022-07-04 23:26:28,583 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:26:28,583 DEBUG (MetamodelGraphWalker.java:154) - Property path deemed to be circular : concert
2022-07-04 23:26:28,583 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert_id
2022-07-04 23:26:28,584 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerEmail
2022-07-04 23:26:28,584 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerName
2022-07-04 23:26:28,584 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:26:28,584 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:26:28,585 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(collection=concert.model.entity.Concert.order)
    - Returns
       - CollectionReturnImpl(collection=concert.model.entity.Concert.order, querySpaceUid=<gen:0>, path=[concert.model.entity.Concert.order])
          - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.Orders, querySpaceUid=<gen:1>, path=[concert.model.entity.Concert.order].<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=concert.model.entity.Concert.order)
          - SQL table alias mapping - order0_
          - alias suffix - 0_
          - suffixed key columns - {concert_3_2_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - order_id1_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=concert.model.entity.Orders)
                - SQL table alias mapping - order0_
                - alias suffix - 1_
                - suffixed key columns - {order_id1_2_1_}

2022-07-04 23:26:28,585 DEBUG (CollectionLoader.java:83) - Static select for collection concert.model.entity.Concert.order: select order0_.concert_id as concert_3_2_0_, order0_.order_id as order_id1_2_0_, order0_.order_id as order_id1_2_1_, order0_.amount as amount2_2_1_, order0_.concert_id as concert_3_2_1_, order0_.customer_email as customer4_2_1_, order0_.customer_name as customer5_2_1_ from Orders order0_ where order0_.concert_id=?
2022-07-04 23:26:28,586 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@adcfad9]
2022-07-04 23:26:28,586 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@fb49fdf]
2022-07-04 23:26:28,587 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:26:28,588 DEBUG (MetamodelGraphWalker.java:154) - Property path deemed to be circular : concert
2022-07-04 23:26:28,588 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 23:26:28,588 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 23:26:28,589 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@10c47c79]
2022-07-04 23:26:28,589 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 23:26:28,589 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:26:28,590 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:26:28,590 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(collection=concert.model.entity.Concert.concertSinger)
    - Returns
       - CollectionReturnImpl(collection=concert.model.entity.Concert.concertSinger, querySpaceUid=<gen:0>, path=[concert.model.entity.Concert.concertSinger])
          - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:1>, path=[concert.model.entity.Concert.concertSinger].<elements>)
             - EntityAttributeFetchImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:2>, path=[concert.model.entity.Concert.concertSinger].<elements>.singer)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=concert.model.entity.Concert.concertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {concert_2_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - concert_1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=concert.model.entity.ConcertSinger)
                - SQL table alias mapping - concertsin0_
                - alias suffix - 1_
                - suffixed key columns - {concert_1_1_1_}

2022-07-04 23:26:28,590 DEBUG (CollectionLoader.java:83) - Static select for collection concert.model.entity.Concert.concertSinger: select concertsin0_.concert_id as concert_2_1_0_, concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_singer_id as concert_1_1_1_, concertsin0_.concert_id as concert_2_1_1_, concertsin0_.singer_id as singer_i3_1_1_ from concert_singer concertsin0_ where concertsin0_.concert_id=?
2022-07-04 23:26:28,709 DEBUG (SchemaManagementToolCoordinator.java:57) - No actions specified; doing nothing
2022-07-04 23:26:28,710 DEBUG (JtaPlatformInitiator.java:43) - No JtaPlatform was specified, checking resolver
2022-07-04 23:26:28,712 DEBUG (JtaPlatformResolverInitiator.java:33) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2022-07-04 23:26:28,721 DEBUG (StandardJtaPlatformResolver.java:137) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2022-07-04 23:26:28,722  INFO (JtaPlatformInitiator.java:52) - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2022-07-04 23:26:28,724 DEBUG (NamedQueryRepository.java:151) - Checking 0 named HQL queries
2022-07-04 23:26:28,724 DEBUG (NamedQueryRepository.java:167) - Checking 0 named SQL queries
2022-07-04 23:26:28,726 DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@787508ca
2022-07-04 23:26:28,731 DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: fbd4b7f8-4f71-426a-ac31-42d2faee088a (<unnamed>)
2022-07-04 23:26:28,732 DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2022-07-04 23:26:29,006 DEBUG (StatisticsInitiator.java:101) - Statistics initialized [enabled=false]
2022-07-04 23:26:29,043 DEBUG (TransactionImpl.java:56) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2022-07-04 23:26:29,044 DEBUG (TransactionImpl.java:84) - begin
2022-07-04 23:26:29,086 DEBUG (QueryTranslatorFactoryInitiator.java:45) - QueryTranslatorFactory: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@5e230fc6
2022-07-04 23:26:29,206 DEBUG (QueryTranslatorImpl.java:288) - parse() - HQL: select c from concert.model.entity.Concert c
2022-07-04 23:26:29,217 DEBUG (ErrorTracker.java:97) - throwQueryException() : no errors
2022-07-04 23:26:29,242 DEBUG (QueryTranslatorImpl.java:309) - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'concert'
       |     |  |  |  \-[IDENT] Node: 'model'
       |     |  |  \-[IDENT] Node: 'entity'
       |     |  \-[IDENT] Node: 'Concert'
       |     \-[ALIAS] Node: 'c'
       \-[SELECT] Node: 'select'
          \-[IDENT] Node: 'c'

2022-07-04 23:26:29,357 DEBUG (HqlSqlBaseWalker.java:124) - select << begin [level=1, statement=select]
2022-07-04 23:26:29,459 DEBUG (FromElement.java:146) - FromClause{level=1} : concert.model.entity.Concert (c) -> concert0_
2022-07-04 23:26:29,462 DEBUG (FromReferenceNode.java:60) - Resolved : c -> concert0_.concert_id
2022-07-04 23:26:29,475 DEBUG (HqlSqlBaseWalker.java:128) - select : finishing up [level=1, statement=select]
2022-07-04 23:26:29,478 DEBUG (HqlSqlWalker.java:752) - processQuery() :  ( SELECT ( {select clause} concert0_.concert_id ) ( FromClause{level=1} Concert concert0_ ) )
2022-07-04 23:26:29,529 DEBUG (JoinProcessor.java:192) - Using FROM fragment [Concert concert0_]
2022-07-04 23:26:29,532 DEBUG (HqlSqlBaseWalker.java:132) - select >> end [level=1, statement=select]
2022-07-04 23:26:29,536 DEBUG (QueryTranslatorImpl.java:275) - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Concert)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'concert0_.concert_id as concert_1_0_' {alias=c, className=concert.model.entity.Concert, tableAlias=concert0_}
    |  \-[SQL_TOKEN] SqlFragment: 'concert0_.concert_name as concert_2_0_, concert0_.contents as contents3_0_, concert0_.date as date4_0_, concert0_.location as location5_0_, concert0_.max_seats as max_seat6_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[c], fromElementByTableAlias=[concert0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Concert concert0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=c,role=null,tableName=Concert,tableAlias=concert0_,origin=null,columns={,className=concert.model.entity.Concert}}

2022-07-04 23:26:29,536 DEBUG (ErrorTracker.java:97) - throwQueryException() : no errors
2022-07-04 23:26:29,556 DEBUG (QueryTranslatorImpl.java:254) - HQL: select c from concert.model.entity.Concert c
2022-07-04 23:26:29,558 DEBUG (QueryTranslatorImpl.java:255) - SQL: select concert0_.concert_id as concert_1_0_, concert0_.concert_name as concert_2_0_, concert0_.contents as contents3_0_, concert0_.date as date4_0_, concert0_.location as location5_0_, concert0_.max_seats as max_seat6_0_ from Concert concert0_
2022-07-04 23:26:29,558 DEBUG (ErrorTracker.java:97) - throwQueryException() : no errors
2022-07-04 23:26:29,617 DEBUG (SqlStatementLogger.java:94) - 
    select
        concert0_.concert_id as concert_1_0_,
        concert0_.concert_name as concert_2_0_,
        concert0_.contents as contents3_0_,
        concert0_.date as date4_0_,
        concert0_.location as location5_0_,
        concert0_.max_seats as max_seat6_0_ 
    from
        Concert concert0_
2022-07-04 23:26:29,684 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 0
2022-07-04 23:26:29,699 DEBUG (Loader.java:1538) - Result row: EntityKey[concert.model.entity.Concert#1]
2022-07-04 23:26:29,749 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 1
2022-07-04 23:26:29,755 DEBUG (Loader.java:1538) - Result row: EntityKey[concert.model.entity.Concert#2]
2022-07-04 23:26:29,761 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 2
2022-07-04 23:26:29,763 DEBUG (Loader.java:1538) - Result row: EntityKey[concert.model.entity.Concert#3]
2022-07-04 23:26:29,766 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 3
2022-07-04 23:26:29,767 DEBUG (Loader.java:1538) - Result row: EntityKey[concert.model.entity.Concert#4]
2022-07-04 23:26:29,772 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 4
2022-07-04 23:26:29,773 DEBUG (Loader.java:1538) - Result row: EntityKey[concert.model.entity.Concert#5]
2022-07-04 23:26:29,775 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 5
2022-07-04 23:26:29,776 DEBUG (Loader.java:1538) - Result row: EntityKey[concert.model.entity.Concert#6]
2022-07-04 23:26:29,777 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 6
2022-07-04 23:26:29,777 DEBUG (Loader.java:1538) - Result row: EntityKey[concert.model.entity.Concert#7]
2022-07-04 23:26:29,783 DEBUG (TwoPhaseLoad.java:145) - Resolving associations for [concert.model.entity.Concert#1]
2022-07-04 23:26:29,856 DEBUG (TwoPhaseLoad.java:288) - Done materializing entity [concert.model.entity.Concert#1]
2022-07-04 23:26:29,857 DEBUG (TwoPhaseLoad.java:145) - Resolving associations for [concert.model.entity.Concert#2]
2022-07-04 23:26:29,858 DEBUG (TwoPhaseLoad.java:288) - Done materializing entity [concert.model.entity.Concert#2]
2022-07-04 23:26:29,859 DEBUG (TwoPhaseLoad.java:145) - Resolving associations for [concert.model.entity.Concert#3]
2022-07-04 23:26:29,860 DEBUG (TwoPhaseLoad.java:288) - Done materializing entity [concert.model.entity.Concert#3]
2022-07-04 23:26:29,860 DEBUG (TwoPhaseLoad.java:145) - Resolving associations for [concert.model.entity.Concert#4]
2022-07-04 23:26:29,861 DEBUG (TwoPhaseLoad.java:288) - Done materializing entity [concert.model.entity.Concert#4]
2022-07-04 23:26:29,862 DEBUG (TwoPhaseLoad.java:145) - Resolving associations for [concert.model.entity.Concert#5]
2022-07-04 23:26:29,864 DEBUG (TwoPhaseLoad.java:288) - Done materializing entity [concert.model.entity.Concert#5]
2022-07-04 23:26:29,864 DEBUG (TwoPhaseLoad.java:145) - Resolving associations for [concert.model.entity.Concert#6]
2022-07-04 23:26:29,865 DEBUG (TwoPhaseLoad.java:288) - Done materializing entity [concert.model.entity.Concert#6]
2022-07-04 23:26:29,866 DEBUG (TwoPhaseLoad.java:145) - Resolving associations for [concert.model.entity.Concert#7]
2022-07-04 23:26:29,867 DEBUG (TwoPhaseLoad.java:288) - Done materializing entity [concert.model.entity.Concert#7]
2022-07-04 23:26:30,219 DEBUG (TransactionImpl.java:142) - rolling back
2022-07-04 23:26:30,232 DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2022-07-04 23:26:30,236 DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2022-07-04 23:27:55,582 DEBUG (HibernatePersistenceProvider.java:38) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2022-07-04 23:27:56,123 DEBUG (HibernatePersistenceProvider.java:88) - Located and parsed 1 persistence units; checking each
2022-07-04 23:27:56,127 DEBUG (HibernatePersistenceProvider.java:96) - Checking persistence-unit [name=dbinfo, explicit-provider=null] against incoming persistence unit name [dbinfo]
2022-07-04 23:27:56,129 DEBUG (ProviderChecker.java:95) - No PersistenceProvider explicitly requested, assuming Hibernate
2022-07-04 23:27:56,150 DEBUG (LogHelper.java:102) - PersistenceUnitInfo [
	name: dbinfo
	persistence provider classname: null
	classloader: null
	excludeUnlistedClasses: false
	JTA datasource: null
	Non JTA datasource: null
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/%ec%8b%a0%eb%8f%99%ed%98%81/playdata/20220509_lab/03.web/concertProject/concert/target/classes
	Shared Cache Mode: null
	Validation Mode: null
	Jar files URLs []
	Managed classes names [
		concert.model.entity.Concert
		concert.model.entity.ConcertSinger
		concert.model.entity.Orders
		concert.model.entity.Singer]
	Mapping files names []
	Properties [
		javax.persistence.jdbc.driver: com.mysql.cj.jdbc.Driver
		javax.persistence.jdbc.password: playdata
		hibernate.dialect: org.hibernate.dialect.MySQL8Dialect
		javax.persistence.jdbc.url: jdbc:mysql://localhost/playdata?characterEncoding=UTF-8
		hibernate.show_sql: true
		hibernate.hbm2ddl.auto: none
		hibernate.format_sql: true
		javax.persistence.jdbc.user: root]
2022-07-04 23:27:56,168 DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2022-07-04 23:27:56,180 DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2022-07-04 23:27:56,200 DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2022-07-04 23:27:56,470  INFO (Version.java:46) - HHH000412: Hibernate Core {5.4.2.Final}
2022-07-04 23:27:56,477 DEBUG (Environment.java:199) - HHH000206: hibernate.properties not found
2022-07-04 23:27:57,033 DEBUG (ServiceBinding.java:68) - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
2022-07-04 23:27:57,125 DEBUG (RegionFactoryInitiator.java:118) - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
2022-07-04 23:27:57,130 DEBUG (RegionFactoryInitiator.java:49) - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2022-07-04 23:27:57,209  INFO (JavaReflectionManager.java:49) - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2022-07-04 23:27:58,746 DEBUG (BasicTypeRegistry.java:156) - Adding type registration boolean -> org.hibernate.type.BooleanType@19b93fa8
2022-07-04 23:27:58,747 DEBUG (BasicTypeRegistry.java:156) - Adding type registration boolean -> org.hibernate.type.BooleanType@19b93fa8
2022-07-04 23:27:58,750 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@19b93fa8
2022-07-04 23:27:58,752 DEBUG (BasicTypeRegistry.java:156) - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@8ad6665
2022-07-04 23:27:58,754 DEBUG (BasicTypeRegistry.java:156) - Adding type registration true_false -> org.hibernate.type.TrueFalseType@bcef303
2022-07-04 23:27:58,755 DEBUG (BasicTypeRegistry.java:156) - Adding type registration yes_no -> org.hibernate.type.YesNoType@4f9a2c08
2022-07-04 23:27:58,757 DEBUG (BasicTypeRegistry.java:156) - Adding type registration byte -> org.hibernate.type.ByteType@386f0da3
2022-07-04 23:27:58,758 DEBUG (BasicTypeRegistry.java:156) - Adding type registration byte -> org.hibernate.type.ByteType@386f0da3
2022-07-04 23:27:58,758 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@386f0da3
2022-07-04 23:27:58,762 DEBUG (BasicTypeRegistry.java:156) - Adding type registration character -> org.hibernate.type.CharacterType@344f4dea
2022-07-04 23:27:58,762 DEBUG (BasicTypeRegistry.java:156) - Adding type registration char -> org.hibernate.type.CharacterType@344f4dea
2022-07-04 23:27:58,763 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@344f4dea
2022-07-04 23:27:58,766 DEBUG (BasicTypeRegistry.java:156) - Adding type registration short -> org.hibernate.type.ShortType@6c0d9d86
2022-07-04 23:27:58,766 DEBUG (BasicTypeRegistry.java:156) - Adding type registration short -> org.hibernate.type.ShortType@6c0d9d86
2022-07-04 23:27:58,767 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@6c0d9d86
2022-07-04 23:27:58,770 DEBUG (BasicTypeRegistry.java:156) - Adding type registration integer -> org.hibernate.type.IntegerType@16ce702d
2022-07-04 23:27:58,771 DEBUG (BasicTypeRegistry.java:156) - Adding type registration int -> org.hibernate.type.IntegerType@16ce702d
2022-07-04 23:27:58,772 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@16ce702d
2022-07-04 23:27:58,775 DEBUG (BasicTypeRegistry.java:156) - Adding type registration long -> org.hibernate.type.LongType@2ea6e30c
2022-07-04 23:27:58,776 DEBUG (BasicTypeRegistry.java:156) - Adding type registration long -> org.hibernate.type.LongType@2ea6e30c
2022-07-04 23:27:58,777 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Long -> org.hibernate.type.LongType@2ea6e30c
2022-07-04 23:27:58,780 DEBUG (BasicTypeRegistry.java:156) - Adding type registration float -> org.hibernate.type.FloatType@531f4093
2022-07-04 23:27:58,781 DEBUG (BasicTypeRegistry.java:156) - Adding type registration float -> org.hibernate.type.FloatType@531f4093
2022-07-04 23:27:58,781 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@531f4093
2022-07-04 23:27:58,784 DEBUG (BasicTypeRegistry.java:156) - Adding type registration double -> org.hibernate.type.DoubleType@16fdec90
2022-07-04 23:27:58,784 DEBUG (BasicTypeRegistry.java:156) - Adding type registration double -> org.hibernate.type.DoubleType@16fdec90
2022-07-04 23:27:58,785 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@16fdec90
2022-07-04 23:27:58,788 DEBUG (BasicTypeRegistry.java:156) - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@6a55299e
2022-07-04 23:27:58,788 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@6a55299e
2022-07-04 23:27:58,791 DEBUG (BasicTypeRegistry.java:156) - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@5a18cd76
2022-07-04 23:27:58,792 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@5a18cd76
2022-07-04 23:27:58,794 DEBUG (BasicTypeRegistry.java:156) - Adding type registration string -> org.hibernate.type.StringType@77825085
2022-07-04 23:27:58,794 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.String -> org.hibernate.type.StringType@77825085
2022-07-04 23:27:58,796 DEBUG (BasicTypeRegistry.java:156) - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@5b1ebf56
2022-07-04 23:27:58,798 DEBUG (BasicTypeRegistry.java:156) - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@3549bca9
2022-07-04 23:27:58,804 DEBUG (BasicTypeRegistry.java:156) - Adding type registration url -> org.hibernate.type.UrlType@46dffdc3
2022-07-04 23:27:58,804 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.net.URL -> org.hibernate.type.UrlType@46dffdc3
2022-07-04 23:27:58,809 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Duration -> org.hibernate.type.DurationType@4748a0f9
2022-07-04 23:27:58,809 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@4748a0f9
2022-07-04 23:27:58,833 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Instant -> org.hibernate.type.InstantType@46944ca9
2022-07-04 23:27:58,834 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@46944ca9
2022-07-04 23:27:58,838 DEBUG (BasicTypeRegistry.java:156) - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@2a448449
2022-07-04 23:27:58,839 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@2a448449
2022-07-04 23:27:58,842 DEBUG (BasicTypeRegistry.java:156) - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@517566b
2022-07-04 23:27:58,843 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@517566b
2022-07-04 23:27:58,845 DEBUG (BasicTypeRegistry.java:156) - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@55322aab
2022-07-04 23:27:58,846 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@55322aab
2022-07-04 23:27:58,848 DEBUG (BasicTypeRegistry.java:156) - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@126945f9
2022-07-04 23:27:58,848 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@126945f9
2022-07-04 23:27:58,851 DEBUG (BasicTypeRegistry.java:156) - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@4879dfad
2022-07-04 23:27:58,851 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@4879dfad
2022-07-04 23:27:58,856 DEBUG (BasicTypeRegistry.java:156) - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@737a135b
2022-07-04 23:27:58,857 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@737a135b
2022-07-04 23:27:58,862 DEBUG (BasicTypeRegistry.java:156) - Adding type registration date -> org.hibernate.type.DateType@6127a7e
2022-07-04 23:27:58,862 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Date -> org.hibernate.type.DateType@6127a7e
2022-07-04 23:27:58,864 DEBUG (BasicTypeRegistry.java:156) - Adding type registration time -> org.hibernate.type.TimeType@7a1a3478
2022-07-04 23:27:58,865 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@7a1a3478
2022-07-04 23:27:58,868 DEBUG (BasicTypeRegistry.java:156) - Adding type registration timestamp -> org.hibernate.type.TimestampType@4b6690c0
2022-07-04 23:27:58,869 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@4b6690c0
2022-07-04 23:27:58,869 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@4b6690c0
2022-07-04 23:27:58,873 DEBUG (BasicTypeRegistry.java:156) - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@eda25e5
2022-07-04 23:27:58,875 DEBUG (BasicTypeRegistry.java:156) - Adding type registration calendar -> org.hibernate.type.CalendarType@35f26e72
2022-07-04 23:27:58,875 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@35f26e72
2022-07-04 23:27:58,876 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@35f26e72
2022-07-04 23:27:58,877 DEBUG (BasicTypeRegistry.java:156) - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@79351f41
2022-07-04 23:27:58,879 DEBUG (BasicTypeRegistry.java:156) - Adding type registration locale -> org.hibernate.type.LocaleType@1e0f9063
2022-07-04 23:27:58,879 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@1e0f9063
2022-07-04 23:27:58,882 DEBUG (BasicTypeRegistry.java:156) - Adding type registration currency -> org.hibernate.type.CurrencyType@3ed242a4
2022-07-04 23:27:58,883 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@3ed242a4
2022-07-04 23:27:58,886 DEBUG (BasicTypeRegistry.java:156) - Adding type registration timezone -> org.hibernate.type.TimeZoneType@13f95696
2022-07-04 23:27:58,889 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@13f95696
2022-07-04 23:27:58,893 DEBUG (BasicTypeRegistry.java:156) - Adding type registration class -> org.hibernate.type.ClassType@ebaa6cb
2022-07-04 23:27:58,894 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@ebaa6cb
2022-07-04 23:27:58,896 DEBUG (BasicTypeRegistry.java:156) - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@66fdec9
2022-07-04 23:27:58,897 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@66fdec9
2022-07-04 23:27:58,899 DEBUG (BasicTypeRegistry.java:156) - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@52851b44
2022-07-04 23:27:58,903 DEBUG (BasicTypeRegistry.java:156) - Adding type registration binary -> org.hibernate.type.BinaryType@5ef6ae06
2022-07-04 23:27:58,904 DEBUG (BasicTypeRegistry.java:156) - Adding type registration byte[] -> org.hibernate.type.BinaryType@5ef6ae06
2022-07-04 23:27:58,904 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [B -> org.hibernate.type.BinaryType@5ef6ae06
2022-07-04 23:27:58,907 DEBUG (BasicTypeRegistry.java:156) - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@604f2bd2
2022-07-04 23:27:58,908 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@604f2bd2
2022-07-04 23:27:58,908 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@604f2bd2
2022-07-04 23:27:58,910 DEBUG (BasicTypeRegistry.java:156) - Adding type registration row_version -> org.hibernate.type.RowVersionType@366ac49b
2022-07-04 23:27:58,911 DEBUG (BasicTypeRegistry.java:156) - Adding type registration image -> org.hibernate.type.ImageType@2cc44ad
2022-07-04 23:27:58,913 DEBUG (BasicTypeRegistry.java:156) - Adding type registration characters -> org.hibernate.type.CharArrayType@33b1c5c5
2022-07-04 23:27:58,914 DEBUG (BasicTypeRegistry.java:156) - Adding type registration char[] -> org.hibernate.type.CharArrayType@33b1c5c5
2022-07-04 23:27:58,914 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [C -> org.hibernate.type.CharArrayType@33b1c5c5
2022-07-04 23:27:58,916 DEBUG (BasicTypeRegistry.java:156) - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@4535b6d5
2022-07-04 23:27:58,916 DEBUG (BasicTypeRegistry.java:156) - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@4535b6d5
2022-07-04 23:27:58,917 DEBUG (BasicTypeRegistry.java:156) - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@4535b6d5
2022-07-04 23:27:58,918 DEBUG (BasicTypeRegistry.java:156) - Adding type registration text -> org.hibernate.type.TextType@4b41e4dd
2022-07-04 23:27:58,919 DEBUG (BasicTypeRegistry.java:156) - Adding type registration ntext -> org.hibernate.type.NTextType@40844aab
2022-07-04 23:27:58,924 DEBUG (BasicTypeRegistry.java:156) - Adding type registration blob -> org.hibernate.type.BlobType@767e20cf
2022-07-04 23:27:58,925 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@767e20cf
2022-07-04 23:27:58,926 DEBUG (BasicTypeRegistry.java:156) - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@10ded6a9
2022-07-04 23:27:58,928 DEBUG (BasicTypeRegistry.java:156) - Adding type registration clob -> org.hibernate.type.ClobType@189aa67a
2022-07-04 23:27:58,929 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@189aa67a
2022-07-04 23:27:58,933 DEBUG (BasicTypeRegistry.java:156) - Adding type registration nclob -> org.hibernate.type.NClobType@542e560f
2022-07-04 23:27:58,933 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@542e560f
2022-07-04 23:27:58,934 DEBUG (BasicTypeRegistry.java:156) - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@3bcbb589
2022-07-04 23:27:58,935 DEBUG (BasicTypeRegistry.java:156) - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@53d102a2
2022-07-04 23:27:58,938 DEBUG (BasicTypeRegistry.java:156) - Adding type registration serializable -> org.hibernate.type.SerializableType@67c2e933
2022-07-04 23:27:58,946 DEBUG (BasicTypeRegistry.java:156) - Adding type registration object -> org.hibernate.type.ObjectType@5911e990
2022-07-04 23:27:58,946 DEBUG (BasicTypeRegistry.java:156) - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@5911e990
2022-07-04 23:27:58,948 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@54c62d71
2022-07-04 23:27:58,948 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@65045a87
2022-07-04 23:27:58,948 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@47f4e407
2022-07-04 23:27:58,949 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@2d1dee39
2022-07-04 23:27:58,949 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@48d5f34e
2022-07-04 23:27:58,949 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@fc258b1
2022-07-04 23:27:58,949 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@6ff65192
2022-07-04 23:27:58,950 DEBUG (BasicTypeRegistry.java:156) - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@2dd80673
2022-07-04 23:27:58,974 DEBUG (BootstrapContextImpl.java:272) - Injecting ScanEnvironment [org.hibernate.jpa.boot.internal.StandardJpaScanEnvironmentImpl@26bab2f1] into BootstrapContext; was [null]
2022-07-04 23:27:58,975 DEBUG (BootstrapContextImpl.java:267) - Injecting ScanOptions [org.hibernate.boot.archive.scan.internal.StandardScanOptions@3724af13] into BootstrapContext; was [org.hibernate.boot.archive.scan.internal.StandardScanOptions@68ead359]
2022-07-04 23:27:59,128 DEBUG (BootstrapContextImpl.java:262) - Injecting JPA temp ClassLoader [null] into BootstrapContext; was [null]
2022-07-04 23:27:59,129 DEBUG (ClassLoaderAccessImpl.java:45) - ClassLoaderAccessImpl#injectTempClassLoader(null) [was null]
2022-07-04 23:27:59,164 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2022-07-04 23:27:59,165 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2022-07-04 23:27:59,168 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2022-07-04 23:27:59,168 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2022-07-04 23:27:59,170 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2022-07-04 23:27:59,177 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2022-07-04 23:27:59,180 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2022-07-04 23:27:59,184 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2022-07-04 23:27:59,186 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2022-07-04 23:27:59,188 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2022-07-04 23:27:59,190 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2022-07-04 23:27:59,192 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2022-07-04 23:27:59,192 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2022-07-04 23:27:59,194 DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2022-07-04 23:27:59,205  WARN (DriverManagerConnectionProviderImpl.java:72) - HHH10001002: Using Hibernate built-in connection pool (not for production use!)
2022-07-04 23:27:59,234  INFO (DriverManagerConnectionProviderImpl.java:115) - HHH10001005: using driver [com.mysql.cj.jdbc.Driver] at URL [jdbc:mysql://localhost/playdata?characterEncoding=UTF-8]
2022-07-04 23:27:59,236  INFO (DriverManagerConnectionProviderImpl.java:121) - HHH10001001: Connection properties: {password=playdata, user=root}
2022-07-04 23:27:59,237  INFO (DriverManagerConnectionProviderImpl.java:129) - HHH10001003: Autocommit mode: false
2022-07-04 23:27:59,246 DEBUG (DelegatingBasicLogger.java:384) - Initializing Connection pool with 1 Connections
2022-07-04 23:27:59,246  INFO (DriverManagerConnectionProviderImpl.java:239) - HHH000115: Hibernate connection pool size: 20 (min=1)
2022-07-04 23:28:01,037 DEBUG (JdbcEnvironmentInitiator.java:72) - Database ->
       name : MySQL
    version : 8.0.29
      major : 8
      minor : 0
2022-07-04 23:28:01,039 DEBUG (JdbcEnvironmentInitiator.java:83) - Driver ->
       name : MySQL Connector/J
    version : mysql-connector-java-8.0.29 (Revision: dd61577595edad45c398af508cf91ad26fc4144f)
      major : 8
      minor : 0
2022-07-04 23:28:01,039 DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.2
2022-07-04 23:28:01,108  INFO (Dialect.java:158) - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2022-07-04 23:28:01,197 DEBUG (IdentifierHelperBuilder.java:117) - JDBC driver metadata reported database stores quoted identifiers in more than one case
2022-07-04 23:28:01,418 DEBUG (IdentifierHelperBuilder.java:191) - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
2022-07-04 23:28:01,629 DEBUG (Namespace.java:51) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2022-07-04 23:28:01,655 DEBUG (TypeConfiguration.java:152) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@340b7ef6] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@30404dba]
2022-07-04 23:28:01,913 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.Concert
2022-07-04 23:28:01,994 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 23:28:02,014 DEBUG (EntityBinder.java:430) - Import with entity name Concert
2022-07-04 23:28:02,048 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.Concert on table Concert
2022-07-04 23:28:02,172 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concert_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,187 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertId with lazy=false
2022-07-04 23:28:02,195 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:concertId]
2022-07-04 23:28:02,203 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertId
2022-07-04 23:28:02,210 DEBUG (PropertyBinder.java:266) - Building property concertId
2022-07-04 23:28:02,226 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(concert_id)]), concertId, identity, , ...)
2022-07-04 23:28:02,228 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concert_name, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,228 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertName with lazy=false
2022-07-04 23:28:02,229 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:concertName]
2022-07-04 23:28:02,230 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertName
2022-07-04 23:28:02,230 DEBUG (PropertyBinder.java:266) - Building property concertName
2022-07-04 23:28:02,235 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:28:02,238 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concertSinger, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,244 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=null, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,272 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=element, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,274 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=concertSinger_KEY, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,276 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concertSinger_KEY', referencedColumn='null', mappedBy='null'}
2022-07-04 23:28:02,280 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:28:02,281 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:28:02,284 DEBUG (CollectionBinder.java:449) - Collection role: concert.model.entity.Concert.concertSinger
2022-07-04 23:28:02,293 DEBUG (PropertyBinder.java:266) - Building property concertSinger
2022-07-04 23:28:02,295 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=contents, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,296 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property contents with lazy=false
2022-07-04 23:28:02,296 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:contents]
2022-07-04 23:28:02,296 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for contents
2022-07-04 23:28:02,298 DEBUG (PropertyBinder.java:266) - Building property contents
2022-07-04 23:28:02,299 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=date, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,300 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property date with lazy=false
2022-07-04 23:28:02,301 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:date]
2022-07-04 23:28:02,303 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for date
2022-07-04 23:28:02,303 DEBUG (PropertyBinder.java:266) - Building property date
2022-07-04 23:28:02,305 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=location, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,306 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property location with lazy=false
2022-07-04 23:28:02,307 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:location]
2022-07-04 23:28:02,307 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for location
2022-07-04 23:28:02,308 DEBUG (PropertyBinder.java:266) - Building property location
2022-07-04 23:28:02,308 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=max_seats, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,309 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property maxSeats with lazy=false
2022-07-04 23:28:02,310 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Concert:maxSeats]
2022-07-04 23:28:02,310 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for maxSeats
2022-07-04 23:28:02,311 DEBUG (PropertyBinder.java:266) - Building property maxSeats
2022-07-04 23:28:02,311 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:28:02,312 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=order, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,313 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=null, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,314 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=element, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,314 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Concert), mappingColumn=order_KEY, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,315 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='order_KEY', referencedColumn='null', mappedBy='null'}
2022-07-04 23:28:02,315 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:28:02,316 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='concert'}
2022-07-04 23:28:02,316 DEBUG (CollectionBinder.java:449) - Collection role: concert.model.entity.Concert.order
2022-07-04 23:28:02,318 DEBUG (PropertyBinder.java:266) - Building property order
2022-07-04 23:28:02,323 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.Orders
2022-07-04 23:28:02,324 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 23:28:02,325 DEBUG (EntityBinder.java:430) - Import with entity name Orders
2022-07-04 23:28:02,326 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.Orders on table Orders
2022-07-04 23:28:02,350 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=order_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,351 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property orderId with lazy=false
2022-07-04 23:28:02,352 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:orderId]
2022-07-04 23:28:02,352 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for orderId
2022-07-04 23:28:02,353 DEBUG (PropertyBinder.java:266) - Building property orderId
2022-07-04 23:28:02,355 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(order_id)]), orderId, identity, , ...)
2022-07-04 23:28:02,355 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=amount, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,356 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property amount with lazy=false
2022-07-04 23:28:02,356 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:amount]
2022-07-04 23:28:02,357 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for amount
2022-07-04 23:28:02,357 DEBUG (PropertyBinder.java:266) - Building property amount
2022-07-04 23:28:02,358 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concert_id', referencedColumn='', mappedBy=''}
2022-07-04 23:28:02,359 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=concert, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,365 DEBUG (PropertyBinder.java:266) - Building property concert
2022-07-04 23:28:02,369 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=concert_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,369 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concert_id with lazy=false
2022-07-04 23:28:02,370 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:concert_id]
2022-07-04 23:28:02,370 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concert_id
2022-07-04 23:28:02,371 DEBUG (PropertyBinder.java:266) - Building property concert_id
2022-07-04 23:28:02,372 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=customer_email, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,372 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property customerEmail with lazy=false
2022-07-04 23:28:02,373 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:customerEmail]
2022-07-04 23:28:02,374 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for customerEmail
2022-07-04 23:28:02,375 DEBUG (PropertyBinder.java:266) - Building property customerEmail
2022-07-04 23:28:02,375 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Orders), mappingColumn=customer_name, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,376 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property customerName with lazy=false
2022-07-04 23:28:02,377 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Orders:customerName]
2022-07-04 23:28:02,377 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for customerName
2022-07-04 23:28:02,379 DEBUG (PropertyBinder.java:266) - Building property customerName
2022-07-04 23:28:02,380 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.ConcertSinger
2022-07-04 23:28:02,381 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 23:28:02,382 DEBUG (EntityBinder.java:430) - Import with entity name ConcertSinger
2022-07-04 23:28:02,383 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.ConcertSinger on table concert_singer
2022-07-04 23:28:02,388 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=concert_singer_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,389 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertSingerId with lazy=false
2022-07-04 23:28:02,390 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.ConcertSinger:concertSingerId]
2022-07-04 23:28:02,390 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertSingerId
2022-07-04 23:28:02,391 DEBUG (PropertyBinder.java:266) - Building property concertSingerId
2022-07-04 23:28:02,391 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(concert_singer_id)]), concertSingerId, identity, , ...)
2022-07-04 23:28:02,395 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concert_id', referencedColumn='', mappedBy=''}
2022-07-04 23:28:02,396 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=concert, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,397 DEBUG (PropertyBinder.java:266) - Building property concert
2022-07-04 23:28:02,398 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=concert_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,398 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property concertId with lazy=false
2022-07-04 23:28:02,399 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.ConcertSinger:concertId]
2022-07-04 23:28:02,399 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for concertId
2022-07-04 23:28:02,400 DEBUG (PropertyBinder.java:266) - Building property concertId
2022-07-04 23:28:02,400 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='singer_id', referencedColumn='', mappedBy=''}
2022-07-04 23:28:02,403 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=singer, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,403 DEBUG (PropertyBinder.java:266) - Building property singer
2022-07-04 23:28:02,404 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(concert_singer), mappingColumn=singer_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,405 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property singerId with lazy=false
2022-07-04 23:28:02,405 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.ConcertSinger:singerId]
2022-07-04 23:28:02,406 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for singerId
2022-07-04 23:28:02,406 DEBUG (PropertyBinder.java:266) - Building property singerId
2022-07-04 23:28:02,407 DEBUG (AnnotationBinder.java:557) - Binding entity from annotated class: concert.model.entity.Singer
2022-07-04 23:28:02,408 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2022-07-04 23:28:02,408 DEBUG (EntityBinder.java:430) - Import with entity name Singer
2022-07-04 23:28:02,409 DEBUG (EntityBinder.java:873) - Bind entity concert.model.entity.Singer on table Singer
2022-07-04 23:28:02,415 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=singer_id, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,416 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property singerId with lazy=false
2022-07-04 23:28:02,416 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Singer:singerId]
2022-07-04 23:28:02,417 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for singerId
2022-07-04 23:28:02,418 DEBUG (PropertyBinder.java:266) - Building property singerId
2022-07-04 23:28:02,418 DEBUG (BinderHelper.java:644) - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(singer_id)]), singerId, identity, , ...)
2022-07-04 23:28:02,419 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='singer'}
2022-07-04 23:28:02,420 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=concertSinger, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,420 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=null, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,422 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=element, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,423 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=concertSinger_KEY, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,423 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='concertSinger_KEY', referencedColumn='null', mappedBy='null'}
2022-07-04 23:28:02,423 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='singer'}
2022-07-04 23:28:02,425 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='singer'}
2022-07-04 23:28:02,425 DEBUG (CollectionBinder.java:449) - Collection role: concert.model.entity.Singer.concertSinger
2022-07-04 23:28:02,426 DEBUG (PropertyBinder.java:266) - Building property concertSinger
2022-07-04 23:28:02,427 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=detail, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,427 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property detail with lazy=false
2022-07-04 23:28:02,428 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Singer:detail]
2022-07-04 23:28:02,429 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for detail
2022-07-04 23:28:02,429 DEBUG (PropertyBinder.java:266) - Building property detail
2022-07-04 23:28:02,430 DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Singer), mappingColumn=singer_name, insertable=true, updatable=true, unique=false}
2022-07-04 23:28:02,430 DEBUG (PropertyBinder.java:175) - MetadataSourceProcessor property singerName with lazy=false
2022-07-04 23:28:02,432 DEBUG (AbstractPropertyHolder.java:94) - Attempting to locate auto-apply AttributeConverter for property [concert.model.entity.Singer:singerName]
2022-07-04 23:28:02,432 DEBUG (SimpleValueBinder.java:411) - building SimpleValue for singerName
2022-07-04 23:28:02,433 DEBUG (PropertyBinder.java:266) - Building property singerName
2022-07-04 23:28:02,436 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertId
2022-07-04 23:28:02,437 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertName
2022-07-04 23:28:02,438 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for contents
2022-07-04 23:28:02,438 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for date
2022-07-04 23:28:02,439 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for location
2022-07-04 23:28:02,439 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for maxSeats
2022-07-04 23:28:02,440 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for orderId
2022-07-04 23:28:02,440 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for amount
2022-07-04 23:28:02,441 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concert_id
2022-07-04 23:28:02,441 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for customerEmail
2022-07-04 23:28:02,441 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for customerName
2022-07-04 23:28:02,441 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertSingerId
2022-07-04 23:28:02,442 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for concertId
2022-07-04 23:28:02,442 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for singerId
2022-07-04 23:28:02,442 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for singerId
2022-07-04 23:28:02,442 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for detail
2022-07-04 23:28:02,442 DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for singerName
2022-07-04 23:28:02,451 DEBUG (PrimaryKey.java:35) - Forcing column [concert_id] to be non-null as it is part of the primary key for table [concert]
2022-07-04 23:28:02,451 DEBUG (PrimaryKey.java:35) - Forcing column [order_id] to be non-null as it is part of the primary key for table [orders]
2022-07-04 23:28:02,453 DEBUG (PrimaryKey.java:35) - Forcing column [concert_singer_id] to be non-null as it is part of the primary key for table [concert_singer]
2022-07-04 23:28:02,453 DEBUG (PrimaryKey.java:35) - Forcing column [singer_id] to be non-null as it is part of the primary key for table [singer]
2022-07-04 23:28:02,454 DEBUG (CollectionSecondPass.java:51) - Second pass for collection: concert.model.entity.Concert.concertSinger
2022-07-04 23:28:02,458 DEBUG (CollectionBinder.java:898) - Binding a OneToMany: concert.model.entity.Concert.concertSinger through a foreign key
2022-07-04 23:28:02,459 DEBUG (CollectionBinder.java:936) - Mapping collection: concert.model.entity.Concert.concertSinger -> concert_singer
2022-07-04 23:28:02,463 DEBUG (TableBinder.java:565) - Retrieving property concert.model.entity.ConcertSinger.concert
2022-07-04 23:28:02,464 DEBUG (CollectionSecondPass.java:68) - Mapped collection key: concert_id, one-to-many: concert.model.entity.ConcertSinger
2022-07-04 23:28:02,465 DEBUG (CollectionSecondPass.java:51) - Second pass for collection: concert.model.entity.Concert.order
2022-07-04 23:28:02,465 DEBUG (CollectionBinder.java:898) - Binding a OneToMany: concert.model.entity.Concert.order through a foreign key
2022-07-04 23:28:02,466 DEBUG (CollectionBinder.java:936) - Mapping collection: concert.model.entity.Concert.order -> Orders
2022-07-04 23:28:02,466 DEBUG (TableBinder.java:565) - Retrieving property concert.model.entity.Orders.concert
2022-07-04 23:28:02,467 DEBUG (CollectionSecondPass.java:68) - Mapped collection key: concert_id, one-to-many: concert.model.entity.Orders
2022-07-04 23:28:02,467 DEBUG (CollectionSecondPass.java:51) - Second pass for collection: concert.model.entity.Singer.concertSinger
2022-07-04 23:28:02,468 DEBUG (CollectionBinder.java:898) - Binding a OneToMany: concert.model.entity.Singer.concertSinger through a foreign key
2022-07-04 23:28:02,468 DEBUG (CollectionBinder.java:936) - Mapping collection: concert.model.entity.Singer.concertSinger -> concert_singer
2022-07-04 23:28:02,468 DEBUG (TableBinder.java:565) - Retrieving property concert.model.entity.ConcertSinger.singer
2022-07-04 23:28:02,469 DEBUG (CollectionSecondPass.java:68) - Mapped collection key: singer_id, one-to-many: concert.model.entity.ConcertSinger
2022-07-04 23:28:02,469 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 23:28:02,475 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Singer
2022-07-04 23:28:02,476 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 23:28:02,478 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 23:28:02,479 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Singer
2022-07-04 23:28:02,479 DEBUG (InFlightMetadataCollectorImpl.java:1861) - Resolving reference to class: concert.model.entity.Concert
2022-07-04 23:28:02,561 DEBUG (SessionFactoryImpl.java:196) - Building session factory
2022-07-04 23:28:02,563 DEBUG (Settings.java:70) - SessionFactory name : null
2022-07-04 23:28:02,565 DEBUG (Settings.java:71) - Automatic flush during beforeCompletion(): enabled
2022-07-04 23:28:02,565 DEBUG (Settings.java:72) - Automatic session close at end of transaction: disabled
2022-07-04 23:28:02,565 DEBUG (Settings.java:74) - Statistics: disabled
2022-07-04 23:28:02,565 DEBUG (Settings.java:76) - Deleted entity synthetic identifier rollback: disabled
2022-07-04 23:28:02,566 DEBUG (Settings.java:77) - Default entity-mode: pojo
2022-07-04 23:28:02,566 DEBUG (Settings.java:78) - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2022-07-04 23:28:02,566 DEBUG (Settings.java:79) - Allow initialization of lazy state outside session : disabled
2022-07-04 23:28:02,566 DEBUG (Settings.java:81) - Using BatchFetchStyle : LEGACY
2022-07-04 23:28:02,567 DEBUG (Settings.java:82) - Default batch fetch size: -1
2022-07-04 23:28:02,567 DEBUG (Settings.java:83) - Maximum outer join fetch depth: 2
2022-07-04 23:28:02,567 DEBUG (Settings.java:84) - Default null ordering: NONE
2022-07-04 23:28:02,567 DEBUG (Settings.java:85) - Order SQL updates by primary key: disabled
2022-07-04 23:28:02,567 DEBUG (Settings.java:86) - Order SQL inserts for batching: disabled
2022-07-04 23:28:02,568 DEBUG (Settings.java:88) - multi-tenancy strategy : NONE
2022-07-04 23:28:02,568 DEBUG (Settings.java:90) - JTA Track by Thread: enabled
2022-07-04 23:28:02,568 DEBUG (Settings.java:92) - Query language substitutions: {}
2022-07-04 23:28:02,568 DEBUG (Settings.java:93) - Named query checking : enabled
2022-07-04 23:28:02,568 DEBUG (Settings.java:95) - Second-level cache: disabled
2022-07-04 23:28:02,569 DEBUG (Settings.java:96) - Second-level query cache: disabled
2022-07-04 23:28:02,569 DEBUG (Settings.java:97) - Second-level query cache factory: null
2022-07-04 23:28:02,569 DEBUG (Settings.java:98) - Second-level cache region prefix: null
2022-07-04 23:28:02,569 DEBUG (Settings.java:99) - Optimize second-level cache for minimal puts: disabled
2022-07-04 23:28:02,569 DEBUG (Settings.java:100) - Structured second-level cache entries: disabled
2022-07-04 23:28:02,569 DEBUG (Settings.java:101) - Second-level cache direct-reference entries: disabled
2022-07-04 23:28:02,569 DEBUG (Settings.java:102) - Automatic eviction of collection cache: disabled
2022-07-04 23:28:02,569 DEBUG (Settings.java:104) - JDBC batch size: 15
2022-07-04 23:28:02,569 DEBUG (Settings.java:105) - JDBC batch updates for versioned data: enabled
2022-07-04 23:28:02,569 DEBUG (Settings.java:106) - Scrollable result sets: enabled
2022-07-04 23:28:02,569 DEBUG (Settings.java:107) - Wrap result sets: disabled
2022-07-04 23:28:02,570 DEBUG (Settings.java:108) - JDBC3 getGeneratedKeys(): enabled
2022-07-04 23:28:02,570 DEBUG (Settings.java:109) - JDBC result set fetch size: null
2022-07-04 23:28:02,570 DEBUG (Settings.java:110) - Connection release mode: AFTER_TRANSACTION
2022-07-04 23:28:02,570 DEBUG (Settings.java:111) - Generate SQL with comments: disabled
2022-07-04 23:28:02,570 DEBUG (Settings.java:113) - JPA compliance - query : 
2022-07-04 23:28:02,571 DEBUG (Settings.java:114) - JPA compliance - closed-handling : 
2022-07-04 23:28:02,571 DEBUG (Settings.java:115) - JPA compliance - lists : 
2022-07-04 23:28:02,572 DEBUG (Settings.java:116) - JPA compliance - transactions : 
2022-07-04 23:28:02,738 DEBUG (SessionFactoryImpl.java:251) - Session factory constructed with filter configurations : {}
2022-07-04 23:28:02,738 DEBUG (SessionFactoryImpl.java:252) - Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, hibernate.format_sql=true, java.specification.version=11, sun.cpu.isalist=amd64, sun.jnu.encoding=MS949, hibernate.dialect=org.hibernate.dialect.MySQL8Dialect, java.class.path=C:\Users\신동혁\playdata\20220509_lab\03.web\concertProject\concert\target\classes;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\annotations-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-ant.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-ha.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-ssi.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-storeconfig.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina-tribes.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\catalina.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\ecj-4.20.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\el-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jasper-el.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jasper.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jaspic-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\jsp-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\servlet-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-api.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-coyote.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-dbcp.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-cs.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-de.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-es.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-fr.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-ja.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-ko.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-pt-BR.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-ru.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-i18n-zh-CN.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-jdbc.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-jni.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-util-scan.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-util.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\tomcat-websocket.jar;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\tomcat9\lib\websocket-api.jar;C:\Users\신동혁\.m2\repository\javax\persistence\javax.persistence-api\2.2\javax.persistence-api-2.2.jar;C:\Users\신동혁\.m2\repository\org\hibernate\hibernate-entitymanager\5.4.2.Final\hibernate-entitymanager-5.4.2.Final.jar;C:\Users\신동혁\.m2\repository\org\jboss\logging\jboss-logging\3.3.2.Final\jboss-logging-3.3.2.Final.jar;C:\Users\신동혁\.m2\repository\org\hibernate\hibernate-core\5.4.2.Final\hibernate-core-5.4.2.Final.jar;C:\Users\신동혁\.m2\repository\org\javassist\javassist\3.24.0-GA\javassist-3.24.0-GA.jar;C:\Users\신동혁\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\신동혁\.m2\repository\org\jboss\jandex\2.0.5.Final\jandex-2.0.5.Final.jar;C:\Users\신동혁\.m2\repository\com\fasterxml\classmate\1.3.4\classmate-1.3.4.jar;C:\Users\신동혁\.m2\repository\javax\activation\javax.activation-api\1.2.0\javax.activation-api-1.2.0.jar;C:\Users\신동혁\.m2\repository\javax\xml\bind\jaxb-api\2.3.1\jaxb-api-2.3.1.jar;C:\Users\신동혁\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.1\jaxb-runtime-2.3.1.jar;C:\Users\신동혁\.m2\repository\org\glassfish\jaxb\txw2\2.3.1\txw2-2.3.1.jar;C:\Users\신동혁\.m2\repository\com\sun\istack\istack-commons-runtime\3.0.7\istack-commons-runtime-3.0.7.jar;C:\Users\신동혁\.m2\repository\org\jvnet\staxex\stax-ex\1.8\stax-ex-1.8.jar;C:\Users\신동혁\.m2\repository\com\sun\xml\fastinfoset\FastInfoset\1.2.15\FastInfoset-1.2.15.jar;C:\Users\신동혁\.m2\repository\org\dom4j\dom4j\2.1.1\dom4j-2.1.1.jar;C:\Users\신동혁\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.1.0.Final\hibernate-commons-annotations-5.1.0.Final.jar;C:\Users\신동혁\.m2\repository\net\bytebuddy\byte-buddy\1.9.10\byte-buddy-1.9.10.jar;C:\Users\신동혁\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.1.1.Final\jboss-transaction-api_1.2_spec-1.1.1.Final.jar;C:\Users\신동혁\.m2\repository\junit\junit\4.13.2\junit-4.13.2.jar;C:\Users\신동혁\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\신동혁\.m2\repository\org\projectlombok\lombok\1.18.24\lombok-1.18.24.jar;C:\Users\신동혁\.m2\repository\com\jslsolucoes\ojdbc6\11.2.0.1.0\ojdbc6-11.2.0.1.0.jar;C:\Users\신동혁\.m2\repository\mysql\mysql-connector-java\8.0.29\mysql-connector-java-8.0.29.jar;C:\Users\신동혁\.m2\repository\com\google\protobuf\protobuf-java\3.19.4\protobuf-java-3.19.4.jar;C:\Users\신동혁\.m2\repository\org\slf4j\slf4j-api\1.7.5\slf4j-api-1.7.5.jar;C:\Users\신동혁\.m2\repository\org\slf4j\slf4j-log4j12\1.7.5\slf4j-log4j12-1.7.5.jar;C:\Users\신동혁\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\신동혁\.m2\repository\org\modelmapper\modelmapper\2.4.0\modelmapper-2.4.0.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Asia/Seoul, javax.persistence.jdbc.url=jdbc:mysql://localhost/playdata?characterEncoding=UTF-8, javax.persistence.jdbc.user=****, os.name=Windows 10, java.vm.specification.version=11, sun.java.launcher=SUN_STANDARD, user.country=KR, sun.boot.library.path=C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11\bin, sun.java.command=cocert.model.dao.Test, jdk.debug=release, sun.cpu.endian=little, user.home=C:\Users\신동혁, user.language=ko, java.specification.vendor=Oracle Corporation, java.version.date=2018-09-25, java.home=C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11, file.separator=\, java.vm.compressedOopsMode=32-bit, line.separator=
, java.specification.name=Java Platform API Specification, java.vm.specification.vendor=Oracle Corporation, hibernate.transaction.coordinator_class=class org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, javax.persistence.jdbc.driver=com.mysql.cj.jdbc.Driver, hibernate.hbm2ddl.auto=none, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=11+28, user.name=Shin, path.separator=;, hibernate.connection.username=****, os.version=10.0, java.runtime.name=OpenJDK Runtime Environment, hibernate.connection.url=jdbc:mysql://localhost/playdata?characterEncoding=UTF-8, file.encoding=UTF-8, hibernate.ejb.persistenceUnitName=dbinfo, java.vm.name=OpenJDK 64-Bit Server VM, hibernate.show_sql=true, java.vendor.version=18.9, hibernate.connection.driver_class=com.mysql.cj.jdbc.Driver, java.vendor.url.bug=http://bugreport.java.com/bugreport/, java.io.tmpdir=C:\Users\신동혁\AppData\Local\Temp\, java.version=11, user.dir=C:\Users\신동혁\playdata\20220509_lab\03.web\concertProject\concert, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.password=****, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@2c58dcb1, java.library.path=C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Users/신동혁/playdata/20220509_lab/99.devEnv/eclipse//plugins/org.eclipse.justj.openjdk.hotspot.jre.full.win32.x86_64_16.0.1.v20210528-1205/jre/bin/server;C:/Users/신동혁/playdata/20220509_lab/99.devEnv/eclipse//plugins/org.eclipse.justj.openjdk.hotspot.jre.full.win32.x86_64_16.0.1.v20210528-1205/jre/bin;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\jdk-11\bin;C:\oraclexe\app\oracle\product\11.2.0\server\bin;C:\Program Files\MySQL\MySQL Server 8.0\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\Bandizip\;C:\Program Files\Git\cmd;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\신동혁\AppData\Local\Programs\Python\Python39\Scripts\;C:\Users\신동혁\AppData\Local\Programs\Python\Python39\;C:\Users\신동혁\AppData\Local\Microsoft\WindowsApps;C:\Users\신동혁\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\신동혁\playdata\20220509_lab\99.devEnv\eclipse;;., java.vendor=Oracle Corporation, java.vm.info=mixed mode, java.vm.version=11+28, hibernate.bytecode.use_reflection_optimizer=false, sun.io.unicode.encoding=UnicodeLittle, javax.persistence.jdbc.password=****, java.class.version=55.0}
2022-07-04 23:28:02,770 DEBUG (JaccIntegrator.java:80) - Skipping JACC integration as it was not enabled
2022-07-04 23:28:02,773 DEBUG (SessionFactoryImpl.java:291) - Instantiated session factory
2022-07-04 23:28:02,773 DEBUG (TypeConfiguration.java:157) - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@340b7ef6] to SessionFactoryImpl [org.hibernate.internal.SessionFactoryImpl@5fe7f967]
2022-07-04 23:28:02,880 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Concert] is safe
2022-07-04 23:28:02,880 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Concert
2022-07-04 23:28:02,919 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Concert] is safe
2022-07-04 23:28:02,920 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Concert
2022-07-04 23:28:03,508 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Orders] is safe
2022-07-04 23:28:03,508 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Orders
2022-07-04 23:28:03,509 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Orders] is safe
2022-07-04 23:28:03,510 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Orders
2022-07-04 23:28:03,552 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.ConcertSinger] is safe
2022-07-04 23:28:03,552 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.ConcertSinger
2022-07-04 23:28:03,554 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.ConcertSinger] is safe
2022-07-04 23:28:03,554 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.ConcertSinger
2022-07-04 23:28:03,598 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Singer] is safe
2022-07-04 23:28:03,598 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Singer
2022-07-04 23:28:03,599 DEBUG (ClassLoaderAccessImpl.java:60) - Not known whether passed class name [concert.model.entity.Singer] is safe
2022-07-04 23:28:03,600 DEBUG (ClassLoaderAccessImpl.java:62) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : concert.model.entity.Singer
2022-07-04 23:28:03,663 DEBUG (AbstractCollectionPersister.java:688) - Static SQL for collection: concert.model.entity.Singer.concertSinger
2022-07-04 23:28:03,666 DEBUG (AbstractCollectionPersister.java:690) -  Row insert: update concert_singer set singer_id=? where concert_singer_id=?
2022-07-04 23:28:03,667 DEBUG (AbstractCollectionPersister.java:693) -  Row update: update concert_singer set  where concert_singer_id=?
2022-07-04 23:28:03,667 DEBUG (AbstractCollectionPersister.java:696) -  Row delete: update concert_singer set singer_id=null where singer_id=? and concert_singer_id=?
2022-07-04 23:28:03,669 DEBUG (AbstractCollectionPersister.java:699) -  One-shot delete: update concert_singer set singer_id=null where singer_id=?
2022-07-04 23:28:03,670 DEBUG (AbstractCollectionPersister.java:688) - Static SQL for collection: concert.model.entity.Concert.order
2022-07-04 23:28:03,671 DEBUG (AbstractCollectionPersister.java:690) -  Row insert: update Orders set concert_id=? where order_id=?
2022-07-04 23:28:03,671 DEBUG (AbstractCollectionPersister.java:693) -  Row update: update Orders set  where order_id=?
2022-07-04 23:28:03,672 DEBUG (AbstractCollectionPersister.java:696) -  Row delete: update Orders set concert_id=null where concert_id=? and order_id=?
2022-07-04 23:28:03,673 DEBUG (AbstractCollectionPersister.java:699) -  One-shot delete: update Orders set concert_id=null where concert_id=?
2022-07-04 23:28:03,674 DEBUG (AbstractCollectionPersister.java:688) - Static SQL for collection: concert.model.entity.Concert.concertSinger
2022-07-04 23:28:03,674 DEBUG (AbstractCollectionPersister.java:690) -  Row insert: update concert_singer set concert_id=? where concert_singer_id=?
2022-07-04 23:28:03,674 DEBUG (AbstractCollectionPersister.java:693) -  Row update: update concert_singer set  where concert_singer_id=?
2022-07-04 23:28:03,675 DEBUG (AbstractCollectionPersister.java:696) -  Row delete: update concert_singer set concert_id=null where concert_id=? and concert_singer_id=?
2022-07-04 23:28:03,675 DEBUG (AbstractCollectionPersister.java:699) -  One-shot delete: update concert_singer set concert_id=null where concert_id=?
2022-07-04 23:28:03,688 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.Concert
2022-07-04 23:28:03,690 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select concert_id from Concert where concert_id =?
2022-07-04 23:28:03,690 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select concert_.concert_id, concert_.concert_name as concert_2_0_, concert_.contents as contents3_0_, concert_.date as date4_0_, concert_.location as location5_0_, concert_.max_seats as max_seat6_0_ from Concert concert_ where concert_.concert_id=?
2022-07-04 23:28:03,690 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Concert (concert_name, contents, date, location, max_seats, concert_id) values (?, ?, ?, ?, ?, ?)
2022-07-04 23:28:03,690 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Concert set concert_name=?, contents=?, date=?, location=?, max_seats=? where concert_id=?
2022-07-04 23:28:03,690 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Concert where concert_id=?
2022-07-04 23:28:03,690 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into Concert (concert_name, contents, date, location, max_seats) values (?, ?, ?, ?, ?)
2022-07-04 23:28:03,745 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4e642ee1]
2022-07-04 23:28:03,748 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertName
2022-07-04 23:28:03,749 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 23:28:03,761 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@751ae8a4]
2022-07-04 23:28:03,765 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7e307087]
2022-07-04 23:28:03,767 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : contents
2022-07-04 23:28:03,767 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : date
2022-07-04 23:28:03,768 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : location
2022-07-04 23:28:03,768 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : maxSeats
2022-07-04 23:28:03,768 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : order
2022-07-04 23:28:03,769 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@4bcaa195]
2022-07-04 23:28:03,770 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@d08edc5]
2022-07-04 23:28:03,770 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:28:03,810 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:28:03,826 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Concert)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:0>, path=concert.model.entity.Concert)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Concert.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Concert.concertSinger.<elements>)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.order, querySpaceUid=<gen:3>, path=concert.model.entity.Concert.order)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.Orders, querySpaceUid=<gen:4>, path=concert.model.entity.Concert.order.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Concert)
          - SQL table alias mapping - concert0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_0_0_}

2022-07-04 23:28:03,832 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Concert [NONE]: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 23:28:03,832 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7c2924d7]
2022-07-04 23:28:03,833 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertName
2022-07-04 23:28:03,833 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 23:28:03,834 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6587305a]
2022-07-04 23:28:03,834 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@abbe000]
2022-07-04 23:28:03,835 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : contents
2022-07-04 23:28:03,835 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : date
2022-07-04 23:28:03,835 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : location
2022-07-04 23:28:03,835 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : maxSeats
2022-07-04 23:28:03,836 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : order
2022-07-04 23:28:03,836 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@3f81621c]
2022-07-04 23:28:03,836 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5b9499fe]
2022-07-04 23:28:03,837 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:28:03,839 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:28:03,840 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Concert)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:0>, path=concert.model.entity.Concert)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Concert.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Concert.concertSinger.<elements>)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Concert.order, querySpaceUid=<gen:3>, path=concert.model.entity.Concert.order)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.Orders, querySpaceUid=<gen:4>, path=concert.model.entity.Concert.order.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Concert)
          - SQL table alias mapping - concert0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_0_0_}

2022-07-04 23:28:03,841 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Concert [READ]: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 23:28:03,874 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.Concert: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 23:28:03,875 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.Concert: select concert0_.concert_id as concert_1_0_0_, concert0_.concert_name as concert_2_0_0_, concert0_.contents as contents3_0_0_, concert0_.date as date4_0_0_, concert0_.location as location5_0_0_, concert0_.max_seats as max_seat6_0_0_ from Concert concert0_ where concert0_.concert_id=?
2022-07-04 23:28:03,876 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.Orders
2022-07-04 23:28:03,876 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select order_id from Orders where order_id =?
2022-07-04 23:28:03,876 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select orders_.order_id, orders_.amount as amount2_2_, orders_.concert_id as concert_3_2_, orders_.customer_email as customer4_2_, orders_.customer_name as customer5_2_ from Orders orders_ where orders_.order_id=?
2022-07-04 23:28:03,877 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Orders (amount, concert_id, customer_email, customer_name, order_id) values (?, ?, ?, ?, ?)
2022-07-04 23:28:03,877 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Orders set amount=?, concert_id=?, customer_email=?, customer_name=? where order_id=?
2022-07-04 23:28:03,877 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Orders where order_id=?
2022-07-04 23:28:03,878 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into Orders (amount, concert_id, customer_email, customer_name) values (?, ?, ?, ?)
2022-07-04 23:28:03,879 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@38cedb7d]
2022-07-04 23:28:03,879 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : amount
2022-07-04 23:28:03,879 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:28:03,880 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2acdcce8]
2022-07-04 23:28:03,882 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert_id
2022-07-04 23:28:03,882 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerEmail
2022-07-04 23:28:03,883 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerName
2022-07-04 23:28:03,883 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:28:03,884 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:28:03,885 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Orders)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Orders, querySpaceUid=<gen:0>, path=concert.model.entity.Orders)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.Orders.concert)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {order_id1_2_0_}

2022-07-04 23:28:03,885 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Orders [NONE]: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 23:28:03,886 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@d5bb1c4]
2022-07-04 23:28:03,886 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : amount
2022-07-04 23:28:03,887 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:28:03,887 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@465b38e6]
2022-07-04 23:28:03,888 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert_id
2022-07-04 23:28:03,888 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerEmail
2022-07-04 23:28:03,888 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerName
2022-07-04 23:28:03,889 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:28:03,890 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:28:03,890 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Orders)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Orders, querySpaceUid=<gen:0>, path=concert.model.entity.Orders)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.Orders.concert)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {order_id1_2_0_}

2022-07-04 23:28:03,891 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Orders [READ]: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 23:28:03,893 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.Orders: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 23:28:03,894 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.Orders: select orders0_.order_id as order_id1_2_0_, orders0_.amount as amount2_2_0_, orders0_.concert_id as concert_3_2_0_, orders0_.customer_email as customer4_2_0_, orders0_.customer_name as customer5_2_0_ from Orders orders0_ where orders0_.order_id=?
2022-07-04 23:28:03,895 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.ConcertSinger
2022-07-04 23:28:03,896 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select concert_singer_id from concert_singer where concert_singer_id =?
2022-07-04 23:28:03,896 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select concertsin_.concert_singer_id, concertsin_.concert_id as concert_2_1_, concertsin_.singer_id as singer_i3_1_ from concert_singer concertsin_ where concertsin_.concert_singer_id=?
2022-07-04 23:28:03,896 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into concert_singer (concert_id, singer_id, concert_singer_id) values (?, ?, ?)
2022-07-04 23:28:03,896 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update concert_singer set concert_id=?, singer_id=? where concert_singer_id=?
2022-07-04 23:28:03,897 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from concert_singer where concert_singer_id=?
2022-07-04 23:28:03,897 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into concert_singer (concert_id, singer_id) values (?, ?)
2022-07-04 23:28:03,897 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4b960b5b]
2022-07-04 23:28:03,897 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:28:03,898 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7bd96822]
2022-07-04 23:28:03,898 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 23:28:03,898 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 23:28:03,900 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@64dae3b7]
2022-07-04 23:28:03,900 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 23:28:03,901 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:28:03,902 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:28:03,902 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.ConcertSinger)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:0>, path=concert.model.entity.ConcertSinger)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.ConcertSinger.concert)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:2>, path=concert.model.entity.ConcertSinger.singer)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.ConcertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_1_0_}

2022-07-04 23:28:03,903 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.ConcertSinger [NONE]: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 23:28:03,903 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1fedf0a4]
2022-07-04 23:28:03,904 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:28:03,904 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2ee48610]
2022-07-04 23:28:03,905 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 23:28:03,906 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 23:28:03,906 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1d901f20]
2022-07-04 23:28:03,907 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 23:28:03,907 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:28:03,907 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:28:03,908 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.ConcertSinger)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:0>, path=concert.model.entity.ConcertSinger)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:1>, path=concert.model.entity.ConcertSinger.concert)
          - EntityAttributeFetchImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:2>, path=concert.model.entity.ConcertSinger.singer)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.ConcertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {concert_1_1_0_}

2022-07-04 23:28:03,909 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.ConcertSinger [READ]: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 23:28:03,910 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.ConcertSinger: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 23:28:03,910 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.ConcertSinger: select concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_id as concert_2_1_0_, concertsin0_.singer_id as singer_i3_1_0_ from concert_singer concertsin0_ where concertsin0_.concert_singer_id=?
2022-07-04 23:28:03,911 DEBUG (AbstractEntityPersister.java:3791) - Static SQL for entity: concert.model.entity.Singer
2022-07-04 23:28:03,911 DEBUG (AbstractEntityPersister.java:3796) -  Version select: select singer_id from Singer where singer_id =?
2022-07-04 23:28:03,912 DEBUG (AbstractEntityPersister.java:3799) -  Snapshot select: select singer_.singer_id, singer_.detail as detail2_3_, singer_.singer_name as singer_n3_3_ from Singer singer_ where singer_.singer_id=?
2022-07-04 23:28:03,912 DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Singer (detail, singer_name, singer_id) values (?, ?, ?)
2022-07-04 23:28:03,912 DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Singer set detail=?, singer_name=? where singer_id=?
2022-07-04 23:28:03,912 DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Singer where singer_id=?
2022-07-04 23:28:03,912 DEBUG (AbstractEntityPersister.java:3807) -  Identity insert: insert into Singer (detail, singer_name) values (?, ?)
2022-07-04 23:28:03,913 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6d08b4e6]
2022-07-04 23:28:03,914 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 23:28:03,914 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1acb74ad]
2022-07-04 23:28:03,914 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7bf01cb]
2022-07-04 23:28:03,915 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : detail
2022-07-04 23:28:03,915 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerName
2022-07-04 23:28:03,916 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:28:03,916 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:28:03,917 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Singer)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:0>, path=concert.model.entity.Singer)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Singer.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Singer.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Singer.concertSinger.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Singer)
          - SQL table alias mapping - singer0_
          - alias suffix - 0_
          - suffixed key columns - {singer_i1_3_0_}

2022-07-04 23:28:03,917 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Singer [NONE]: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 23:28:03,917 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2f382a5e]
2022-07-04 23:28:03,919 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertSinger
2022-07-04 23:28:03,920 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@539a138b]
2022-07-04 23:28:03,920 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2cd4e16a]
2022-07-04 23:28:03,920 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : detail
2022-07-04 23:28:03,921 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerName
2022-07-04 23:28:03,921 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:28:03,922 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:28:03,923 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=concert.model.entity.Singer)
    - Returns
       - EntityReturnImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:0>, path=concert.model.entity.Singer)
          - CollectionAttributeFetchImpl(collection=concert.model.entity.Singer.concertSinger, querySpaceUid=<gen:1>, path=concert.model.entity.Singer.concertSinger)
             - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:2>, path=concert.model.entity.Singer.concertSinger.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=concert.model.entity.Singer)
          - SQL table alias mapping - singer0_
          - alias suffix - 0_
          - suffixed key columns - {singer_i1_3_0_}

2022-07-04 23:28:03,924 DEBUG (EntityLoader.java:137) - Static select for entity concert.model.entity.Singer [READ]: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 23:28:03,925 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity concert.model.entity.Singer: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 23:28:03,925 DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity concert.model.entity.Singer: select singer0_.singer_id as singer_i1_3_0_, singer0_.detail as detail2_3_0_, singer0_.singer_name as singer_n3_3_0_ from Singer singer0_ where singer0_.singer_id=?
2022-07-04 23:28:03,935 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@7affc159]
2022-07-04 23:28:03,936 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1682c08c]
2022-07-04 23:28:03,940 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:28:03,940 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2f14b0f6]
2022-07-04 23:28:03,941 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 23:28:03,941 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 23:28:03,942 DEBUG (MetamodelGraphWalker.java:154) - Property path deemed to be circular : singer
2022-07-04 23:28:03,943 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 23:28:03,943 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:28:03,957 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:28:03,958 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(collection=concert.model.entity.Singer.concertSinger)
    - Returns
       - CollectionReturnImpl(collection=concert.model.entity.Singer.concertSinger, querySpaceUid=<gen:0>, path=[concert.model.entity.Singer.concertSinger])
          - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:1>, path=[concert.model.entity.Singer.concertSinger].<elements>)
             - EntityAttributeFetchImpl(entity=concert.model.entity.Concert, querySpaceUid=<gen:2>, path=[concert.model.entity.Singer.concertSinger].<elements>.concert)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=concert.model.entity.Singer.concertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {singer_i3_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - concert_1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=concert.model.entity.ConcertSinger)
                - SQL table alias mapping - concertsin0_
                - alias suffix - 1_
                - suffixed key columns - {concert_1_1_1_}

2022-07-04 23:28:03,963 DEBUG (CollectionLoader.java:83) - Static select for collection concert.model.entity.Singer.concertSinger: select concertsin0_.singer_id as singer_i3_1_0_, concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_singer_id as concert_1_1_1_, concertsin0_.concert_id as concert_2_1_1_, concertsin0_.singer_id as singer_i3_1_1_ from concert_singer concertsin0_ where concertsin0_.singer_id=?
2022-07-04 23:28:03,964 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@273a5a8a]
2022-07-04 23:28:03,964 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1823b9c4]
2022-07-04 23:28:03,964 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : amount
2022-07-04 23:28:03,965 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:28:03,965 DEBUG (MetamodelGraphWalker.java:154) - Property path deemed to be circular : concert
2022-07-04 23:28:03,965 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert_id
2022-07-04 23:28:03,965 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerEmail
2022-07-04 23:28:03,965 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : customerName
2022-07-04 23:28:03,966 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:28:03,966 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:28:03,966 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(collection=concert.model.entity.Concert.order)
    - Returns
       - CollectionReturnImpl(collection=concert.model.entity.Concert.order, querySpaceUid=<gen:0>, path=[concert.model.entity.Concert.order])
          - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.Orders, querySpaceUid=<gen:1>, path=[concert.model.entity.Concert.order].<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=concert.model.entity.Concert.order)
          - SQL table alias mapping - order0_
          - alias suffix - 0_
          - suffixed key columns - {concert_3_2_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - order_id1_2_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=concert.model.entity.Orders)
                - SQL table alias mapping - order0_
                - alias suffix - 1_
                - suffixed key columns - {order_id1_2_1_}

2022-07-04 23:28:03,967 DEBUG (CollectionLoader.java:83) - Static select for collection concert.model.entity.Concert.order: select order0_.concert_id as concert_3_2_0_, order0_.order_id as order_id1_2_0_, order0_.order_id as order_id1_2_1_, order0_.amount as amount2_2_1_, order0_.concert_id as concert_3_2_1_, order0_.customer_email as customer4_2_1_, order0_.customer_name as customer5_2_1_ from Orders order0_ where order0_.concert_id=?
2022-07-04 23:28:03,967 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@adcfad9]
2022-07-04 23:28:03,967 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@fb49fdf]
2022-07-04 23:28:03,967 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concert
2022-07-04 23:28:03,968 DEBUG (MetamodelGraphWalker.java:154) - Property path deemed to be circular : concert
2022-07-04 23:28:03,968 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : concertId
2022-07-04 23:28:03,968 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singer
2022-07-04 23:28:03,968 DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@10c47c79]
2022-07-04 23:28:03,968 DEBUG (MetamodelGraphWalker.java:146) - Visiting attribute path : singerId
2022-07-04 23:28:03,969 DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2022-07-04 23:28:03,969 DEBUG (LoadQueryJoinAndFetchProcessor.java:102) - processing queryspace <gen:0>
2022-07-04 23:28:03,970 DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(collection=concert.model.entity.Concert.concertSinger)
    - Returns
       - CollectionReturnImpl(collection=concert.model.entity.Concert.concertSinger, querySpaceUid=<gen:0>, path=[concert.model.entity.Concert.concertSinger])
          - (collection element) CollectionFetchableElementEntityGraph(entity=concert.model.entity.ConcertSinger, querySpaceUid=<gen:1>, path=[concert.model.entity.Concert.concertSinger].<elements>)
             - EntityAttributeFetchImpl(entity=concert.model.entity.Singer, querySpaceUid=<gen:2>, path=[concert.model.entity.Concert.concertSinger].<elements>.singer)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=concert.model.entity.Concert.concertSinger)
          - SQL table alias mapping - concertsin0_
          - alias suffix - 0_
          - suffixed key columns - {concert_2_1_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - concert_1_1_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=concert.model.entity.ConcertSinger)
                - SQL table alias mapping - concertsin0_
                - alias suffix - 1_
                - suffixed key columns - {concert_1_1_1_}

2022-07-04 23:28:03,970 DEBUG (CollectionLoader.java:83) - Static select for collection concert.model.entity.Concert.concertSinger: select concertsin0_.concert_id as concert_2_1_0_, concertsin0_.concert_singer_id as concert_1_1_0_, concertsin0_.concert_singer_id as concert_1_1_1_, concertsin0_.concert_id as concert_2_1_1_, concertsin0_.singer_id as singer_i3_1_1_ from concert_singer concertsin0_ where concertsin0_.concert_id=?
2022-07-04 23:28:04,034 DEBUG (SchemaManagementToolCoordinator.java:57) - No actions specified; doing nothing
2022-07-04 23:28:04,035 DEBUG (JtaPlatformInitiator.java:43) - No JtaPlatform was specified, checking resolver
2022-07-04 23:28:04,036 DEBUG (JtaPlatformResolverInitiator.java:33) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2022-07-04 23:28:04,045 DEBUG (StandardJtaPlatformResolver.java:137) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2022-07-04 23:28:04,045  INFO (JtaPlatformInitiator.java:52) - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2022-07-04 23:28:04,047 DEBUG (NamedQueryRepository.java:151) - Checking 0 named HQL queries
2022-07-04 23:28:04,047 DEBUG (NamedQueryRepository.java:167) - Checking 0 named SQL queries
2022-07-04 23:28:04,049 DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@787508ca
2022-07-04 23:28:04,053 DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: 0ed8ae6a-6a5c-46bb-9bbe-15d9f7f48ecd (<unnamed>)
2022-07-04 23:28:04,053 DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2022-07-04 23:28:04,227 DEBUG (StatisticsInitiator.java:101) - Statistics initialized [enabled=false]
2022-07-04 23:28:04,246 DEBUG (TransactionImpl.java:56) - On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
2022-07-04 23:28:04,247 DEBUG (TransactionImpl.java:84) - begin
2022-07-04 23:28:04,278 DEBUG (QueryTranslatorFactoryInitiator.java:45) - QueryTranslatorFactory: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@5e230fc6
2022-07-04 23:28:04,327 DEBUG (QueryTranslatorImpl.java:288) - parse() - HQL: select c from concert.model.entity.Concert c
2022-07-04 23:28:04,333 DEBUG (ErrorTracker.java:97) - throwQueryException() : no errors
2022-07-04 23:28:04,345 DEBUG (QueryTranslatorImpl.java:309) - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'concert'
       |     |  |  |  \-[IDENT] Node: 'model'
       |     |  |  \-[IDENT] Node: 'entity'
       |     |  \-[IDENT] Node: 'Concert'
       |     \-[ALIAS] Node: 'c'
       \-[SELECT] Node: 'select'
          \-[IDENT] Node: 'c'

2022-07-04 23:28:04,383 DEBUG (HqlSqlBaseWalker.java:124) - select << begin [level=1, statement=select]
2022-07-04 23:28:04,406 DEBUG (FromElement.java:146) - FromClause{level=1} : concert.model.entity.Concert (c) -> concert0_
2022-07-04 23:28:04,408 DEBUG (FromReferenceNode.java:60) - Resolved : c -> concert0_.concert_id
2022-07-04 23:28:04,410 DEBUG (HqlSqlBaseWalker.java:128) - select : finishing up [level=1, statement=select]
2022-07-04 23:28:04,410 DEBUG (HqlSqlWalker.java:752) - processQuery() :  ( SELECT ( {select clause} concert0_.concert_id ) ( FromClause{level=1} Concert concert0_ ) )
2022-07-04 23:28:04,427 DEBUG (JoinProcessor.java:192) - Using FROM fragment [Concert concert0_]
2022-07-04 23:28:04,429 DEBUG (HqlSqlBaseWalker.java:132) - select >> end [level=1, statement=select]
2022-07-04 23:28:04,430 DEBUG (QueryTranslatorImpl.java:275) - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Concert)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'concert0_.concert_id as concert_1_0_' {alias=c, className=concert.model.entity.Concert, tableAlias=concert0_}
    |  \-[SQL_TOKEN] SqlFragment: 'concert0_.concert_name as concert_2_0_, concert0_.contents as contents3_0_, concert0_.date as date4_0_, concert0_.location as location5_0_, concert0_.max_seats as max_seat6_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[c], fromElementByTableAlias=[concert0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Concert concert0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=c,role=null,tableName=Concert,tableAlias=concert0_,origin=null,columns={,className=concert.model.entity.Concert}}

2022-07-04 23:28:04,430 DEBUG (ErrorTracker.java:97) - throwQueryException() : no errors
2022-07-04 23:28:04,443 DEBUG (QueryTranslatorImpl.java:254) - HQL: select c from concert.model.entity.Concert c
2022-07-04 23:28:04,444 DEBUG (QueryTranslatorImpl.java:255) - SQL: select concert0_.concert_id as concert_1_0_, concert0_.concert_name as concert_2_0_, concert0_.contents as contents3_0_, concert0_.date as date4_0_, concert0_.location as location5_0_, concert0_.max_seats as max_seat6_0_ from Concert concert0_
2022-07-04 23:28:04,444 DEBUG (ErrorTracker.java:97) - throwQueryException() : no errors
2022-07-04 23:28:04,469 DEBUG (SqlStatementLogger.java:94) - 
    select
        concert0_.concert_id as concert_1_0_,
        concert0_.concert_name as concert_2_0_,
        concert0_.contents as contents3_0_,
        concert0_.date as date4_0_,
        concert0_.location as location5_0_,
        concert0_.max_seats as max_seat6_0_ 
    from
        Concert concert0_
2022-07-04 23:28:04,493 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 0
2022-07-04 23:28:04,498 DEBUG (Loader.java:1538) - Result row: EntityKey[concert.model.entity.Concert#1]
2022-07-04 23:28:04,511 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 1
2022-07-04 23:28:04,512 DEBUG (Loader.java:1538) - Result row: EntityKey[concert.model.entity.Concert#2]
2022-07-04 23:28:04,512 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 2
2022-07-04 23:28:04,512 DEBUG (Loader.java:1538) - Result row: EntityKey[concert.model.entity.Concert#3]
2022-07-04 23:28:04,513 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 3
2022-07-04 23:28:04,513 DEBUG (Loader.java:1538) - Result row: EntityKey[concert.model.entity.Concert#4]
2022-07-04 23:28:04,514 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 4
2022-07-04 23:28:04,514 DEBUG (Loader.java:1538) - Result row: EntityKey[concert.model.entity.Concert#5]
2022-07-04 23:28:04,514 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 5
2022-07-04 23:28:04,514 DEBUG (Loader.java:1538) - Result row: EntityKey[concert.model.entity.Concert#6]
2022-07-04 23:28:04,515 DEBUG (DelegatingBasicLogger.java:384) - Result set row: 6
2022-07-04 23:28:04,515 DEBUG (Loader.java:1538) - Result row: EntityKey[concert.model.entity.Concert#7]
2022-07-04 23:28:04,517 DEBUG (TwoPhaseLoad.java:145) - Resolving associations for [concert.model.entity.Concert#1]
2022-07-04 23:28:04,531 DEBUG (TwoPhaseLoad.java:288) - Done materializing entity [concert.model.entity.Concert#1]
2022-07-04 23:28:04,532 DEBUG (TwoPhaseLoad.java:145) - Resolving associations for [concert.model.entity.Concert#2]
2022-07-04 23:28:04,532 DEBUG (TwoPhaseLoad.java:288) - Done materializing entity [concert.model.entity.Concert#2]
2022-07-04 23:28:04,532 DEBUG (TwoPhaseLoad.java:145) - Resolving associations for [concert.model.entity.Concert#3]
2022-07-04 23:28:04,533 DEBUG (TwoPhaseLoad.java:288) - Done materializing entity [concert.model.entity.Concert#3]
2022-07-04 23:28:04,533 DEBUG (TwoPhaseLoad.java:145) - Resolving associations for [concert.model.entity.Concert#4]
2022-07-04 23:28:04,533 DEBUG (TwoPhaseLoad.java:288) - Done materializing entity [concert.model.entity.Concert#4]
2022-07-04 23:28:04,533 DEBUG (TwoPhaseLoad.java:145) - Resolving associations for [concert.model.entity.Concert#5]
2022-07-04 23:28:04,534 DEBUG (TwoPhaseLoad.java:288) - Done materializing entity [concert.model.entity.Concert#5]
2022-07-04 23:28:04,534 DEBUG (TwoPhaseLoad.java:145) - Resolving associations for [concert.model.entity.Concert#6]
2022-07-04 23:28:04,534 DEBUG (TwoPhaseLoad.java:288) - Done materializing entity [concert.model.entity.Concert#6]
2022-07-04 23:28:04,534 DEBUG (TwoPhaseLoad.java:145) - Resolving associations for [concert.model.entity.Concert#7]
2022-07-04 23:28:04,534 DEBUG (TwoPhaseLoad.java:288) - Done materializing entity [concert.model.entity.Concert#7]
